namespace {{RootNamespace}}{{DotModule}}.Entities
{
    using Serenity;
    using Serenity.ComponentModel;
    using Serenity.Data;
    using Serenity.Data.Mapping;
    using System;
    using System.ComponentModel;
	using System.Collections.Generic;
    using System.IO;

    [ConnectionKey("{{ConnectionKey}}"), TableName("{{SchemaAndTable}}")]
    [DisplayName("{{Title}}"), InstanceName("{{Title}}"), TwoLevelCached]
    [ReadPermission("{{Module}}:{{ClassName}}:Read")]
    [InsertPermission("{{Module}}:{{ClassName}}:Insert")]
    [UpdatePermission("{{Module}}:{{ClassName}}:Update")]
    [DeletePermission("{{Module}}:{{ClassName}}:Delete")]
    public sealed class {{RowClassName}} : {{RowBaseClassAndInterfaces}}
    {
{{~for x in Fields}}
        [{{x.Attributes}}]
        public {{x.PropertyType}} {{x.Ident}} { get { return Fields.{{x.Ident}}[this]; } set { Fields.{{x.Ident}}[this] = value; } }
		public partial class RowFields { public {{x.FieldType}}Field {{x.Ident}}; }
{{end}}
        #region Foreign Fields
{{~for j in Joins}}
{{~for k in j.Fields}}
        [{{k.Attributes}}, ReadOnly(true)]
        public {{k.PropertyType}} {{k.Ident}} { get { return Fields.{{k.Ident}}[this]; } set { Fields.{{k.Ident}}[this] = value; } }
		public partial class RowFields { public {{k.FieldType}}Field {{k.Ident}}; }
{{~end}}
{{~end}}
        #endregion Foreign Fields

{{~if Identity}}
        IIdField IIdRow.IdField { get { return Fields.{{Identity}}; } }
{{end~}}
{{~if NameField}}
        StringField INameRow.NameField { get { return Fields.{{NameField}}; } }
{{end}}
        public static readonly RowFields Fields = new RowFields().Init();

        public {{RowClassName}}() : base(Fields) { }

		public partial class RowFields : {{FieldsBaseClass}} { }
    }
}
