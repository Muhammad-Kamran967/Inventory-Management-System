<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Serenity.Data</name>
    </assembly>
    <members>
        <member name="T:Serenity.Data.ConnectionStringInfo">
            <summary>
            Contains a connection string, its key and provider name.
            </summary>
        </member>
        <member name="M:Serenity.Data.ConnectionStringInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.ConnectionStringInfo"/> class.
            </summary>
            <param name="connectionKey">The connection key.</param>
            <param name="connectionString">The connection string.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="P:Serenity.Data.ConnectionStringInfo.DatabaseName">
            <summary>
            Tries to get the name of the database corresponding to a connection key
            by parsing the connection string, returns null if it can't be parsed.
            </summary>
            <value>
            The name of the database.
            </value>
        </member>
        <member name="P:Serenity.Data.ConnectionStringInfo.Dialect">
            <summary>
            Gets or sets the dialect.
            </summary>
            <value>
            The dialect.
            </value>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Serenity.Data.ConnectionStringInfo.GetDialectByProviderName(System.String)">
            <summary>
            Gets the name of the dialect by provider name.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="P:Serenity.Data.ConnectionStringInfo.ConnectionKey">
            <summary>
            Gets the connection key.
            </summary>
            <value>
            The connection key.
            </value>
        </member>
        <member name="P:Serenity.Data.ConnectionStringInfo.ConnectionString">
            <summary>
            Gets the connection string.
            </summary>
            <value>
            The connection string.
            </value>
        </member>
        <member name="P:Serenity.Data.ConnectionStringInfo.ProviderName">
            <summary>
            Gets the name of the provider.
            </summary>
            <value>
            The name of the provider.
            </value>
        </member>
        <member name="P:Serenity.Data.ConnectionStringInfo.ProviderFactory">
            <summary>
            Gets the provider factory.
            </summary>
            <value>
            The provider factory.
            </value>
        </member>
        <member name="P:Serenity.Data.ConnectionStringInfo.Item1">
            <summary>
            Gets the connection string, obselete, use ConnectionString.
            </summary>
            <value>
            Connection string.
            </value>
        </member>
        <member name="P:Serenity.Data.ConnectionStringInfo.Item2">
            <summary>
            Gets the provider name, obsolete, use ProviderName.
            </summary>
            <value>
            The provider name.
            </value>
        </member>
        <member name="T:Serenity.Data.DataReaderExtensions">
            <summary>
              Extension methods for IDataReader objects.</summary>
        </member>
        <member name="M:Serenity.Data.DataReaderExtensions.AsDateTime(System.Data.IDataReader,System.Int32)">
            <summary>
              Reads value at field index. Returns DbNull as Null.DateTime.</summary>
            <param name="reader">
              Reader (required).</param>
            <param name="index">
              Index.</param>
            <returns>
              Field value or Null.DateTime if value is DbNull.</returns>
        </member>
        <member name="M:Serenity.Data.DataReaderExtensions.ToDateTime(System.Data.IDataReader,System.Int32)">
            <summary>
              Reads and converts value at field index to DateTime. Returns DbNull as Null.DateTime.</summary>
            <param name="reader">
              Reader (required).</param>
            <param name="index">
              Index.</param>
            <returns>
              Field value or Null.DateTime if value is DbNull.</returns>
        </member>
        <member name="M:Serenity.Data.DataReaderExtensions.AsDecimal(System.Data.IDataReader,System.Int32)">
            <summary>
              Reads value at field index. Returns DbNull as Null.Decimal.</summary>
            <param name="reader">
              Reader (required).</param>
            <param name="index">
              Index.</param>
            <returns>
              Field value or Null.Decimal if value is DbNull.</returns>
        </member>
        <member name="M:Serenity.Data.DataReaderExtensions.ToDecimal(System.Data.IDataReader,System.Int32)">
            <summary>
              Reads and converts value at field index to Decimal. Returns DbNull as Null.Decimal.</summary>
            <param name="reader">
              Reader (required).</param>
            <param name="index">
              Index.</param>
            <returns>
              Field value or Null.Decimal if value is DbNull.</returns>
        </member>
        <member name="M:Serenity.Data.DataReaderExtensions.AsDouble(System.Data.IDataReader,System.Int32)">
            <summary>
              Reads value at field index. Returns DbNull as Null.Double.</summary>
            <param name="reader">
              Reader (required).</param>
            <param name="index">
              Index.</param>
            <returns>
              Field value or Null.Double if value is DbNull.</returns>
        </member>
        <member name="M:Serenity.Data.DataReaderExtensions.ToDouble(System.Data.IDataReader,System.Int32)">
            <summary>
              Reads and converts value at field index to Double. Returns DbNull as Null.Double.</summary>
            <param name="reader">
              Reader (required).</param>
            <param name="index">
              Index.</param>
            <returns>
              Field value or Null.Double if value is DbNull.</returns>
        </member>
        <member name="M:Serenity.Data.DataReaderExtensions.AsInt32(System.Data.IDataReader,System.Int32)">
            <summary>
              Reads value at field index. Returns DbNull as Null.Int32.</summary>
            <param name="reader">
              Reader (required).</param>
            <param name="index">
              Index.</param>
            <returns>
              Field value or Null.Int32 if value is DbNull.</returns>
        </member>
        <member name="M:Serenity.Data.DataReaderExtensions.ToInt32(System.Data.IDataReader,System.Int32)">
            <summary>
              Reads and converts value at field index to Int32. Returns DbNull as Null.Int32.</summary>
            <param name="reader">
              Reader (required).</param>
            <param name="index">
              Index.</param>
            <returns>
              Field value or Null.Int32 if value is DbNull.</returns>
        </member>
        <member name="M:Serenity.Data.DataReaderExtensions.AsInt64(System.Data.IDataReader,System.Int32)">
            <summary>
              Reads value at field index. Returns DbNull as Null.Int64.</summary>
            <param name="reader">
              Reader (required).</param>
            <param name="index">
              Index.</param>
            <returns>
              Field value or Null.Int64 if value is DbNull.</returns>
        </member>
        <member name="M:Serenity.Data.DataReaderExtensions.ToInt64(System.Data.IDataReader,System.Int32)">
            <summary>
              Reads and converts value at field index to Int64. Returns DbNull as Null.Int64.</summary>
            <param name="reader">
              Reader (required).</param>
            <param name="index">
              Index.</param>
            <returns>
              Field value or Null.Int64 if value is DbNull.</returns>
        </member>
        <member name="M:Serenity.Data.DataReaderExtensions.AsString(System.Data.IDataReader,System.Int32)">
            <summary>
              Reads value at field index. Returns DbNull as null.</summary>
            <param name="reader">
              Reader (required).</param>
            <param name="index">
              Index.</param>
            <returns>
              Field value or null if value is DbNull.</returns>
        </member>
        <member name="M:Serenity.Data.DataReaderExtensions.ToString(System.Data.IDataReader,System.Int32)">
            <summary>
              Reads and converts value at field index to String. Returns DbNull as null.</summary>
            <param name="reader">
              Reader (required).</param>
            <param name="index">
              Index.</param>
            <returns>
              Field value or null if value is DbNull.</returns>
        </member>
        <member name="T:Serenity.Data.IConnectionProfiler">
            <summary>
            An interface used to abstract profilers like Mini Profiler.
            </summary>
        </member>
        <member name="M:Serenity.Data.IConnectionProfiler.Profile(System.Data.IDbConnection)">
            <summary>
            Wraps the specified connection with a profiled one.
            </summary>
            <param name="connection">The connection.</param>
            <returns>Wrapped connection.</returns>
        </member>
        <member name="T:Serenity.Data.IUnitOfWork">
            <summary>
            An interface to implement unit of work pattern, e.g. a transaction.
            </summary>
        </member>
        <member name="P:Serenity.Data.IUnitOfWork.Connection">
            <summary>
            Gets the connection.
            </summary>
            <value>
            The connection.
            </value>
        </member>
        <member name="E:Serenity.Data.IUnitOfWork.OnCommit">
            <summary>
            Occurs when transaction is committed.
            </summary>
        </member>
        <member name="E:Serenity.Data.IUnitOfWork.OnRollback">
            <summary>
            Occurs when transaction is rolled back.
            </summary>
        </member>
        <member name="T:Serenity.Data.SqlConnections">
            <summary>
            Contains DB connection related functions
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlConnections.GetFactory(System.String)">
            <summary>
            Gets a factory with given name
            </summary>
            <param name="providerName">Name of the provider.</param>
            <returns>Provider factory</returns>
        </member>
        <member name="M:Serenity.Data.SqlConnections.TryGetConnectionString(System.String)">
            <summary>
            Tries to get a connection string by its key.
            </summary>
            <param name="connectionKey">The connection key.</param>
            <returns>Connection string</returns>
        </member>
        <member name="M:Serenity.Data.SqlConnections.GetDatabaseName(System.String)">
            <summary>
            Gets the name of database for a specified connection key by parsing it.
            </summary>
            <param name="connectionKey">The connection key.</param>
            <returns>Database name, or null if can't be parsed.</returns>
        </member>
        <member name="M:Serenity.Data.SqlConnections.GetConnectionString(System.String)">
            <summary>
            Gets the connection string for a specified connection key.
            </summary>
            <param name="connectionKey">The connection key.</param>
            <returns>Connection string</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Serenity.Data.SqlConnections.New(System.String,System.String)">
            <summary>
              Creates a new <see cref="T:System.Data.Common.DbConnection"/> for given connection string and provider name.</summary>
            <param name="connectionString">Connection string</param>
            <param name="providerName">Provider name</param>
            <returns>A new <see cref="T:System.Data.Common.DbConnection"/> object.</returns>
        </member>
        <member name="M:Serenity.Data.SqlConnections.NewByKey(System.String)">
            <summary>
            Creates a new connection for specified connection key.
            </summary>
            <param name="connectionKey">The connection key.</param>
            <returns>A new connection</returns>
        </member>
        <member name="M:Serenity.Data.SqlConnections.NewFor``1">
            <summary>
            Creates a new connection for specified class, determining 
            the connection key by checking its [ConnectionKey] attribute.
            </summary>
            <typeparam name="TClass">The type of the class.</typeparam>
            <returns>A new connection</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Type has no ConnectionKey attribute!</exception>
        </member>
        <member name="M:Serenity.Data.SqlConnections.SetConnection(System.String,System.String,System.String)">
            <summary>
            Sets a connection string. 
            Warning! This is not a thread save method and is only intended for specific cases like unit tests,
            or to determine a connection string at application start. Don't try to implement dynamic connection
            strings or multi tenancy with this one! In a web environment, context switches or parallel requests
            might occur and your request/data/sql may end up in a different connection than the original one
            you set at request start!
            </summary>
            <param name="connectionKey">The connection key.</param>
            <param name="connectionString">The connection string.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="M:Serenity.Data.SqlConnections.EnsureOpen(System.Data.IDbConnection)">
            <summary>
            Ensures the connection is open. Warning! This method will not reopen a connection that once was opened
            and will raise an error.
            </summary>
            <param name="connection">The connection.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">connection</exception>
            <exception cref="T:System.InvalidOperationException">Can't auto open a closed connection that was previously open!</exception>
        </member>
        <member name="M:Serenity.Data.SqlConnections.GetCurrentActualTransaction(System.Data.IDbConnection)">
            <summary>
            Gets the current actual transaction for a connection if any.
            Most of the time, a connection will only have one transaction, 
            but in .NET it is not possible to know what is that transaction.
            Serenity wraps a connection (WrappedConnection) so that running
            transaction if any is available to get from the connection object.
            </summary>
            <param name="connection">The connection.</param>
            <returns>The current transaction for a connection</returns>
        </member>
        <member name="M:Serenity.Data.SqlConnections.SetCommandTimeout(System.Data.IDbConnection,System.Nullable{System.Int32})">
            <summary>Sets the default command timeout for given connection. 
            Only works with WrappedConnection instances, which are usually
            created by SqlConnections.NewXyz methods.</summary>
            <param name="connection">The connection.</param>
            <param name="timeout">The timeout value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Connection is not a WrappedConnection.</exception>
        </member>
        <member name="M:Serenity.Data.SqlConnections.GetDialect(System.Data.IDbConnection)">
            <summary>
            Gets the dialect for given connection.
            </summary>
            <param name="connection">The connection.</param>
            <returns>The sql dialect.</returns>
        </member>
        <member name="T:Serenity.Data.UnitOfWork">
            <summary>
            Unit of work implementation.
            </summary>
            <seealso cref="T:System.IDisposable" />
            <seealso cref="T:Serenity.Data.IUnitOfWork" />
        </member>
        <member name="M:Serenity.Data.UnitOfWork.#ctor(System.Data.IDbConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.UnitOfWork"/> class.
            </summary>
            <param name="connection">The connection.</param>
            <exception cref="T:System.ArgumentNullException">connection</exception>
        </member>
        <member name="P:Serenity.Data.UnitOfWork.Connection">
            <summary>
            Gets the connection.
            </summary>
            <value>
            The connection.
            </value>
        </member>
        <member name="M:Serenity.Data.UnitOfWork.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            Rollbacks the transaction if any.
            </summary>
        </member>
        <member name="M:Serenity.Data.UnitOfWork.Commit">
            <summary>
            Commits this transaction.
            </summary>
            <exception cref="T:System.ArgumentNullException">transaction</exception>
        </member>
        <member name="E:Serenity.Data.UnitOfWork.OnCommit">
            <summary>
            Occurs when transaction is committed.
            </summary>
        </member>
        <member name="E:Serenity.Data.UnitOfWork.OnRollback">
            <summary>
            Occurs when transaction is rolled back.
            </summary>
        </member>
        <member name="T:Serenity.Data.WrappedConnection">
            <summary>
            Wraps a connection to add current transaction and dialect support.
            </summary>
            <seealso cref="T:System.Data.IDbConnection" />
        </member>
        <member name="M:Serenity.Data.WrappedConnection.#ctor(System.Data.IDbConnection,Serenity.Data.ISqlDialect)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.WrappedConnection"/> class.
            </summary>
            <param name="actualConnection">The actual connection.</param>
            <param name="dialect">The dialect.</param>
        </member>
        <member name="P:Serenity.Data.WrappedConnection.OpenedOnce">
            <summary>
            Gets a value indicating whether the connection was opened once.
            </summary>
            <value>
              <c>true</c> if opened once; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.WrappedConnection.ActualConnection">
            <summary>
            Gets the actual connection instance.
            </summary>
            <value>
            The actual connection.
            </value>
        </member>
        <member name="P:Serenity.Data.WrappedConnection.Dialect">
            <summary>
            Gets or sets the SQL dialect.
            </summary>
            <value>
            The SQL dialect.
            </value>
        </member>
        <member name="P:Serenity.Data.WrappedConnection.CurrentTransaction">
            <summary>
            Gets the current transaction.
            </summary>
            <value>
            The current transaction.
            </value>
        </member>
        <member name="M:Serenity.Data.WrappedConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins a database transaction with the specified <see cref="T:System.Data.IsolationLevel"></see> value.
            </summary>
            <param name="il">One of the <see cref="T:System.Data.IsolationLevel"></see> values.</param>
            <returns>
            An object representing the new transaction.
            </returns>
        </member>
        <member name="M:Serenity.Data.WrappedConnection.BeginTransaction">
            <summary>
            Begins a database transaction.
            </summary>
            <returns>
            An object representing the new transaction.
            </returns>
        </member>
        <member name="M:Serenity.Data.WrappedConnection.ChangeDatabase(System.String)">
            <summary>
            Changes the current database for an open Connection object.
            </summary>
            <param name="databaseName">The name of the database to use in place of the current database.</param>
        </member>
        <member name="M:Serenity.Data.WrappedConnection.Close">
            <summary>
            Closes the connection to the database.
            </summary>
        </member>
        <member name="P:Serenity.Data.WrappedConnection.ConnectionString">
            <summary>
            Gets or sets the string used to open a database.
            </summary>
        </member>
        <member name="P:Serenity.Data.WrappedConnection.CommandTimeout">
            <summary>
            Gets or sets default command timeout.
            </summary>
            <value>
            Default command timeout.
            </value>
        </member>
        <member name="P:Serenity.Data.WrappedConnection.ConnectionTimeout">
            <summary>
            Gets the time to wait while trying to establish a connection before terminating the attempt and generating an error.
            </summary>
        </member>
        <member name="M:Serenity.Data.WrappedConnection.CreateCommand">
            <summary>
            Creates and returns a Command object associated with the connection.
            </summary>
            <returns>
            A Command object associated with the connection.
            </returns>
            <exception cref="T:System.Exception">
            Active transaction for connection is in invalid state! " + 
                                    "Connection was probably closed unexpectedly!
            or
            Can't set transaction for command! " +
                                    "Connection was probably closed unexpectedly!
            </exception>
        </member>
        <member name="P:Serenity.Data.WrappedConnection.Database">
            <summary>
            Gets the name of the current database or the database to be used after a connection is opened.
            </summary>
        </member>
        <member name="M:Serenity.Data.WrappedConnection.Open">
            <summary>
            Opens a database connection with the settings specified by the ConnectionString property of the provider-specific Connection object.
            </summary>
        </member>
        <member name="P:Serenity.Data.WrappedConnection.State">
            <summary>
            Gets the current state of the connection.
            </summary>
        </member>
        <member name="M:Serenity.Data.WrappedConnection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Serenity.Data.WrappedTransaction">
            <summary>
            Wraps a transaction instance to add current transaction support for the wrapped connection.
            </summary>
            <seealso cref="T:System.Data.IDbTransaction" />
        </member>
        <member name="M:Serenity.Data.WrappedTransaction.#ctor(Serenity.Data.WrappedConnection,System.Data.IDbTransaction)">
            <summary>
              Creates a new WrappedTransaction instance.</summary>
            <param name="wrappedConnection">Wrapped connection</param>
            <param name="actualTransaction">The actual transaction, this wrapped transaction is created for.</param>
        </member>
        <member name="P:Serenity.Data.WrappedTransaction.Connection">
            <summary>
              Returns the connection associated with this transaction.</summary>
        </member>
        <member name="P:Serenity.Data.WrappedTransaction.ActualTransaction">
            <summary>
              Returns the actual transaction.</summary>
        </member>
        <member name="P:Serenity.Data.WrappedTransaction.IsolationLevel">
            <summary>
              Returns the transaction isolation level</summary>
        </member>
        <member name="M:Serenity.Data.WrappedTransaction.Commit">
            <summary>
              Commits actual transaction and sets wrapped transaction for related connection to null.</summary>
        </member>
        <member name="M:Serenity.Data.WrappedTransaction.Rollback">
            <summary>
              Rollbacks actual transaction and sets wrapped transaction for related connection to null.</summary>
        </member>
        <member name="M:Serenity.Data.WrappedTransaction.Dispose">
            <summary>
              Rolbacks actual transaction and sets wrapped transaction for related connection to null.</summary>
        </member>
        <member name="T:Serenity.Data.BaseCriteria">
            <summary>
            Base criteria object type
            </summary>
            <seealso cref="T:Serenity.ICriteria" />
        </member>
        <member name="P:Serenity.Data.BaseCriteria.IsEmpty">
            <summary>
            Gets a value indicating whether this criteria instance is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.IsNull">
            <summary>
            Creates a new unary IsNull criteria containing this criteria as the operand.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.IsNotNull">
            <summary> 
            Creates a new unary IsNotNull criteria containing this criteria as the operand.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.Like(System.String)">
            <summary>
            Creates a new binary Like criteria containing this criteria as the left operand.
            </summary>
            <param name="mask">The LIKE mask.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.NotLike(System.String)">
            <summary>
            Creates a new binary Not Like criteria containing this criteria as the left operand.
            </summary>
            <param name="mask">The like mask.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.StartsWith(System.String)">
            <summary>
            Creates a new binary Stars With (LIKE '...%') criteria containing this criteria as the left operand.
            </summary>
            <param name="mask">The starts with mask.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">mask is null</exception>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.EndsWith(System.String)">
            <summary>
            Creates a new binary Ends With (LIKE '%...') criteria containing this criteria as the left operand.
            </summary>
            <param name="mask">The ends with mask.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">mask is null</exception>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.Contains(System.String)">
            <summary>
            Creates a new binary Contains criteria (LIKE '%...%') containing this criteria as the left operand.
            </summary>
            <param name="mask">The contains mask.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.NotContains(System.String)">
            <summary>
            Creates a new binary Not Contains criteria (NOT LIKE '%...%') containing this criteria as the left operand.
            </summary>
            <param name="mask">The contains mask.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.In``1(``0[])">
            <summary>
            Creates a new binary IN criteria containing this criteria as the left operand.
            </summary>
            <typeparam name="T">Type of values</typeparam>
            <param name="values">The values.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">values</exception>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.In(Serenity.Data.BaseCriteria)">
            <summary>
            Creates a new binary IN criteria containing this criteria as the left operand.
            </summary>
            <param name="statement">The statement.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">statement is null or empty</exception>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.InStatement(Serenity.Data.BaseCriteria)">
            <summary>
            Creates a new binary IN criteria containing this criteria as the left operand.
            </summary>
            <param name="statement">The statement.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.In(Serenity.Data.ISqlQuery)">
            <summary>
            Creates a new binary IN criteria containing this criteria as the left operand.
            </summary>
            <param name="statement">The statement query.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">statement is null</exception>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.NotIn``1(``0[])">
            <summary>
            Creates a new binary NOT IN criteria containing this criteria as the left operand.
            </summary>
            <typeparam name="T">Type of values</typeparam>
            <param name="values">The values.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">values is null or zero length array</exception>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.NotIn(Serenity.Data.BaseCriteria)">
            <summary>
            Creates a new binary NOT IN criteria containing this criteria as the left operand.
            </summary>
            <param name="statement">The statement.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">statement is null or empty</exception>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.NotIn(Serenity.Data.ISqlQuery)">
            <summary>
            Creates a new binary NOT IN criteria containing this criteria as the left operand.
            </summary>
            <param name="statement">The statement.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">statement is null</exception>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_LogicalNot(Serenity.Data.BaseCriteria)">
            <summary>
            Implements the operator !.
            </summary>
            <param name="criteria">The criteria.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_Equality(Serenity.Data.BaseCriteria,Serenity.Data.BaseCriteria)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="criteria2">The criteria2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_Equality(Serenity.Data.BaseCriteria,Serenity.Data.Parameter)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="param">The parameter.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_Equality(Serenity.Data.BaseCriteria,System.Int32)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_Equality(Serenity.Data.BaseCriteria,System.Int64)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_Equality(Serenity.Data.BaseCriteria,System.String)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_Equality(Serenity.Data.BaseCriteria,System.Double)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_Equality(Serenity.Data.BaseCriteria,System.Decimal)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_Equality(Serenity.Data.BaseCriteria,System.DateTime)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_Equality(Serenity.Data.BaseCriteria,System.Guid)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_Equality(Serenity.Data.BaseCriteria,System.Enum)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_Inequality(Serenity.Data.BaseCriteria,Serenity.Data.BaseCriteria)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="criteria2">The criteria2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_Inequality(Serenity.Data.BaseCriteria,Serenity.Data.Parameter)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="param">The parameter.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_Inequality(Serenity.Data.BaseCriteria,System.Int32)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_Inequality(Serenity.Data.BaseCriteria,System.Int64)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_Inequality(Serenity.Data.BaseCriteria,System.String)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_Inequality(Serenity.Data.BaseCriteria,System.Double)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_Inequality(Serenity.Data.BaseCriteria,System.Decimal)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_Inequality(Serenity.Data.BaseCriteria,System.DateTime)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_Inequality(Serenity.Data.BaseCriteria,System.Guid)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_Inequality(Serenity.Data.BaseCriteria,System.Enum)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_GreaterThan(Serenity.Data.BaseCriteria,Serenity.Data.BaseCriteria)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="criteria2">The criteria2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_GreaterThan(Serenity.Data.BaseCriteria,Serenity.Data.Parameter)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="param">The parameter.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_GreaterThan(Serenity.Data.BaseCriteria,System.Int32)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_GreaterThan(Serenity.Data.BaseCriteria,System.Int64)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_GreaterThan(Serenity.Data.BaseCriteria,System.String)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_GreaterThan(Serenity.Data.BaseCriteria,System.Double)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_GreaterThan(Serenity.Data.BaseCriteria,System.Decimal)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_GreaterThan(Serenity.Data.BaseCriteria,System.DateTime)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_GreaterThan(Serenity.Data.BaseCriteria,System.Guid)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_GreaterThan(Serenity.Data.BaseCriteria,System.Enum)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_GreaterThanOrEqual(Serenity.Data.BaseCriteria,Serenity.Data.BaseCriteria)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="criteria2">The criteria2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_GreaterThanOrEqual(Serenity.Data.BaseCriteria,Serenity.Data.Parameter)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="param">The parameter.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_GreaterThanOrEqual(Serenity.Data.BaseCriteria,System.Int32)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_GreaterThanOrEqual(Serenity.Data.BaseCriteria,System.Int64)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_GreaterThanOrEqual(Serenity.Data.BaseCriteria,System.String)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_GreaterThanOrEqual(Serenity.Data.BaseCriteria,System.Double)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_GreaterThanOrEqual(Serenity.Data.BaseCriteria,System.Decimal)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_GreaterThanOrEqual(Serenity.Data.BaseCriteria,System.DateTime)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_GreaterThanOrEqual(Serenity.Data.BaseCriteria,System.Guid)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_GreaterThanOrEqual(Serenity.Data.BaseCriteria,System.Enum)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_LessThan(Serenity.Data.BaseCriteria,Serenity.Data.BaseCriteria)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="criteria2">The criteria2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_LessThan(Serenity.Data.BaseCriteria,Serenity.Data.Parameter)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="param">The parameter.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_LessThan(Serenity.Data.BaseCriteria,System.Int32)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_LessThan(Serenity.Data.BaseCriteria,System.Int64)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_LessThan(Serenity.Data.BaseCriteria,System.String)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_LessThan(Serenity.Data.BaseCriteria,System.Double)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_LessThan(Serenity.Data.BaseCriteria,System.Decimal)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_LessThan(Serenity.Data.BaseCriteria,System.DateTime)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_LessThan(Serenity.Data.BaseCriteria,System.Guid)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_LessThan(Serenity.Data.BaseCriteria,System.Enum)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_LessThanOrEqual(Serenity.Data.BaseCriteria,Serenity.Data.BaseCriteria)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="criteria2">The criteria2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_LessThanOrEqual(Serenity.Data.BaseCriteria,Serenity.Data.Parameter)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="param">The parameter.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_LessThanOrEqual(Serenity.Data.BaseCriteria,System.Int32)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_LessThanOrEqual(Serenity.Data.BaseCriteria,System.Int64)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_LessThanOrEqual(Serenity.Data.BaseCriteria,System.String)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_LessThanOrEqual(Serenity.Data.BaseCriteria,System.Double)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_LessThanOrEqual(Serenity.Data.BaseCriteria,System.Decimal)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_LessThanOrEqual(Serenity.Data.BaseCriteria,System.DateTime)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_LessThanOrEqual(Serenity.Data.BaseCriteria,System.Guid)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_LessThanOrEqual(Serenity.Data.BaseCriteria,System.Enum)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_BitwiseAnd(Serenity.Data.BaseCriteria,Serenity.Data.BaseCriteria)">
            <summary>
            Implements the operator &amp;.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="criteria2">The criteria2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_BitwiseOr(Serenity.Data.BaseCriteria,Serenity.Data.BaseCriteria)">
            <summary>
            Implements the operator |.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="criteria2">The criteria2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_ExclusiveOr(Serenity.Data.BaseCriteria,Serenity.Data.BaseCriteria)">
            <summary>
            Implements the operator ^.
            </summary>
            <param name="criteria1">The criteria1.</param>
            <param name="criteria2">The criteria2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_OnesComplement(Serenity.Data.BaseCriteria)">
            <summary>
            Implements the operator ~.
            </summary>
            <param name="criteria">The criteria.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_False(Serenity.Data.BaseCriteria)">
            <summary>
            Must return FALSE from this for short circuit OR (||) to return 
            a new binary criteria merging left and right operands in any case
            </summary>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_True(Serenity.Data.BaseCriteria)">
            <summary>
            Must ALSO return FALSE from this for short circuit AND (&amp;&amp;) to return 
            a new binary criteria merging left and right operands in any case
            https://msdn.microsoft.com/en-us/library/aa691312
            </summary>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.GetHashCode">
            <summary>
            Must override this or will get operator overload warning.
            </summary>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.Equals(System.Object)">
            <summary>
            Must override this or will get operator overload warning.
            </summary>
            <param name="obj">object</param>
            <returns>True if equals to object</returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.ToStringIgnoreParams">
            <summary>
            Converts the criteria to string while ignoring its params if any.
            ToString() raises an exception if a criteria has params, while this not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.ToString(Serenity.Data.IQueryWithParams)">
            <summary>
            Converts the criteria to string representation while adding params to the target query.
            </summary>
            <param name="query">The target query to add params to.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.ToString">
            <summary>
            Converts the criteria to string. Raises an exception if
            criteria contains parameters.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.ToString(System.Text.StringBuilder,Serenity.Data.IQueryWithParams)">
            <summary>
            Converts the criteria to string representation into a string builder, while adding
            its params to the target query.
            </summary>
            <param name="sb">The string builder.</param>
            <param name="query">The target query to add params to.</param>
        </member>
        <member name="T:Serenity.Data.BaseCriteriaVisitor">
            <summary>
            A visitor implementation for BaseCriteria object trees.
            </summary>
        </member>
        <member name="M:Serenity.Data.BaseCriteriaVisitor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.BaseCriteriaVisitor"/> class.
            </summary>
        </member>
        <member name="M:Serenity.Data.BaseCriteriaVisitor.Visit(Serenity.Data.BaseCriteria)">
            <summary>
            Visits the specified criteria.
            </summary>
            <param name="criteria">The criteria.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Criteria type is unkown.</exception>
        </member>
        <member name="M:Serenity.Data.BaseCriteriaVisitor.VisitCriteria(Serenity.Data.Criteria)">
            <summary>
            Visits the criteria returning potentially reworked version.
            </summary>
            <param name="criteria">The criteria.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteriaVisitor.VisitBinary(Serenity.Data.BinaryCriteria)">
            <summary>
            Visits the binary criteria. Binary criteria is one with
            two operands and an operator between.
            </summary>
            <param name="criteria">The binary criteria.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteriaVisitor.VisitUnary(Serenity.Data.UnaryCriteria)">
            <summary>
            Visits the unary criteria. Unary criteria is one with
            one operand and one operator.
            </summary>
            <param name="criteria">The unary criteria.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteriaVisitor.VisitParam(Serenity.Data.ParamCriteria)">
            <summary>
            Visits the parameter criteria. Parameter criteria is
            just a parameter name.
            </summary>
            <param name="criteria">The parameter criteria.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteriaVisitor.VisitValue(Serenity.Data.ValueCriteria)">
            <summary>
            Visits the value criteria. Value criteria is just a constant
            value.
            </summary>
            <param name="criteria">The criteria.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Data.BinaryCriteria">
            <summary>
            Binary criteria object, which has two operands and a operator.
            </summary>
            <seealso cref="T:Serenity.Data.BaseCriteria" />
        </member>
        <member name="M:Serenity.Data.BinaryCriteria.#ctor(Serenity.Data.BaseCriteria,Serenity.Data.CriteriaOperator,Serenity.Data.BaseCriteria)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.BinaryCriteria"/> class.
            </summary>
            <param name="left">The left operand.</param>
            <param name="op">The operator.</param>
            <param name="right">The right operand.</param>
            <exception cref="T:System.ArgumentNullException">
            Left or right operand is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Operator is not a binary one.</exception>
        </member>
        <member name="M:Serenity.Data.BinaryCriteria.ToString(System.Text.StringBuilder,Serenity.Data.IQueryWithParams)">
            <summary>
            Converts the criteria to string in a string builder, 
            while adding its params to the target query.
            </summary>
            <param name="sb">The string builder.</param>
            <param name="query">The target query.</param>
        </member>
        <member name="P:Serenity.Data.BinaryCriteria.Operator">
            <summary>
            Gets the operator.
            </summary>
            <value>
            The operator.
            </value>
        </member>
        <member name="P:Serenity.Data.BinaryCriteria.LeftOperand">
            <summary>
            Gets the left operand.
            </summary>
            <value>
            The left operand.
            </value>
        </member>
        <member name="P:Serenity.Data.BinaryCriteria.RightOperand">
            <summary>
            Gets the right operand.
            </summary>
            <value>
            The right operand.
            </value>
        </member>
        <member name="T:Serenity.Data.ConstantCriteria">
            <summary>
            A constant criteria object, which only contains a value expression
            that would be converted to its string representation in SQL,
            not a parameterized value.
            </summary>
            <seealso cref="T:Serenity.Data.Criteria" />
        </member>
        <member name="M:Serenity.Data.ConstantCriteria.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.ConstantCriteria"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Serenity.Data.ConstantCriteria.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.ConstantCriteria"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Serenity.Data.ConstantCriteria.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.ConstantCriteria"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Serenity.Data.ConstantCriteria.#ctor(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.ConstantCriteria"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Serenity.Data.ConstantCriteria.#ctor(System.String,Serenity.Data.ISqlDialect)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.ConstantCriteria"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="dialect">The dialect.</param>
        </member>
        <member name="M:Serenity.Data.ConstantCriteria.#ctor(System.Collections.Generic.IEnumerable{System.String},Serenity.Data.ISqlDialect)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.ConstantCriteria"/> class.
            </summary>
            <param name="values">The values.</param>
            <param name="dialect">The dialect.</param>
        </member>
        <member name="T:Serenity.Data.Criteria">
            <summary>
              An object that is used to create criterias by employing operator overloading 
              features of C# language, instead of using string based criterias.</summary>
        </member>
        <member name="F:Serenity.Data.Criteria.Empty">
            <summary>
            An empty criteria instance
            </summary>
        </member>
        <member name="F:Serenity.Data.Criteria.False">
            <summary>
            The false criteria instance (0 = 1)
            </summary>
        </member>
        <member name="F:Serenity.Data.Criteria.True">
            <summary>
            The true criteria instance (1 = 1)
            </summary>
        </member>
        <member name="M:Serenity.Data.Criteria.#ctor">
            <summary>
              Creates an empty criteria</summary>
        </member>
        <member name="M:Serenity.Data.Criteria.#ctor(System.String)">
            <summary>
              Creates a new criteria with given condition. This condition is usually a 
              field name, but it can also be a criteria text pre-generated.</summary>
            <remarks>
              Usually used like: <c>new Criteria("fieldname") >= 5</c>.</remarks>
            <param name="text">
              A field name or criteria condition (can be null)</param>
        </member>
        <member name="M:Serenity.Data.Criteria.#ctor(Serenity.Data.IField)">
            <summary>
              Creates a new criteria that contains field name of the metafield.</summary>
            <param name="field">
              Field (required).</param>
        </member>
        <member name="M:Serenity.Data.Criteria.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Criteria"/> class
            containing an expression like "alias.field".
            </summary>
            <param name="alias">The alias.</param>
            <param name="field">The field.</param>
            <exception cref="T:System.ArgumentNullException">
            Field or alias is null or empty string.
            </exception>
        </member>
        <member name="M:Serenity.Data.Criteria.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Criteria"/> class
            containing an expression like "tjoinnumber.field" (t7.field).
            </summary>
            <param name="joinNumber">The join number.</param>
            <param name="field">The field.</param>
            <exception cref="T:System.ArgumentNullException">field is null or empty</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">joinNumber is less than zero</exception>
        </member>
        <member name="M:Serenity.Data.Criteria.#ctor(Serenity.Data.IAlias,Serenity.Data.IField)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Criteria"/> class containing
            an expression like "alias.field".
            </summary>
            <param name="alias">The alias.</param>
            <param name="field">The field.</param>
        </member>
        <member name="M:Serenity.Data.Criteria.#ctor(Serenity.Data.IAlias,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Criteria"/> class containing
            an expression like "alias.field".
            </summary>
            <param name="alias">The alias.</param>
            <param name="field">The field.</param>
        </member>
        <member name="M:Serenity.Data.Criteria.#ctor(System.Int32,Serenity.Data.IField)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Criteria"/> class containing
            an expression like "tjoinNumber.field"
            </summary>
            <param name="joinNumber">The join number.</param>
            <param name="field">The field.</param>
        </member>
        <member name="M:Serenity.Data.Criteria.#ctor(System.String,Serenity.Data.IField)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Criteria"/> class containing
            an expression like "join.field".
            </summary>
            <param name="join">The join.</param>
            <param name="field">The field.</param>
        </member>
        <member name="M:Serenity.Data.Criteria.#ctor(Serenity.Data.ISqlQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Criteria"/> class containing
            a query's string representation.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="M:Serenity.Data.Criteria.Bracket(System.String)">
            <summary>
            Creates a new criteria containing field name in brackets.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">fieldName is null or empty string.</exception>
        </member>
        <member name="M:Serenity.Data.Criteria.Exists(Serenity.Data.ISqlQuery)">
            <summary>
              Creates a new EXISTS criteria</summary>
            <param name="query">
              Expression</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Criteria.Exists(System.String)">
            <summary>
              Creates a new EXISTS criteria</summary>
            <param name="expression">
              Expression</param>
            <returns></returns>
        </member>
        <member name="P:Serenity.Data.Criteria.IsEmpty">
            <summary>
              Gets if criteria is empty.</summary>
        </member>
        <member name="M:Serenity.Data.Criteria.ToString(System.Text.StringBuilder,Serenity.Data.IQueryWithParams)">
            <summary>
            Converts the criteria to its string representation while
            adding its parameters to the target query.
            </summary>
            <param name="sb">The string builder.</param>
            <param name="query">The target query to add params into.</param>
        </member>
        <member name="P:Serenity.Data.Criteria.Expression">
            <summary>
            Gets the criteria expression.
            </summary>
            <value>
            The raw criteria expression.
            </value>
        </member>
        <member name="T:Serenity.Data.CriteriaOperator">
            <summary>
            Set of criteria operator types
            </summary>
        </member>
        <member name="F:Serenity.Data.CriteriaOperator.Paren">
            <summary>
            Parenthesis
            </summary>
        </member>
        <member name="F:Serenity.Data.CriteriaOperator.Not">
            <summary>
            NOT operator
            </summary>
        </member>
        <member name="F:Serenity.Data.CriteriaOperator.IsNull">
            <summary>
            IS NULL operator
            </summary>
        </member>
        <member name="F:Serenity.Data.CriteriaOperator.IsNotNull">
            <summary>
            IS NOT NULL operator
            </summary>
        </member>
        <member name="F:Serenity.Data.CriteriaOperator.Exists">
            <summary>
            EXISTS operator
            </summary>
        </member>
        <member name="F:Serenity.Data.CriteriaOperator.AND">
            <summary>
            AND operator
            </summary>
        </member>
        <member name="F:Serenity.Data.CriteriaOperator.OR">
            <summary>
            OR operator
            </summary>
        </member>
        <member name="F:Serenity.Data.CriteriaOperator.XOR">
            <summary>
            XOR operator
            </summary>
        </member>
        <member name="F:Serenity.Data.CriteriaOperator.EQ">
            <summary>
            Equal (=) operator
            </summary>
        </member>
        <member name="F:Serenity.Data.CriteriaOperator.NE">
            <summary>
            Not Equal (&lt;&gt;) operator
            </summary>
        </member>
        <member name="F:Serenity.Data.CriteriaOperator.GT">
            <summary>
            Greater than (&gt;) operator
            </summary>
        </member>
        <member name="F:Serenity.Data.CriteriaOperator.GE">
            <summary>
            Greater Than or Equal To (&gt;=) operator
            </summary>
        </member>
        <member name="F:Serenity.Data.CriteriaOperator.LT">
            <summary>
            Less Than (&lt;) Operator
            </summary>
        </member>
        <member name="F:Serenity.Data.CriteriaOperator.LE">
            <summary>
            Less Than or Equal To (&lt;=) operator
            </summary>
        </member>
        <member name="F:Serenity.Data.CriteriaOperator.In">
            <summary>
            IN operator
            </summary>
        </member>
        <member name="F:Serenity.Data.CriteriaOperator.NotIn">
            <summary>
            NOT IN operator
            </summary>
        </member>
        <member name="F:Serenity.Data.CriteriaOperator.Like">
            <summary>
            LIKE operator
            </summary>
        </member>
        <member name="F:Serenity.Data.CriteriaOperator.NotLike">
            <summary>
            NOT LIKE operator
            </summary>
        </member>
        <member name="T:Serenity.Data.JsonCriteriaConverter">
            <summary>
              Serialize/deserialize a BaseCriteria object</summary>
        </member>
        <member name="M:Serenity.Data.JsonCriteriaConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
              Writes the JSON representation of the object.</summary>
            <param name="writer">
              The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">
              The value.</param>
            <param name="serializer">
              The calling serializer.</param>
        </member>
        <member name="M:Serenity.Data.JsonCriteriaConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
              Reads the JSON representation of the object.</summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">
              Type of the object.</param>
            <param name="existingValue">
              The existing value of object being read.</param>
            <param name="serializer">
              The calling serializer.</param>
            <returns>
              The object value.</returns>
        </member>
        <member name="M:Serenity.Data.JsonCriteriaConverter.CanConvert(System.Type)">
            <summary>
              Determines whether this instance can convert the specified object type.</summary>
            <param name="objectType">
              Type of the object.</param>
            <returns>
              True if this instance can convert the specified object type; otherwise, false.</returns>
        </member>
        <member name="P:Serenity.Data.JsonCriteriaConverter.CanRead">
            <summary>
              Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can read JSON.</summary>
            <value>
              True if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, false.</value>
        </member>
        <member name="P:Serenity.Data.JsonCriteriaConverter.CanWrite">
            <summary>
              Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON.</summary>
            <value>
              True if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, false.</value>
        </member>
        <member name="T:Serenity.Data.JsonSafeCriteriaConverter">
            <summary>
              Serialize/deserialize a BaseCriteria object and checks for safety of criteria expressions.</summary>
        </member>
        <member name="M:Serenity.Data.JsonSafeCriteriaConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="T:Serenity.Data.ParamCriteria">
            <summary>
            A criteria object containing a parameter name
            </summary>
            <seealso cref="T:Serenity.Data.BaseCriteria" />
        </member>
        <member name="M:Serenity.Data.ParamCriteria.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.ParamCriteria"/> class.
            </summary>
            <param name="name">The parameter name. Should not start with @.</param>
            <exception cref="T:System.ArgumentNullException">name is null or empty</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">name starts with @.</exception>
        </member>
        <member name="M:Serenity.Data.ParamCriteria.ToString(System.Text.StringBuilder,Serenity.Data.IQueryWithParams)">
            <summary>
            Converts the criteria to string.
            </summary>
            <param name="sb">The string builder.</param>
            <param name="query">The query.</param>
        </member>
        <member name="P:Serenity.Data.ParamCriteria.Name">
            <summary>
            Gets the parameter name.
            </summary>
            <value>
            The parameter name.
            </value>
        </member>
        <member name="T:Serenity.Data.SafeCriteriaValidator">
            <summary>
            Validates a criteria for allowed field names, operators and SQL injection safety
            </summary>
            <seealso cref="T:Serenity.Data.BaseCriteriaVisitor" />
        </member>
        <member name="M:Serenity.Data.SafeCriteriaValidator.Validate(Serenity.Data.BaseCriteria)">
            <summary>
            Validates the specified criteria.
            </summary>
            <param name="criteria">The criteria.</param>
        </member>
        <member name="M:Serenity.Data.SafeCriteriaValidator.VisitCriteria(Serenity.Data.Criteria)">
            <summary>
            Visits the criteria returning potentially reworked version.
            </summary>
            <param name="criteria">The criteria.</param>
            <returns></returns>
            <exception cref="T:Serenity.Services.ValidationError">InvalidCriteriaField</exception>
        </member>
        <member name="M:Serenity.Data.SafeCriteriaValidator.VisitParam(Serenity.Data.ParamCriteria)">
            <summary>
            Visits the parameter criteria. Parameter criteria is
            just a parameter name.
            </summary>
            <param name="criteria">The parameter criteria.</param>
            <returns></returns>
            <exception cref="T:Serenity.Services.ValidationError">UnsupportedCriteriaType - Param type criterias is not supported!</exception>
        </member>
        <member name="T:Serenity.Data.UnaryCriteria">
            <summary>
            Unary criteria with one operand and operator
            </summary>
            <seealso cref="T:Serenity.Data.BaseCriteria" />
        </member>
        <member name="M:Serenity.Data.UnaryCriteria.#ctor(Serenity.Data.CriteriaOperator,Serenity.Data.BaseCriteria)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.UnaryCriteria"/> class.
            </summary>
            <param name="op">The op.</param>
            <param name="operand">The operand.</param>
            <exception cref="T:System.ArgumentNullException">operand</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">operator</exception>
        </member>
        <member name="M:Serenity.Data.UnaryCriteria.ToString(System.Text.StringBuilder,Serenity.Data.IQueryWithParams)">
            <summary>
            Converts the criteria to string.
            </summary>
            <param name="sb">The string builder.</param>
            <param name="query">The target query to add params to.</param>
        </member>
        <member name="P:Serenity.Data.UnaryCriteria.Operator">
            <summary>
            Gets the operator.
            </summary>
            <value>
            The operator.
            </value>
        </member>
        <member name="P:Serenity.Data.UnaryCriteria.Operand">
            <summary>
            Gets the operand.
            </summary>
            <value>
            The operand.
            </value>
        </member>
        <member name="T:Serenity.Data.ValueCriteria">
            <summary>
            Criteria object with one value
            </summary>
            <seealso cref="T:Serenity.Data.BaseCriteria" />
        </member>
        <member name="M:Serenity.Data.ValueCriteria.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.ValueCriteria"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Serenity.Data.ValueCriteria.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:Serenity.Data.ValueCriteria.ToString(System.Text.StringBuilder,Serenity.Data.IQueryWithParams)">
            <summary>
            Converts the criteria to string.
            </summary>
            <param name="sb">The string builder.</param>
            <param name="query">The target query to add params to.</param>
        </member>
        <member name="T:Serenity.Data.FirebirdDialect">
            <summary>
            Firebird dialect
            </summary>
            <seealso cref="T:Serenity.Data.ISqlDialect" />
        </member>
        <member name="F:Serenity.Data.FirebirdDialect.Instance">
            <summary>
            The shared instance of FirebirdDialect.
            </summary>
        </member>
        <member name="P:Serenity.Data.FirebirdDialect.CanUseOffsetFetch">
            <summary>
            Gets a value indicating whether the server supports OFFSET FETCH.
            </summary>
            <value>
            <c>true</c> if the server supports OFFSET FETCH; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.FirebirdDialect.CanUseRowNumber">
            <summary>
            Gets a value indicating whether the server supports ROWNUMBER.
            </summary>
            <value>
            <c>true</c> if the server supports ROWNUMBER; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.FirebirdDialect.CanUseSkipKeyword">
            <summary>
            Gets a value indicating whether the server supports SKIP keyword (or a variation of it).
            </summary>
            <value>
            <c>true</c> if the server supports a variation of SKIP keyword; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.FirebirdDialect.CloseQuote">
            <summary>
            Gets the close quote character for quoting identifiers.
            </summary>
            <value>
            The close quote.
            </value>
        </member>
        <member name="P:Serenity.Data.FirebirdDialect.ConcatOperator">
            <summary>
            Gets the CONCAT operator keyword.
            </summary>
            <value>
            The CONCAT operator keyword.
            </value>
        </member>
        <member name="P:Serenity.Data.FirebirdDialect.DateFormat">
            <summary>
            Gets the date format.
            </summary>
            <value>
            The date format.
            </value>
        </member>
        <member name="P:Serenity.Data.FirebirdDialect.DateTimeFormat">
            <summary>
            Gets the date time format.
            </summary>
            <value>
            The date time format.
            </value>
        </member>
        <member name="P:Serenity.Data.FirebirdDialect.IsLikeCaseSensitive">
            <summary>
            Gets a value indicating whether the LIKE operator is case sensitive.
            </summary>
            <value>
            <c>true</c> if the LIKE operator is sensitive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.FirebirdDialect.MultipleResultsets">
            <summary>
            Gets a value indicating whether the server supports multiple resultsets.
            </summary>
            <value>
            <c>true</c> if the server supports multiple resultsets; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.FirebirdDialect.NeedsBoolWorkaround">
            <summary>
            Gets a value indicating whether the server needs a workaround to handle Boolean values false/true.
            </summary>
            <value>
            <c>true</c> if the server needs a workaround to handle Boolean values false/true; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.FirebirdDialect.NeedsExecuteBlockStatement">
            <summary>
            Gets a value indicating whether the server needs EXECUTE BLOCK statement.
            </summary>
            <value>
            <c>true</c> if the server needs EXECUTE BLOCK statement; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.FirebirdDialect.OffsetFormat">
            <summary>
            Gets the format for OFFSET only statements.
            </summary>
            <value>
            The offset format.
            </value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Serenity.Data.FirebirdDialect.OffsetFetchFormat">
            <summary>
            Gets the format for OFFSET FETCH statements.
            </summary>
            <value>
            The offset fetch format.
            </value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Serenity.Data.FirebirdDialect.OpenQuote">
            <summary>
            Gets the open quote character for quoting identifiers.
            </summary>
            <value>
            The open quote.
            </value>
        </member>
        <member name="M:Serenity.Data.FirebirdDialect.QuoteColumnAlias(System.String)">
            <summary>
            Quotes the column alias. This usually calls QuoteIdentifier except for Oracle.
            </summary>
            <param name="s">The column alias.</param>
            <returns>
            Quoted column alias
            </returns>
        </member>
        <member name="M:Serenity.Data.FirebirdDialect.QuoteIdentifier(System.String)">
            <summary>
            Quotes the identifier.
            </summary>
            <param name="s">The identifier.</param>
            <returns>
            Quoted identifier
            </returns>
        </member>
        <member name="M:Serenity.Data.FirebirdDialect.QuoteUnicodeString(System.String)">
            <summary>
            Quotes the unicode string.
            </summary>
            <param name="s">The string.</param>
            <returns></returns>
        </member>
        <member name="P:Serenity.Data.FirebirdDialect.ScopeIdentityExpression">
            <summary>
            Gets the SCOPE IDENTITY expression.
            </summary>
            <value>
            The SCOPE INDENTITY expression.
            </value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Serenity.Data.FirebirdDialect.ServerType">
            <summary>
            Gets the type of the server.
            </summary>
            <value>
            The type of the server.
            </value>
        </member>
        <member name="P:Serenity.Data.FirebirdDialect.SkipKeyword">
            <summary>
            Gets the skip keyword.
            </summary>
            <value>
            The skip keyword.
            </value>
        </member>
        <member name="P:Serenity.Data.FirebirdDialect.TakeKeyword">
            <summary>
            Gets the take keyword.
            </summary>
            <value>
            The take keyword.
            </value>
        </member>
        <member name="P:Serenity.Data.FirebirdDialect.TimeFormat">
            <summary>
            Gets the time format.
            </summary>
            <value>
            The time format.
            </value>
        </member>
        <member name="M:Serenity.Data.FirebirdDialect.UnionKeyword(Serenity.Data.SqlUnionType)">
            <summary>
            Gets the union keyword for specified union type.
            </summary>
            <param name="unionType">Type of the union.</param>
            <returns>
            Union keyword
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Serenity.Data.FirebirdDialect.UseDateTime2">
            <summary>
            Gets a value indicating whether use datetime2 type.
            </summary>
            <value>
            <c>true</c> if use datetime2; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.FirebirdDialect.UseReturningIdentity">
            <summary>
            Gets a value indicating whether to use returning identity.
            </summary>
            <value>
            <c>true</c> if should use returning identity; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.FirebirdDialect.UseReturningIntoVar">
            <summary>
            Gets a value indicating whether use returning into variable.
            </summary>
            <value>
            <c>true</c> if use returning into variable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.FirebirdDialect.UseScopeIdentity">
            <summary>
            Gets a value indicating whether to use scope identity.
            </summary>
            <value>
            <c>true</c> if to use scope identity; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.FirebirdDialect.UseTakeAtEnd">
            <summary>
            Gets a value indicating whether to use TAKE at end.
            </summary>
            <value>
            <c>true</c> if to use TAKE at end; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.FirebirdDialect.UseRowNum">
            <summary>
            Gets a value indicating whether ROWNUM.
            </summary>
            <value>
            <c>true</c> if can use ROWNUM; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.FirebirdDialect.ParameterPrefix">
            <summary>
            Gets the parameter prefix character.
            </summary>
            <value>
            The parameter prefix character.
            </value>
        </member>
        <member name="T:Serenity.Data.ISqlDialect">
            <summary>
            Abstraction for SQL dialect, e.g. syntax for different SQL server types and connection settings.
            </summary>
        </member>
        <member name="P:Serenity.Data.ISqlDialect.CanUseOffsetFetch">
            <summary>
            Gets a value indicating whether the server supports OFFSET FETCH.
            </summary>
            <value>
              <c>true</c> if the server supports OFFSET FETCH; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.ISqlDialect.CanUseRowNumber">
            <summary>
            Gets a value indicating whether the server supports ROWNUMBER.
            </summary>
            <value>
              <c>true</c> if the server supports ROWNUMBER; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.ISqlDialect.CanUseSkipKeyword">
            <summary>
            Gets a value indicating whether the server supports SKIP keyword (or a variation of it).
            </summary>
            <value>
              <c>true</c> if the server supports a variation of SKIP keyword; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.ISqlDialect.CloseQuote">
            <summary>
            Gets the close quote character for quoting identifiers.
            </summary>
            <value>
            The close quote.
            </value>
        </member>
        <member name="P:Serenity.Data.ISqlDialect.ConcatOperator">
            <summary>
            Gets the CONCAT operator keyword.
            </summary>
            <value>
            The CONCAT operator keyword.
            </value>
        </member>
        <member name="P:Serenity.Data.ISqlDialect.DateFormat">
            <summary>
            Gets the date format.
            </summary>
            <value>
            The date format.
            </value>
        </member>
        <member name="P:Serenity.Data.ISqlDialect.DateTimeFormat">
            <summary>
            Gets the date time format.
            </summary>
            <value>
            The date time format.
            </value>
        </member>
        <member name="P:Serenity.Data.ISqlDialect.IsLikeCaseSensitive">
            <summary>
            Gets a value indicating whether the LIKE operator is case sensitive.
            </summary>
            <value>
              <c>true</c> if the LIKE operator is sensitive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.ISqlDialect.MultipleResultsets">
            <summary>
            Gets a value indicating whether the server supports multiple resultsets.
            </summary>
            <value>
              <c>true</c> if the server supports multiple resultsets; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.ISqlDialect.NeedsExecuteBlockStatement">
            <summary>
            Gets a value indicating whether the server needs EXECUTE BLOCK statement.
            </summary>
            <value>
              <c>true</c> if the server needs EXECUTE BLOCK statement; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.ISqlDialect.NeedsBoolWorkaround">
            <summary>
            Gets a value indicating whether the server needs a workaround to handle Boolean values false/true.
            </summary>
            <value>
              <c>true</c> if the server needs a workaround to handle Boolean values false/true; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.ISqlDialect.OffsetFormat">
            <summary>
            Gets the format for OFFSET only statements.
            </summary>
            <value>
            The offset format.
            </value>
        </member>
        <member name="P:Serenity.Data.ISqlDialect.OffsetFetchFormat">
            <summary>
            Gets the format for OFFSET FETCH statements.
            </summary>
            <value>
            The offset fetch format.
            </value>
        </member>
        <member name="P:Serenity.Data.ISqlDialect.OpenQuote">
            <summary>
            Gets the open quote character for quoting identifiers.
            </summary>
            <value>
            The open quote.
            </value>
        </member>
        <member name="M:Serenity.Data.ISqlDialect.QuoteColumnAlias(System.String)">
            <summary>
            Quotes the column alias. This usually calls QuoteIdentifier except for Oracle.
            </summary>
            <param name="s">The column alias.</param>
            <returns>Quoted column alias</returns>
        </member>
        <member name="M:Serenity.Data.ISqlDialect.QuoteIdentifier(System.String)">
            <summary>
            Quotes the identifier.
            </summary>
            <param name="s">The identifier.</param>
            <returns>Quoted identifier</returns>
        </member>
        <member name="M:Serenity.Data.ISqlDialect.QuoteUnicodeString(System.String)">
            <summary>
            Quotes the unicode string.
            </summary>
            <param name="s">The string.</param>
            <returns></returns>
        </member>
        <member name="P:Serenity.Data.ISqlDialect.ScopeIdentityExpression">
            <summary>
            Gets the SCOPE IDENTITY expression.
            </summary>
            <value>
            The SCOPE INDENTITY expression.
            </value>
        </member>
        <member name="P:Serenity.Data.ISqlDialect.ServerType">
            <summary>
            Gets the type of the server.
            </summary>
            <value>
            The type of the server.
            </value>
        </member>
        <member name="P:Serenity.Data.ISqlDialect.SkipKeyword">
            <summary>
            Gets the skip keyword.
            </summary>
            <value>
            The skip keyword.
            </value>
        </member>
        <member name="P:Serenity.Data.ISqlDialect.TakeKeyword">
            <summary>
            Gets the take keyword.
            </summary>
            <value>
            The take keyword.
            </value>
        </member>
        <member name="P:Serenity.Data.ISqlDialect.TimeFormat">
            <summary>
            Gets the time format.
            </summary>
            <value>
            The time format.
            </value>
        </member>
        <member name="M:Serenity.Data.ISqlDialect.UnionKeyword(Serenity.Data.SqlUnionType)">
            <summary>
            Gets the union keyword for specified union type.
            </summary>
            <param name="unionType">Type of the union.</param>
            <returns>Union keyword</returns>
        </member>
        <member name="P:Serenity.Data.ISqlDialect.UseDateTime2">
            <summary>
            Gets a value indicating whether use datetime2 type.
            </summary>
            <value>
              <c>true</c> if use datetime2; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.ISqlDialect.UseReturningIdentity">
            <summary>
            Gets a value indicating whether to use returning identity.
            </summary>
            <value>
              <c>true</c> if should use returning identity; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.ISqlDialect.UseReturningIntoVar">
            <summary>
            Gets a value indicating whether use returning into variable.
            </summary>
            <value>
              <c>true</c> if use returning into variable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.ISqlDialect.UseScopeIdentity">
            <summary>
            Gets a value indicating whether to use scope identity.
            </summary>
            <value>
              <c>true</c> if to use scope identity; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.ISqlDialect.UseTakeAtEnd">
            <summary>
            Gets a value indicating whether to use TAKE at end.
            </summary>
            <value>
              <c>true</c> if to use TAKE at end; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.ISqlDialect.UseRowNum">
            <summary>
            Gets a value indicating whether ROWNUM.
            </summary>
            <value>
              <c>true</c> if can use ROWNUM; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.ISqlDialect.ParameterPrefix">
            <summary>
            Gets the parameter prefix character.
            </summary>
            <value>
            The parameter prefix character.
            </value>
        </member>
        <member name="T:Serenity.Data.MySqlDialect">
            <summary>
            MySql dialect.
            </summary>
            <seealso cref="T:Serenity.Data.ISqlDialect" />
        </member>
        <member name="F:Serenity.Data.MySqlDialect.Instance">
            <summary>
            The shared instance of MySqlDialect.
            </summary>
        </member>
        <member name="P:Serenity.Data.MySqlDialect.CanUseOffsetFetch">
            <summary>
            Gets a value indicating whether the server supports OFFSET FETCH.
            </summary>
            <value>
            <c>true</c> if the server supports OFFSET FETCH; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.MySqlDialect.CanUseRowNumber">
            <summary>
            Gets a value indicating whether the server supports ROWNUMBER.
            </summary>
            <value>
            <c>true</c> if the server supports ROWNUMBER; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.MySqlDialect.CanUseSkipKeyword">
            <summary>
            Gets a value indicating whether the server supports SKIP keyword (or a variation of it).
            </summary>
            <value>
            <c>true</c> if the server supports a variation of SKIP keyword; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.MySqlDialect.CloseQuote">
            <summary>
            Gets the close quote character for quoting identifiers.
            </summary>
            <value>
            The close quote.
            </value>
        </member>
        <member name="P:Serenity.Data.MySqlDialect.ConcatOperator">
            <summary>
            Gets the CONCAT operator keyword.
            </summary>
            <value>
            The CONCAT operator keyword.
            </value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Serenity.Data.MySqlDialect.DateFormat">
            <summary>
            Gets the date format.
            </summary>
            <value>
            The date format.
            </value>
        </member>
        <member name="P:Serenity.Data.MySqlDialect.DateTimeFormat">
            <summary>
            Gets the date time format.
            </summary>
            <value>
            The date time format.
            </value>
        </member>
        <member name="P:Serenity.Data.MySqlDialect.IsLikeCaseSensitive">
            <summary>
            Gets a value indicating whether the LIKE operator is case sensitive.
            </summary>
            <value>
            <c>true</c> if the LIKE operator is sensitive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.MySqlDialect.MultipleResultsets">
            <summary>
            Gets a value indicating whether the server supports multiple resultsets.
            </summary>
            <value>
            <c>true</c> if the server supports multiple resultsets; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.MySqlDialect.NeedsBoolWorkaround">
            <summary>
            Gets a value indicating whether the server needs a workaround to handle Boolean values false/true.
            </summary>
            <value>
            <c>true</c> if the server needs a workaround to handle Boolean values false/true; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.MySqlDialect.NeedsExecuteBlockStatement">
            <summary>
            Gets a value indicating whether the server needs EXECUTE BLOCK statement.
            </summary>
            <value>
            <c>true</c> if the server needs EXECUTE BLOCK statement; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.MySqlDialect.OffsetFormat">
            <summary>
            Gets the format for OFFSET only statements.
            </summary>
            <value>
            The offset format.
            </value>
        </member>
        <member name="P:Serenity.Data.MySqlDialect.OffsetFetchFormat">
            <summary>
            Gets the format for OFFSET FETCH statements.
            </summary>
            <value>
            The offset fetch format.
            </value>
        </member>
        <member name="P:Serenity.Data.MySqlDialect.OpenQuote">
            <summary>
            Gets the open quote character for quoting identifiers.
            </summary>
            <value>
            The open quote.
            </value>
        </member>
        <member name="M:Serenity.Data.MySqlDialect.QuoteColumnAlias(System.String)">
            <summary>
            Quotes the column alias. This usually calls QuoteIdentifier except for Oracle.
            </summary>
            <param name="s">The column alias.</param>
            <returns>
            Quoted column alias
            </returns>
        </member>
        <member name="M:Serenity.Data.MySqlDialect.QuoteIdentifier(System.String)">
            <summary>
            Quotes the identifier.
            </summary>
            <param name="s">The identifier.</param>
            <returns>
            Quoted identifier
            </returns>
        </member>
        <member name="M:Serenity.Data.MySqlDialect.QuoteUnicodeString(System.String)">
            <summary>
            Quotes the unicode string.
            </summary>
            <param name="s">The string.</param>
            <returns></returns>
        </member>
        <member name="P:Serenity.Data.MySqlDialect.ScopeIdentityExpression">
            <summary>
            Gets the SCOPE IDENTITY expression.
            </summary>
            <value>
            The SCOPE INDENTITY expression.
            </value>
        </member>
        <member name="P:Serenity.Data.MySqlDialect.ServerType">
            <summary>
            Gets the type of the server.
            </summary>
            <value>
            The type of the server.
            </value>
        </member>
        <member name="P:Serenity.Data.MySqlDialect.SkipKeyword">
            <summary>
            Gets the skip keyword.
            </summary>
            <value>
            The skip keyword.
            </value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Serenity.Data.MySqlDialect.TakeKeyword">
            <summary>
            Gets the take keyword.
            </summary>
            <value>
            The take keyword.
            </value>
        </member>
        <member name="P:Serenity.Data.MySqlDialect.TimeFormat">
            <summary>
            Gets the time format.
            </summary>
            <value>
            The time format.
            </value>
        </member>
        <member name="M:Serenity.Data.MySqlDialect.UnionKeyword(Serenity.Data.SqlUnionType)">
            <summary>
            Gets the union keyword for specified union type.
            </summary>
            <param name="unionType">Type of the union.</param>
            <returns>
            Union keyword
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Serenity.Data.MySqlDialect.UseDateTime2">
            <summary>
            Gets a value indicating whether use datetime2 type.
            </summary>
            <value>
            <c>true</c> if use datetime2; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.MySqlDialect.UseReturningIdentity">
            <summary>
            Gets a value indicating whether to use returning identity.
            </summary>
            <value>
            <c>true</c> if should use returning identity; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.MySqlDialect.UseReturningIntoVar">
            <summary>
            Gets a value indicating whether use returning into variable.
            </summary>
            <value>
            <c>true</c> if use returning into variable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.MySqlDialect.UseScopeIdentity">
            <summary>
            Gets a value indicating whether to use scope identity.
            </summary>
            <value>
            <c>true</c> if to use scope identity; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.MySqlDialect.UseTakeAtEnd">
            <summary>
            Gets a value indicating whether to use TAKE at end.
            </summary>
            <value>
            <c>true</c> if to use TAKE at end; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.MySqlDialect.UseRowNum">
            <summary>
            Gets a value indicating whether ROWNUM.
            </summary>
            <value>
            <c>true</c> if can use ROWNUM; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.MySqlDialect.ParameterPrefix">
            <summary>
            Gets the parameter prefix character.
            </summary>
            <value>
            The parameter prefix character.
            </value>
        </member>
        <member name="T:Serenity.Data.OracleDialect">
            <summary>
            Oracle dialect
            </summary>
            <seealso cref="T:Serenity.Data.ISqlDialect" />
        </member>
        <member name="F:Serenity.Data.OracleDialect.Instance">
            <summary>
            The shared instance of OracleDialect.
            </summary>
        </member>
        <member name="P:Serenity.Data.OracleDialect.CanUseOffsetFetch">
            <summary>
            Gets a value indicating whether the server supports OFFSET FETCH.
            </summary>
            <value>
            <c>true</c> if the server supports OFFSET FETCH; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.OracleDialect.CanUseRowNumber">
            <summary>
            Gets a value indicating whether the server supports ROWNUMBER.
            </summary>
            <value>
            <c>true</c> if the server supports ROWNUMBER; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.OracleDialect.CanUseSkipKeyword">
            <summary>
            Gets a value indicating whether the server supports SKIP keyword (or a variation of it).
            </summary>
            <value>
            <c>true</c> if the server supports a variation of SKIP keyword; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.OracleDialect.OpenQuote">
            <summary>
            Gets the open quote character for quoting identifiers.
            </summary>
            <value>
            The open quote.
            </value>
        </member>
        <member name="P:Serenity.Data.OracleDialect.CloseQuote">
            <summary>
            Gets the close quote character for quoting identifiers.
            </summary>
            <value>
            The close quote.
            </value>
        </member>
        <member name="P:Serenity.Data.OracleDialect.ConcatOperator">
            <summary>
            Gets the CONCAT operator keyword.
            </summary>
            <value>
            The CONCAT operator keyword.
            </value>
        </member>
        <member name="P:Serenity.Data.OracleDialect.DateFormat">
            <summary>
            Gets the date format.
            </summary>
            <value>
            The date format.
            </value>
        </member>
        <member name="P:Serenity.Data.OracleDialect.DateTimeFormat">
            <summary>
            Gets the date time format.
            </summary>
            <value>
            The date time format.
            </value>
        </member>
        <member name="P:Serenity.Data.OracleDialect.IsLikeCaseSensitive">
            <summary>
            Gets a value indicating whether the LIKE operator is case sensitive.
            </summary>
            <value>
            <c>true</c> if the LIKE operator is sensitive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.OracleDialect.MultipleResultsets">
            <summary>
            Gets a value indicating whether the server supports multiple resultsets.
            </summary>
            <value>
            <c>true</c> if the server supports multiple resultsets; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.OracleDialect.NeedsBoolWorkaround">
            <summary>
            Gets a value indicating whether the server needs a workaround to handle Boolean values false/true.
            </summary>
            <value>
            <c>true</c> if the server needs a workaround to handle Boolean values false/true; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.OracleDialect.NeedsExecuteBlockStatement">
            <summary>
            Gets a value indicating whether the server needs EXECUTE BLOCK statement.
            </summary>
            <value>
            <c>true</c> if the server needs EXECUTE BLOCK statement; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.OracleDialect.OffsetFormat">
            <summary>
            Gets the format for OFFSET only statements.
            </summary>
            <value>
            The offset format.
            </value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Serenity.Data.OracleDialect.OffsetFetchFormat">
            <summary>
            Gets the format for OFFSET FETCH statements.
            </summary>
            <value>
            The offset fetch format.
            </value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Serenity.Data.OracleDialect.QuoteColumnAlias(System.String)">
            <summary>
            Quotes the column alias. This usually calls QuoteIdentifier except for Oracle.
            </summary>
            <param name="s">The column alias.</param>
            <returns>
            Quoted column alias
            </returns>
        </member>
        <member name="M:Serenity.Data.OracleDialect.QuoteIdentifier(System.String)">
            <summary>
            Quotes the identifier.
            </summary>
            <param name="s">The identifier.</param>
            <returns>
            Quoted identifier
            </returns>
        </member>
        <member name="M:Serenity.Data.OracleDialect.QuoteUnicodeString(System.String)">
            <summary>
            Quotes the unicode string.
            </summary>
            <param name="s">The string.</param>
            <returns></returns>
        </member>
        <member name="P:Serenity.Data.OracleDialect.ScopeIdentityExpression">
            <summary>
            Gets the SCOPE IDENTITY expression.
            </summary>
            <value>
            The SCOPE INDENTITY expression.
            </value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Serenity.Data.OracleDialect.ServerType">
            <summary>
            Gets the type of the server.
            </summary>
            <value>
            The type of the server.
            </value>
        </member>
        <member name="P:Serenity.Data.OracleDialect.SkipKeyword">
            <summary>
            Gets the skip keyword.
            </summary>
            <value>
            The skip keyword.
            </value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Serenity.Data.OracleDialect.TakeKeyword">
            <summary>
            Gets the take keyword.
            </summary>
            <value>
            The take keyword.
            </value>
        </member>
        <member name="P:Serenity.Data.OracleDialect.TimeFormat">
            <summary>
            Gets the time format.
            </summary>
            <value>
            The time format.
            </value>
        </member>
        <member name="M:Serenity.Data.OracleDialect.UnionKeyword(Serenity.Data.SqlUnionType)">
            <summary>
            Gets the union keyword for specified union type.
            </summary>
            <param name="unionType">Type of the union.</param>
            <returns>
            Union keyword
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Serenity.Data.OracleDialect.UseDateTime2">
            <summary>
            Gets a value indicating whether use datetime2 type.
            </summary>
            <value>
            <c>true</c> if use datetime2; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.OracleDialect.UseReturningIdentity">
            <summary>
            Gets a value indicating whether to use returning identity.
            </summary>
            <value>
            <c>true</c> if should use returning identity; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.OracleDialect.UseReturningIntoVar">
            <summary>
            Gets a value indicating whether use returning into variable.
            </summary>
            <value>
            <c>true</c> if use returning into variable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.OracleDialect.UseScopeIdentity">
            <summary>
            Gets a value indicating whether to use scope identity.
            </summary>
            <value>
            <c>true</c> if to use scope identity; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.OracleDialect.UseTakeAtEnd">
            <summary>
            Gets a value indicating whether to use TAKE at end.
            </summary>
            <value>
            <c>true</c> if to use TAKE at end; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.OracleDialect.UseRowNum">
            <summary>
            Gets a value indicating whether ROWNUM.
            </summary>
            <value>
            <c>true</c> if can use ROWNUM; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.OracleDialect.ParameterPrefix">
            <summary>
            Gets the parameter prefix character.
            </summary>
            <value>
            The parameter prefix character.
            </value>
        </member>
        <member name="T:Serenity.Data.PostgresDialect">
            <summary>
            Postgres dialect
            </summary>
            <seealso cref="T:Serenity.Data.ISqlDialect" />
        </member>
        <member name="F:Serenity.Data.PostgresDialect.Instance">
            <summary>
            The shared instance of PostgresDialect.
            </summary>
        </member>
        <member name="P:Serenity.Data.PostgresDialect.CanUseOffsetFetch">
            <summary>
            Gets a value indicating whether the server supports OFFSET FETCH.
            </summary>
            <value>
            <c>true</c> if the server supports OFFSET FETCH; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.PostgresDialect.CanUseRowNumber">
            <summary>
            Gets a value indicating whether the server supports ROWNUMBER.
            </summary>
            <value>
            <c>true</c> if the server supports ROWNUMBER; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.PostgresDialect.CanUseSkipKeyword">
            <summary>
            Gets a value indicating whether the server supports SKIP keyword (or a variation of it).
            </summary>
            <value>
            <c>true</c> if the server supports a variation of SKIP keyword; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.PostgresDialect.CloseQuote">
            <summary>
            Gets the close quote character for quoting identifiers.
            </summary>
            <value>
            The close quote.
            </value>
        </member>
        <member name="P:Serenity.Data.PostgresDialect.ConcatOperator">
            <summary>
            Gets the CONCAT operator keyword.
            </summary>
            <value>
            The CONCAT operator keyword.
            </value>
        </member>
        <member name="P:Serenity.Data.PostgresDialect.DateFormat">
            <summary>
            Gets the date format.
            </summary>
            <value>
            The date format.
            </value>
        </member>
        <member name="P:Serenity.Data.PostgresDialect.DateTimeFormat">
            <summary>
            Gets the date time format.
            </summary>
            <value>
            The date time format.
            </value>
        </member>
        <member name="P:Serenity.Data.PostgresDialect.IsLikeCaseSensitive">
            <summary>
            Gets a value indicating whether the LIKE operator is case sensitive.
            </summary>
            <value>
            <c>true</c> if the LIKE operator is sensitive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.PostgresDialect.MultipleResultsets">
            <summary>
            Gets a value indicating whether the server supports multiple resultsets.
            </summary>
            <value>
            <c>true</c> if the server supports multiple resultsets; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.PostgresDialect.NeedsBoolWorkaround">
            <summary>
            Gets a value indicating whether the server needs a workaround to handle Boolean values false/true.
            </summary>
            <value>
            <c>true</c> if the server needs a workaround to handle Boolean values false/true; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.PostgresDialect.NeedsExecuteBlockStatement">
            <summary>
            Gets a value indicating whether the server needs EXECUTE BLOCK statement.
            </summary>
            <value>
            <c>true</c> if the server needs EXECUTE BLOCK statement; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.PostgresDialect.OffsetFormat">
            <summary>
            Gets the format for OFFSET only statements.
            </summary>
            <value>
            The offset format.
            </value>
        </member>
        <member name="P:Serenity.Data.PostgresDialect.OffsetFetchFormat">
            <summary>
            Gets the format for OFFSET FETCH statements.
            </summary>
            <value>
            The offset fetch format.
            </value>
        </member>
        <member name="P:Serenity.Data.PostgresDialect.OpenQuote">
            <summary>
            Gets the open quote character for quoting identifiers.
            </summary>
            <value>
            The open quote.
            </value>
        </member>
        <member name="M:Serenity.Data.PostgresDialect.QuoteColumnAlias(System.String)">
            <summary>
            Quotes the column alias. This usually calls QuoteIdentifier except for Oracle.
            </summary>
            <param name="s">The column alias.</param>
            <returns>
            Quoted column alias
            </returns>
        </member>
        <member name="M:Serenity.Data.PostgresDialect.QuoteIdentifier(System.String)">
            <summary>
            Quotes the identifier.
            </summary>
            <param name="s">The identifier.</param>
            <returns>
            Quoted identifier
            </returns>
        </member>
        <member name="M:Serenity.Data.PostgresDialect.QuoteUnicodeString(System.String)">
            <summary>
            Quotes the unicode string.
            </summary>
            <param name="s">The string.</param>
            <returns></returns>
        </member>
        <member name="P:Serenity.Data.PostgresDialect.ScopeIdentityExpression">
            <summary>
            Gets the SCOPE IDENTITY expression.
            </summary>
            <value>
            The SCOPE INDENTITY expression.
            </value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Serenity.Data.PostgresDialect.ServerType">
            <summary>
            Gets the type of the server.
            </summary>
            <value>
            The type of the server.
            </value>
        </member>
        <member name="P:Serenity.Data.PostgresDialect.SkipKeyword">
            <summary>
            Gets the skip keyword.
            </summary>
            <value>
            The skip keyword.
            </value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Serenity.Data.PostgresDialect.TakeKeyword">
            <summary>
            Gets the take keyword.
            </summary>
            <value>
            The take keyword.
            </value>
        </member>
        <member name="P:Serenity.Data.PostgresDialect.TimeFormat">
            <summary>
            Gets the time format.
            </summary>
            <value>
            The time format.
            </value>
        </member>
        <member name="M:Serenity.Data.PostgresDialect.UnionKeyword(Serenity.Data.SqlUnionType)">
            <summary>
            Gets the union keyword for specified union type.
            </summary>
            <param name="unionType">Type of the union.</param>
            <returns>
            Union keyword
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Serenity.Data.PostgresDialect.UseDateTime2">
            <summary>
            Gets a value indicating whether use datetime2 type.
            </summary>
            <value>
            <c>true</c> if use datetime2; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.PostgresDialect.UseReturningIdentity">
            <summary>
            Gets a value indicating whether to use returning identity.
            </summary>
            <value>
            <c>true</c> if should use returning identity; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.PostgresDialect.UseReturningIntoVar">
            <summary>
            Gets a value indicating whether use returning into variable.
            </summary>
            <value>
            <c>true</c> if use returning into variable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.PostgresDialect.UseScopeIdentity">
            <summary>
            Gets a value indicating whether to use scope identity.
            </summary>
            <value>
            <c>true</c> if to use scope identity; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.PostgresDialect.UseTakeAtEnd">
            <summary>
            Gets a value indicating whether to use TAKE at end.
            </summary>
            <value>
            <c>true</c> if to use TAKE at end; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.PostgresDialect.UseRowNum">
            <summary>
            Gets a value indicating whether ROWNUM.
            </summary>
            <value>
            <c>true</c> if can use ROWNUM; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.PostgresDialect.ParameterPrefix">
            <summary>
            Gets the parameter prefix character.
            </summary>
            <value>
            The parameter prefix character.
            </value>
        </member>
        <member name="T:Serenity.Data.SqliteDialect">
            <summary>
            Sqlite dialect.
            </summary>
            <seealso cref="T:Serenity.Data.ISqlDialect" />
        </member>
        <member name="F:Serenity.Data.SqliteDialect.Instance">
            <summary>
            The shared instance of SqliteDialect.
            </summary>
        </member>
        <member name="P:Serenity.Data.SqliteDialect.CanUseOffsetFetch">
            <summary>
            Gets a value indicating whether the server supports OFFSET FETCH.
            </summary>
            <value>
            <c>true</c> if the server supports OFFSET FETCH; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.SqliteDialect.CanUseRowNumber">
            <summary>
            Gets a value indicating whether the server supports ROWNUMBER.
            </summary>
            <value>
            <c>true</c> if the server supports ROWNUMBER; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.SqliteDialect.CanUseSkipKeyword">
            <summary>
            Gets a value indicating whether the server supports SKIP keyword (or a variation of it).
            </summary>
            <value>
            <c>true</c> if the server supports a variation of SKIP keyword; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.SqliteDialect.CloseQuote">
            <summary>
            Gets the close quote character for quoting identifiers.
            </summary>
            <value>
            The close quote.
            </value>
        </member>
        <member name="P:Serenity.Data.SqliteDialect.ConcatOperator">
            <summary>
            Gets the CONCAT operator keyword.
            </summary>
            <value>
            The CONCAT operator keyword.
            </value>
        </member>
        <member name="P:Serenity.Data.SqliteDialect.DateFormat">
            <summary>
            Gets the date format.
            </summary>
            <value>
            The date format.
            </value>
        </member>
        <member name="P:Serenity.Data.SqliteDialect.DateTimeFormat">
            <summary>
            Gets the date time format.
            </summary>
            <value>
            The date time format.
            </value>
        </member>
        <member name="P:Serenity.Data.SqliteDialect.IsLikeCaseSensitive">
            <summary>
            Gets a value indicating whether the LIKE operator is case sensitive.
            </summary>
            <value>
            <c>true</c> if the LIKE operator is sensitive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.SqliteDialect.MultipleResultsets">
            <summary>
            Gets a value indicating whether the server supports multiple resultsets.
            </summary>
            <value>
            <c>true</c> if the server supports multiple resultsets; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.SqliteDialect.NeedsBoolWorkaround">
            <summary>
            Gets a value indicating whether the server needs a workaround to handle Boolean values false/true.
            </summary>
            <value>
            <c>true</c> if the server needs a workaround to handle Boolean values false/true; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.SqliteDialect.NeedsExecuteBlockStatement">
            <summary>
            Gets a value indicating whether the server needs EXECUTE BLOCK statement.
            </summary>
            <value>
            <c>true</c> if the server needs EXECUTE BLOCK statement; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.SqliteDialect.OffsetFormat">
            <summary>
            Gets the format for OFFSET only statements.
            </summary>
            <value>
            The offset format.
            </value>
        </member>
        <member name="P:Serenity.Data.SqliteDialect.OffsetFetchFormat">
            <summary>
            Gets the format for OFFSET FETCH statements.
            </summary>
            <value>
            The offset fetch format.
            </value>
        </member>
        <member name="P:Serenity.Data.SqliteDialect.OpenQuote">
            <summary>
            Gets the open quote character for quoting identifiers.
            </summary>
            <value>
            The open quote.
            </value>
        </member>
        <member name="M:Serenity.Data.SqliteDialect.QuoteColumnAlias(System.String)">
            <summary>
            Quotes the column alias. This usually calls QuoteIdentifier except for Oracle.
            </summary>
            <param name="s">The column alias.</param>
            <returns>
            Quoted column alias
            </returns>
        </member>
        <member name="M:Serenity.Data.SqliteDialect.QuoteIdentifier(System.String)">
            <summary>
            Quotes the identifier.
            </summary>
            <param name="s">The identifier.</param>
            <returns>
            Quoted identifier
            </returns>
        </member>
        <member name="M:Serenity.Data.SqliteDialect.QuoteUnicodeString(System.String)">
            <summary>
            Quotes the unicode string.
            </summary>
            <param name="s">The string.</param>
            <returns></returns>
        </member>
        <member name="P:Serenity.Data.SqliteDialect.ScopeIdentityExpression">
            <summary>
            Gets the SCOPE IDENTITY expression.
            </summary>
            <value>
            The SCOPE INDENTITY expression.
            </value>
        </member>
        <member name="P:Serenity.Data.SqliteDialect.ServerType">
            <summary>
            Gets the type of the server.
            </summary>
            <value>
            The type of the server.
            </value>
        </member>
        <member name="P:Serenity.Data.SqliteDialect.SkipKeyword">
            <summary>
            Gets the skip keyword.
            </summary>
            <value>
            The skip keyword.
            </value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Serenity.Data.SqliteDialect.TakeKeyword">
            <summary>
            Gets the take keyword.
            </summary>
            <value>
            The take keyword.
            </value>
        </member>
        <member name="P:Serenity.Data.SqliteDialect.TimeFormat">
            <summary>
            Gets the time format.
            </summary>
            <value>
            The time format.
            </value>
        </member>
        <member name="M:Serenity.Data.SqliteDialect.UnionKeyword(Serenity.Data.SqlUnionType)">
            <summary>
            Gets the union keyword for specified union type.
            </summary>
            <param name="unionType">Type of the union.</param>
            <returns>
            Union keyword
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Serenity.Data.SqliteDialect.UseDateTime2">
            <summary>
            Gets a value indicating whether use datetime2 type.
            </summary>
            <value>
            <c>true</c> if use datetime2; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.SqliteDialect.UseReturningIdentity">
            <summary>
            Gets a value indicating whether to use returning identity.
            </summary>
            <value>
            <c>true</c> if should use returning identity; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.SqliteDialect.UseReturningIntoVar">
            <summary>
            Gets a value indicating whether use returning into variable.
            </summary>
            <value>
            <c>true</c> if use returning into variable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.SqliteDialect.UseScopeIdentity">
            <summary>
            Gets a value indicating whether to use scope identity.
            </summary>
            <value>
            <c>true</c> if to use scope identity; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.SqliteDialect.UseTakeAtEnd">
            <summary>
            Gets a value indicating whether to use TAKE at end.
            </summary>
            <value>
            <c>true</c> if to use TAKE at end; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.SqliteDialect.UseRowNum">
            <summary>
            Gets a value indicating whether ROWNUM.
            </summary>
            <value>
            <c>true</c> if can use ROWNUM; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.SqliteDialect.ParameterPrefix">
            <summary>
            Gets the parameter prefix character.
            </summary>
            <value>
            The parameter prefix character.
            </value>
        </member>
        <member name="T:Serenity.Data.SqlServer2000Dialect">
            <summary>
            SqlServer 2000 dialect.
            </summary>
            <seealso cref="T:Serenity.Data.ISqlDialect" />
        </member>
        <member name="F:Serenity.Data.SqlServer2000Dialect.Instance">
            <summary>
            The shared instance of SqlServer2000 dialect.
            </summary>
        </member>
        <member name="P:Serenity.Data.SqlServer2000Dialect.CanUseOffsetFetch">
            <summary>
            Gets a value indicating whether the server supports OFFSET FETCH.
            </summary>
            <value>
            <c>true</c> if the server supports OFFSET FETCH; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.SqlServer2000Dialect.CanUseRowNumber">
            <summary>
            Gets a value indicating whether the server supports ROWNUMBER.
            </summary>
            <value>
            <c>true</c> if the server supports ROWNUMBER; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.SqlServer2000Dialect.CanUseSkipKeyword">
            <summary>
            Gets a value indicating whether the server supports SKIP keyword (or a variation of it).
            </summary>
            <value>
            <c>true</c> if the server supports a variation of SKIP keyword; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.SqlServer2000Dialect.CloseQuote">
            <summary>
            Gets the close quote character for quoting identifiers.
            </summary>
            <value>
            The close quote.
            </value>
        </member>
        <member name="P:Serenity.Data.SqlServer2000Dialect.ConcatOperator">
            <summary>
            Gets the CONCAT operator keyword.
            </summary>
            <value>
            The CONCAT operator keyword.
            </value>
        </member>
        <member name="P:Serenity.Data.SqlServer2000Dialect.DateFormat">
            <summary>
            Gets the date format.
            </summary>
            <value>
            The date format.
            </value>
        </member>
        <member name="P:Serenity.Data.SqlServer2000Dialect.DateTimeFormat">
            <summary>
            Gets the date time format.
            </summary>
            <value>
            The date time format.
            </value>
        </member>
        <member name="P:Serenity.Data.SqlServer2000Dialect.IsLikeCaseSensitive">
            <summary>
            Gets a value indicating whether the LIKE operator is case sensitive.
            </summary>
            <value>
            <c>true</c> if the LIKE operator is sensitive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.SqlServer2000Dialect.MultipleResultsets">
            <summary>
            Gets a value indicating whether the server supports multiple resultsets.
            </summary>
            <value>
            <c>true</c> if the server supports multiple resultsets; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.SqlServer2000Dialect.NeedsBoolWorkaround">
            <summary>
            Gets a value indicating whether the server needs a workaround to handle Boolean values false/true.
            </summary>
            <value>
            <c>true</c> if the server needs a workaround to handle Boolean values false/true; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.SqlServer2000Dialect.NeedsExecuteBlockStatement">
            <summary>
            Gets a value indicating whether the server needs EXECUTE BLOCK statement.
            </summary>
            <value>
            <c>true</c> if the server needs EXECUTE BLOCK statement; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.SqlServer2000Dialect.OffsetFormat">
            <summary>
            Gets the format for OFFSET only statements.
            </summary>
            <value>
            The offset format.
            </value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Serenity.Data.SqlServer2000Dialect.OffsetFetchFormat">
            <summary>
            Gets the format for OFFSET FETCH statements.
            </summary>
            <value>
            The offset fetch format.
            </value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Serenity.Data.SqlServer2000Dialect.OpenQuote">
            <summary>
            Gets the open quote character for quoting identifiers.
            </summary>
            <value>
            The open quote.
            </value>
        </member>
        <member name="M:Serenity.Data.SqlServer2000Dialect.QuoteColumnAlias(System.String)">
            <summary>
            Quotes the column alias. This usually calls QuoteIdentifier except for Oracle.
            </summary>
            <param name="s">The column alias.</param>
            <returns>
            Quoted column alias
            </returns>
        </member>
        <member name="M:Serenity.Data.SqlServer2000Dialect.QuoteIdentifier(System.String)">
            <summary>
            Quotes the identifier.
            </summary>
            <param name="s">The identifier.</param>
            <returns>
            Quoted identifier
            </returns>
        </member>
        <member name="M:Serenity.Data.SqlServer2000Dialect.QuoteUnicodeString(System.String)">
            <summary>
            Quotes the unicode string.
            </summary>
            <param name="s">The string.</param>
            <returns></returns>
        </member>
        <member name="P:Serenity.Data.SqlServer2000Dialect.RequiresBoolConversion">
            <summary>
            Gets a value indicating whether [requires bool conversion].
            </summary>
            <value>
              <c>true</c> if [requires bool conversion]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.SqlServer2000Dialect.ServerType">
            <summary>
            Gets the type of the server.
            </summary>
            <value>
            The type of the server.
            </value>
        </member>
        <member name="P:Serenity.Data.SqlServer2000Dialect.ScopeIdentityExpression">
            <summary>
            Gets the SCOPE IDENTITY expression.
            </summary>
            <value>
            The SCOPE INDENTITY expression.
            </value>
        </member>
        <member name="P:Serenity.Data.SqlServer2000Dialect.SkipKeyword">
            <summary>
            Gets the skip keyword.
            </summary>
            <value>
            The skip keyword.
            </value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Serenity.Data.SqlServer2000Dialect.TakeKeyword">
            <summary>
            Gets the take keyword.
            </summary>
            <value>
            The take keyword.
            </value>
        </member>
        <member name="P:Serenity.Data.SqlServer2000Dialect.TimeFormat">
            <summary>
            Gets the time format.
            </summary>
            <value>
            The time format.
            </value>
        </member>
        <member name="M:Serenity.Data.SqlServer2000Dialect.UnionKeyword(Serenity.Data.SqlUnionType)">
            <summary>
            Gets the union keyword for specified union type.
            </summary>
            <param name="unionType">Type of the union.</param>
            <returns>
            Union keyword
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Serenity.Data.SqlServer2000Dialect.UseDateTime2">
            <summary>
            Gets a value indicating whether use datetime2 type.
            </summary>
            <value>
            <c>true</c> if use datetime2; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.SqlServer2000Dialect.UseReturningIdentity">
            <summary>
            Gets a value indicating whether to use returning identity.
            </summary>
            <value>
            <c>true</c> if should use returning identity; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.SqlServer2000Dialect.UseReturningIntoVar">
            <summary>
            Gets a value indicating whether use returning into variable.
            </summary>
            <value>
            <c>true</c> if use returning into variable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.SqlServer2000Dialect.UseScopeIdentity">
            <summary>
            Gets a value indicating whether to use scope identity.
            </summary>
            <value>
            <c>true</c> if to use scope identity; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.SqlServer2000Dialect.UseTakeAtEnd">
            <summary>
            Gets a value indicating whether to use TAKE at end.
            </summary>
            <value>
            <c>true</c> if to use TAKE at end; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.SqlServer2000Dialect.UseRowNum">
            <summary>
            Gets a value indicating whether ROWNUM.
            </summary>
            <value>
            <c>true</c> if can use ROWNUM; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.SqlServer2000Dialect.ParameterPrefix">
            <summary>
            Gets the parameter prefix character.
            </summary>
            <value>
            The parameter prefix character.
            </value>
        </member>
        <member name="T:Serenity.Data.SqlServer2005Dialect">
            <summary>
            Sql Server 2005 dialect.
            </summary>
            <seealso cref="T:Serenity.Data.SqlServer2000Dialect" />
        </member>
        <member name="F:Serenity.Data.SqlServer2005Dialect.Instance">
            <summary>
            The shared instance of SqlServer2005Dialect.
            </summary>
        </member>
        <member name="P:Serenity.Data.SqlServer2005Dialect.CanUseRowNumber">
            <summary>
            Gets a value indicating whether the server supports ROWNUMBER.
            </summary>
            <value>
              <c>true</c> if the server supports ROWNUMBER; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Serenity.Data.SqlServer2008Dialect">
            <summary>
            Sql Server 2008 dialect.
            </summary>
            <seealso cref="T:Serenity.Data.SqlServer2005Dialect" />
        </member>
        <member name="F:Serenity.Data.SqlServer2008Dialect.Instance">
            <summary>
            The shared instance of SqlServer2008 dialect.
            </summary>
        </member>
        <member name="P:Serenity.Data.SqlServer2008Dialect.UseDateTime2">
            <summary>
            Gets a value indicating whether use datetime2 type.
            </summary>
            <value>
              <c>true</c> if use datetime2; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Serenity.Data.SqlServer2012Dialect">
            <summary>
            Sql Server 2012 dialect.
            </summary>
            <seealso cref="T:Serenity.Data.SqlServer2008Dialect" />
        </member>
        <member name="F:Serenity.Data.SqlServer2012Dialect.Instance">
            <summary>
            The shared instance of SqlServer2012Dialect.
            </summary>
        </member>
        <member name="P:Serenity.Data.SqlServer2012Dialect.CanUseOffsetFetch">
            <summary>
            Gets a value indicating whether the server supports OFFSET FETCH.
            </summary>
            <value>
              <c>true</c> if the server supports OFFSET FETCH; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.SqlServer2012Dialect.OffsetFormat">
            <summary>
            Gets the format for OFFSET only statements.
            </summary>
            <value>
            The offset format.
            </value>
        </member>
        <member name="P:Serenity.Data.SqlServer2012Dialect.OffsetFetchFormat">
            <summary>
            Gets the format for OFFSET FETCH statements.
            </summary>
            <value>
            The offset fetch format.
            </value>
        </member>
        <member name="T:Serenity.Data.SqlDelete">
            <summary>
              Class to generate queries of form <c>DELETE FROM tablename WHERE [conditions]</c>.</summary>
        </member>
        <member name="M:Serenity.Data.SqlDelete.#ctor(System.String)">
            <summary>
              Creates a new SqlDelete query.</summary>
            <param name="tableName">
              Table to delete records from (required).</param>
        </member>
        <member name="M:Serenity.Data.SqlDelete.Where(System.String)">
            <summary>
              Adds a new condition to the WHERE part of the query with an "AND" between.</summary>
            <param name="condition">
              Condition.</param>
            <returns>
              SqlDelete object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlDelete.Serenity#Data#IFilterableQuery#Where(System.String)">
            <summary>
              Adds a new condition to the WHERE part of the query with an "AND" between.</summary>
            <param name="condition">
              Condition.</param>
            <returns>
              SqlDelete object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlDelete.Where(System.String[])">
            <summary>
              Adds new conditions to the WHERE part of the query with an "AND" between.</summary>
            <param name="conditions">
              Conditions.</param>
            <returns>
              SqlDelete object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlDelete.ToString">
            <summary>
              Gets string representation of the query.</summary>
            <returns>
              String representation of the query.</returns>
        </member>
        <member name="M:Serenity.Data.SqlDelete.Format(System.String,System.String)">
            <summary>
              Formats a DELETE query.</summary>
            <param name="tableName">
              Tablename.</param>
            <param name="where">
              Where part of the query.</param>
            <returns>
              Formatted query.</returns>
        </member>
        <member name="T:Serenity.Data.SqlInsert">
            <summary>
              Class to generate queries of the form <c>INSERT INTO tablename (field1, field2..fieldN) 
              VALUES (value1, value2..valueN)</c></summary>
        </member>
        <member name="M:Serenity.Data.SqlInsert.IdentityColumn">
            <summary>
            Gets the identity column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlInsert.IdentityColumn(System.String)">
            <summary>
            Sets the identity column.
            </summary>
            <param name="value">The identity column.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlInsert.#ctor(System.String)">
            <summary>
              Creates a new SqlInsert query.</summary>
            <param name="tableName">
              Table to insert record (required).</param>
        </member>
        <member name="M:Serenity.Data.SqlInsert.SetTo(System.String,System.String)">
            <summary>
              Sets field value.</summary>
            <param name="field">
              Field name (required).</param>
            <param name="value">
              Field value (expression, required).</param>
            <returns>
              SqlInsert object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlInsert.Serenity#Data#ISetFieldByStatement#SetTo(System.String,System.String)">
            <summary>
              Sets field value.</summary>
            <param name="field">
              Field name (required).</param>
            <param name="value">
              Field value (expression, required).</param>
            <returns>
              SqlInsert object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlInsert.SetTo(Serenity.Data.IField,System.String)">
            <summary>
              Sets field value.</summary>
            <param name="field">
              Field (required).</param>
            <param name="value">
              Field value (expression, required).</param>
            <returns>
              SqlInsert object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlInsert.SetNull(System.String)">
            <summary>
              Assigns NULL as the field value.</summary>
            <param name="field">
              Field (required).</param>
            <returns>
              SqlInsert object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlInsert.Clone">
            <summary>Clones the query.</summary>
            <returns>Clone.</returns>
        </member>
        <member name="M:Serenity.Data.SqlInsert.Dialect(Serenity.Data.ISqlDialect)">
            <summary>
            Sets the dialect (SQL server type / version) for query.
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlInsert.ToString">
            <summary>
              Gets string representation of the query.</summary>
            <returns>
              String representation.</returns>
        </member>
        <member name="M:Serenity.Data.SqlInsert.Format(System.String,System.Collections.Generic.List{System.String})">
            <summary>
              Formats an INSERT query.</summary>
            <param name="tableName">
              Tablename (required).</param>
            <param name="nameValuePairs">
              Field names and values. Must be passed in the order of <c>[field1, value1, field2, 
              value2, ...., fieldN, valueN]</c>. It must have even number of elements.</param>
            <returns>
              Formatted query.</returns>
        </member>
        <member name="T:Serenity.Data.SqlQuery">
            <summary>
            SQL query string builder
            </summary>
            <seealso cref="T:Serenity.Data.QueryWithParams" />
            <seealso cref="T:Serenity.Data.IFilterableQuery" />
            <seealso cref="T:Serenity.Data.IGetExpressionByName" />
            <seealso cref="T:Serenity.Data.ISqlQuery" />
            <seealso cref="T:Serenity.Data.ISqlQueryExtensible" />
        </member>
        <member name="M:Serenity.Data.SqlQuery.#ctor">
            <summary>
            Creates a new SqlQuery instance.
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Distinct(System.Boolean)">
            <summary>
            Sets DISTINCT flag.
            </summary>
            <param name="distinct">Distinct flag.</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.ForXml(System.String)">
            <summary>
            Adds a FOR XML statement to the query.
            </summary>
            <param name="forXml">FOR XML type, usually "RAW".</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.From(System.String)">
            <summary>
            Adds a table to the FROM statement. When it is called more than once, puts a comma
            between table names (cross join)
            </summary>
            <param name="table">Table name</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.From(System.String,Serenity.Data.IAlias)">
            <summary>
            Adds a table to the FROM statement with an alias. 
            When it is called more than once, puts a comma between table names (cross join)
            </summary>
            <param name="table">Table</param>
            <param name="alias">Alias for the table</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.From(Serenity.Data.IAlias)">
            <summary>
            Adds a table to the FROM statement, with given short name.
            </summary>
            <param name="alias">Alias that contains table name and short name.</param>
            <returns>The query itself.</returns>
            <remarks>This overload requires that alias has a table name.</remarks>
        </member>
        <member name="M:Serenity.Data.SqlQuery.From(Serenity.Data.ISqlQuery,Serenity.Data.IAlias)">
            <summary>
            Adds a subquery to the FROM statement, with given short name.
            </summary>
            <param name="subQuery">A subquery</param>
            <param name="alias">Alias that contains the short name.</param>
            <returns>The query itself.</returns>
            <remarks>This overload requires that alias has a table name.</remarks>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Serenity#Data#IGetExpressionByName#GetExpression(System.String)">
            <summary>
            Gets the source expression for a column name in the query.
            </summary>
            <param name="columnName">Column name.</param>
            <returns>Expression or null if not found.</returns>
            <remarks>This function uses a linear search in column list, so use with caution.</remarks>
        </member>
        <member name="M:Serenity.Data.SqlQuery.GroupBy(System.String)">
            <summary>
            Adds a field name or an SQL expression to the GROUP BY clause.
            </summary>
            <param name="expression">Array of fields or expressions.</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.GroupBy(Serenity.Data.IAlias,System.String)">
            <summary>
            Adds a field of a given table alias to the GROUP BY clause.
            </summary>
            <param name="alias">A table alias that will be prepended to the field name with "." between</param>
            <param name="fieldName">A field name of the aliased table.</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Having(System.String)">
            <summary>
            Adds an SQL expression to the GROUP BY clause.
            </summary>
            <param name="expression">Array of fields or expressions.</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.OrderBy(System.String,System.Boolean)">
            <summary>
            Adds a field name or an SQL expression to the ORDER BY clause.
            </summary>
            <param name="expression">A field or an SQL expression.</param>
            <param name="desc">True to add " DESC" keyword to the expression.</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.OrderBy(Serenity.Data.IAlias,System.String,System.Boolean)">
            <summary>
            Adds a field of a given table alias to the ORDER BY clause.
            </summary>
            <param name="alias">A table alias that will be prepended to the field name with "." between</param>
            <param name="fieldName">A field name of the aliased table.</param>
            <param name="desc">True to add " DESC" keyword to the expression.</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.OrderByFirst(System.String,System.Boolean)">
            <summary>
            Inserts a field name or an SQL expression to the start of ORDER BY clause.
            </summary>
            <param name="expression">A field or an SQL expression.</param>
            <param name="desc">True to add a " DESC" suffix.</param>
            <returns>The query itself.</returns>
            <remarks>This method is designed to help apply user defined orders 
            (for example by clicking headers on a grid) to a query with
            existing order.
            SQL server throws an error if a field is used more than once in ORDER BY
            expression, so this function first removes normal and DESC versions of 
            the expression from the ORDER BY statement.
            </remarks>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Select(System.String)">
            <summary>
            Adds a field name or an SQL expression to the SELECT statement.
            </summary>
            <param name="expression">A field or an SQL expression.</param>
            <returns>The query itself.</returns>
            <remarks>No column name is used for the field or expression.</remarks>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Select(Serenity.Data.IAlias,System.String)">
            <summary>
            Adds a field of a given table alias to the SELECT statement.
            </summary>
            <param name="alias">A table alias that will be prepended to the field name with "." between</param>
            <param name="fieldName">A field name of the aliased table.</param>
            <returns>The query itself.</returns>
            <remarks>No column name is used for the field or expression.</remarks>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Select(System.String,System.String)">
            <summary>
            Adds a field name or expression to the SELECT statement with a column name
            </summary>
            <param name="expression">A field name or SQL expression.</param>
            <param name="columnName">A column name.</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Select(Serenity.Data.IAlias,System.String,System.String)">
            <summary>
            Adds a field of a given table alias to the SELECT statement with a column name.
            </summary>
            <param name="alias">A table alias that will be prepended to the field name with "." between</param>
            <param name="fieldName">A field name of the aliased table.</param>
            <param name="columnName">A column name</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Select(Serenity.Data.ISqlQuery,System.String)">
            <summary>
            Adds a subquery to the SELECT statement.
            </summary>
            <param name="expression">A subquery.</param>
            <param name="columnName">A column name</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Select(Serenity.Data.ISqlQuery)">
            <summary>
            Adds a subquery to the SELECT statement.
            </summary>
            <param name="expression">A subquery.</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.SelectMany(System.String[])">
            <summary>
            Adds field names or SQL expressions to the SELECT statement.
            </summary>
            <param name="expressions">Fields or SQL expressions.</param>
            <returns>The query itself.</returns>
            <remarks>No aliases are used for the fields or expressions.</remarks>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Skip">
            <summary>
            Gets current SKIP value.
            </summary>
            <returns>SKIP value.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Skip(System.Int32)">
            <summary>
            Sets SKIP value. Used for paging.
            </summary>
            <param name="skipRows">Number of rows to skip (server dependant implementation)</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.SubQuery">
            <summary>
            Creates a new query that shares parameter dictionary with this query.
            </summary>
            <returns>
            A new query that shares parameters.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Take">
            <summary>
            Gets TAKE/TOP value.
            </summary>
            <returns>TAKE/TOP value.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Take(System.Int32)">
            <summary>
            Sets TAKE/TOP value. Used for paging.
            </summary>
            <param name="rowCount">Number of rows to take.</param>
            <returns>The query itself.</returns>
        </member>
        <member name="P:Serenity.Data.SqlQuery.Text">
            <summary>
            Gets current query text.
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Union(Serenity.Data.SqlUnionType)">
            <summary>
            Adds a union to query with the specified union type.
            </summary>
            <param name="unionType">Type of the union.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Where(System.String)">
            <summary>
            Adds an expression to WHERE clause. If query already has a WHERE
            clause, inserts AND between existing one and new one.
            </summary>
            <param name="expression">An expression</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Where(System.String[])">
            <summary>
            Adds expressions to WHERE clause, inserting AND between them.
            </summary>
            <param name="expressions">An array of expressions</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Serenity#Data#IFilterableQuery#Where(System.String)">
            <summary>
            Implements IDBFilterable.Where, by calling original Where method.
            </summary>
            <param name="expression">An expression</param>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Dialect(Serenity.Data.ISqlDialect)">
            <summary>
            Sets the dialect (SQL server type / version) for query.
            </summary>
        </member>
        <member name="P:Serenity.Data.SqlQuery.CountRecords">
            <summary>
            Gets/sets the flag to get the total record count when paging is used by SKIP/TAKE. 
            A secondary query without SKIP/TAKE is generated to get total record count, 
            when this property is true.
            </summary>
        </member>
        <member name="T:Serenity.Data.SqlQuery.Column">
            <summary>
            Holds information about a column in SELECT clause.
            </summary>
        </member>
        <member name="F:Serenity.Data.SqlQuery.Column.Expression">
            <summary>Field or expression</summary>
        </member>
        <member name="F:Serenity.Data.SqlQuery.Column.ColumnName">
            <summary>Column name</summary>
        </member>
        <member name="F:Serenity.Data.SqlQuery.Column.IntoRowIndex">
            <summary>Used by entity system when more than one entity is used as a target</summary>
        </member>
        <member name="F:Serenity.Data.SqlQuery.Column.IntoField">
            <summary>Used by entity system, to determine which field this column value will be read into</summary>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Column.#ctor(System.String,System.String,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.SqlQuery.Column"/> class.
            </summary>
            <param name="expression">The expression.</param>
            <param name="columnName">Name of the column.</param>
            <param name="intoRow">The select into row index.</param>
            <param name="intoField">The select into field.</param>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Column.#ctor(Serenity.Data.SqlQuery,System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.SqlQuery.Column"/> class.
            </summary>
            <param name="query">The query.</param>
            <param name="expression">The expression.</param>
            <param name="columnName">Name of the column.</param>
            <param name="intoField">The select into field.</param>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Clone">
            <summary>
            Creates a clone of the query.
            </summary>
            <returns>A cloned query.</returns>
            <remarks>
            Clones states like TrackAssignments, AssignedFields etc,
            creates a copy of Params dictionary
            </remarks>
        </member>
        <member name="M:Serenity.Data.SqlQuery.FullTextSearchJoin(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
              MSSQL'de full text araması için gerekli join'i oluşturur.</summary>
            <param name="searchTable">
              Arama yapılacak alanları içeren tablo adı (zorunlu).</param>
            <param name="searchFields">
              Arama yapılacak alanlar (zorunlu).</param>
            <param name="searchQuery">
              Aranan kelime, ya da kelime grubu (zorunlu). Kelimeler virgülle ayrılmalı.</param>
            <param name="searchTableAlias">
              Arama yapılacak tabloya, sorgunun FROM kısmında atanmış olan alias (zorunlu, ör. T0).</param>
            <param name="searchTableKey">
              Arama yapılacak tablonun anahtar (ID) sahası (zorunlu).</param>
            <param name="containsAlias">
              Bağlama yapılan contains table'a atanacak alias (zorunlu, ör. CT).</param>
            <returns>
              SqlSelect nesnesinin kendisi.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Join(Serenity.Data.Join)">
            <summary>
            Joins the specified join.
            </summary>
            <param name="join">The join.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">join</exception>
            <exception cref="T:System.InvalidOperationException">Another join with different expression is already in the query.</exception>
        </member>
        <member name="M:Serenity.Data.SqlQuery.LeftJoin(System.String,Serenity.Data.IAlias,Serenity.ICriteria)">
            <summary>
            Adds a LEFT JOIN to the query.
            </summary>
            <param name="toTable">To table.</param>
            <param name="alias">The alias.</param>
            <param name="onCriteria">The on criteria.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            alias is null or alias.table is null or empty
            </exception>
        </member>
        <member name="M:Serenity.Data.SqlQuery.LeftJoin(Serenity.Data.IAlias,Serenity.ICriteria)">
            <summary>
            Adds a LEFT JOIN to the query
            </summary>
            <param name="alias">The alias.</param>
            <param name="onCriteria">The on criteria.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            alias is null or alias.table is null or empty.
            </exception>
        </member>
        <member name="M:Serenity.Data.SqlQuery.RightJoin(System.String,Serenity.Data.IAlias,Serenity.ICriteria)">
            <summary>
            Adds a right join to the query.
            </summary>
            <param name="toTable">Right join to table.</param>
            <param name="alias">The alias.</param>
            <param name="onCriteria">The on criteria.</param>
            <returns>SqlQuery itself.</returns>
            <exception cref="T:System.ArgumentNullException">
            alias is null
            or
            alias.table is null
            </exception>
        </member>
        <member name="M:Serenity.Data.SqlQuery.RightJoin(Serenity.Data.IAlias,Serenity.ICriteria)">
            <summary>
            Adds a right join to the query.
            </summary>
            <param name="alias">The alias with tablename/alias name.</param>
            <param name="onCriteria">The ON criteria.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            alias is null
            or
            alias.table is null
            </exception>
        </member>
        <member name="M:Serenity.Data.SqlQuery.InnerJoin(Serenity.Data.IAlias,Serenity.ICriteria)">
            <summary>
            Adds an inner join to the query.
            </summary>
            <param name="alias">The alias.</param>
            <param name="onCriteria">The ON criteria.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            alias is null 
            or
            alias.table is null
            </exception>
        </member>
        <member name="M:Serenity.Data.SqlQuery.EnsureJoinsInExpression(System.String)">
            <summary>
            Ensures the joins in expression. For this to work, into row must provide
            a list of joins and their expressions.
            </summary>
            <param name="expression">The expression.</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.EnsureJoin(Serenity.Data.Join)">
            <summary>
            Ensures the join.
            </summary>
            <param name="join">The join.</param>
            <returns>The query itself.</returns>
            <exception cref="T:System.ArgumentNullException">join is null</exception>
        </member>
        <member name="M:Serenity.Data.SqlQuery.ToString">
            <summary>
              Formats SQL Query as string. If paging is used and skip requested, multiple queries 
              might be created one after each other.</summary>
            <returns>
              Formatted SELECT statement</returns>
        </member>
        <member name="T:Serenity.Data.SqlUnionType">
            <summary>
            Type of SQL UNIONs.
            </summary>
        </member>
        <member name="F:Serenity.Data.SqlUnionType.Union">
            <summary>
            UNION
            </summary>
        </member>
        <member name="F:Serenity.Data.SqlUnionType.UnionAll">
            <summary>
            UNION ALL
            </summary>
        </member>
        <member name="F:Serenity.Data.SqlUnionType.Intersect">
            <summary>
            INTERSECT
            </summary>
        </member>
        <member name="F:Serenity.Data.SqlUnionType.IntersectAll">
            <summary>
            INTERSECT ALL
            </summary>
        </member>
        <member name="F:Serenity.Data.SqlUnionType.Except">
            <summary>
            EXCEPT
            </summary>
        </member>
        <member name="F:Serenity.Data.SqlUnionType.ExceptAll">
            <summary>
            EXCEPT ALL
            </summary>
        </member>
        <member name="T:Serenity.Data.SqlUpdate">
            <summary>
              Generates queries of the form <c>UPDATE tablename SET field1 = value1, field2 = value2 ... fieldN = valueN WHERE [filter]</c>.</summary>
            <remarks>
              <p>To determine updated field values, Set(field, value) should be called several times.</p>
              <p>Where expressions determines the record(s) to update.</p></remarks>   
        </member>
        <member name="M:Serenity.Data.SqlUpdate.#ctor(System.String)">
            <summary>
              Creates a new SqlUpdate query.</summary>
            <param name="tableName">
              Tablename (required).</param>
        </member>
        <member name="M:Serenity.Data.SqlUpdate.SetTo(System.String,System.String)">
            <summary>
              Sets field value to the expression.</summary>
            <param name="field">
              Field name (required).</param>
            <param name="value">
              Field value (expression, required).</param>
            <returns>
              SqlUpdate object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlUpdate.Serenity#Data#ISetFieldByStatement#SetTo(System.String,System.String)">
            <summary>
              Sets field value to the expression.</summary>
            <param name="field">
              Field name (required).</param>
            <param name="value">
              Field value (expression, required).</param>
            <returns>
              SqlUpdate object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlUpdate.SetTo(Serenity.Data.IField,System.String)">
            <summary>
              Sets field value to the expression.</summary>
            <param name="field">
              Field name (required).</param>
            <param name="value">
              Field expression (required).</param>
            <returns>
              SqlInsert object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlUpdate.SetNull(System.String)">
            <summary>
              Sets field value to NULL.</summary>
            <param name="field">
              Field (required).</param>
            <returns>
              SqlUpdate object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlUpdate.Inc(System.String,System.Int32)">
            <summary>
              Increases a fields value.</summary>
            <param name="field">
              Field name (required).</param>
            <param name="value">
              Increase amount (can be negative).</param>
            <returns>
              SqlUpdate object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlUpdate.Inc(Serenity.Data.IField,System.Int32)">
            <summary>
              Increases a fields value.</summary>
            <param name="field">
              Field (required).</param>
            <param name="value">
              Increase amount (can be negative).</param>
            <returns>
              SqlUpdate object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlUpdate.Dec(System.String,System.Int32)">
            <summary>
              Decreases a fields value.</summary>
            <param name="field">
              Field name (required).</param>
            <param name="value">
              Decrease amount (can be negative).</param>
            <returns>
              SqlUpdate object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlUpdate.Dec(Serenity.Data.IField,System.Int32)">
            <summary>
              Decreases a fields value.</summary>
            <param name="field">
              Field (required).</param>
            <param name="value">
              Decrease amount (can be negative).</param>
            <returns>
              SqlUpdate object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlUpdate.Where(System.String)">
            <summary>
              Adds a condition to WHERE clause of the query.</summary>
            <param name="condition">
              Condition.</param>
            <returns>
              SqlUpdate object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlUpdate.Dialect(Serenity.Data.ISqlDialect)">
            <summary>
            Sets the dialect (SQL server type / version) for query.
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlUpdate.RemoveT0Reference(System.String)">
            <summary>
            Removes the t0 reference from an SQL field reference.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlUpdate.Serenity#Data#IFilterableQuery#Where(System.String)">
            <summary>
              Adds a condition to WHERE clause of the query.</summary>
            <param name="condition">
              Condition.</param>
            <returns>
              SqlUpdate object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlUpdate.Where(System.String[])">
            <summary>
              Adds conditions to WHERE clause of the query.</summary>
            <param name="conditions">
              Condition.</param>
            <returns>
              SqlUpdate object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlUpdate.Clone">
            <summary>
              Clones this SqlUpdate query.</summary>
            <returns>
              A new clone.</returns>
        </member>
        <member name="M:Serenity.Data.SqlUpdate.ToString">
            <summary>
              Gets string representation of SqlUpdate query.</summary>
            <returns>
              String representation.</returns>
        </member>
        <member name="M:Serenity.Data.SqlUpdate.Format(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
              Formats an SQL UPDATE statement.</summary>
            <param name="tableName">
              Tablename (required).</param>
            <param name="nameValuePairs">
              Field name and values. Should have structure of <c>[field1, value1, field2, value2, ...., fieldN, valueN]</c>.
              This array is required and must have even number of elements.</param>
            <param name="where">
              WHERE clause (can be null).</param>
            <returns>
              Formatted UPDATE query.</returns>
        </member>
        <member name="T:Serenity.Data.Alias">
            <summary>
              Used to define aliases like (T0).</summary>
        </member>
        <member name="F:Serenity.Data.Alias.T0">
            <summary>
            Static t0 alias
            </summary>
        </member>
        <member name="F:Serenity.Data.Alias.T1">
            <summary>
            Static t1 alias
            </summary>
        </member>
        <member name="F:Serenity.Data.Alias.T2">
            <summary>
            Static t2 alias
            </summary>
        </member>
        <member name="F:Serenity.Data.Alias.T3">
            <summary>
            Static t3 alias
            </summary>
        </member>
        <member name="F:Serenity.Data.Alias.T4">
            <summary>
            Static t4 alias
            </summary>
        </member>
        <member name="F:Serenity.Data.Alias.T5">
            <summary>
            Static t5 alias
            </summary>
        </member>
        <member name="F:Serenity.Data.Alias.T6">
            <summary>
            Static t6 alias
            </summary>
        </member>
        <member name="F:Serenity.Data.Alias.T7">
            <summary>
            Static t7 alias
            </summary>
        </member>
        <member name="F:Serenity.Data.Alias.T8">
            <summary>
            Static t8 alias
            </summary>
        </member>
        <member name="F:Serenity.Data.Alias.T9">
            <summary>
            Static t9 alias
            </summary>
        </member>
        <member name="M:Serenity.Data.Alias.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Alias"/> class.
            </summary>
            <param name="alias">The alias.</param>
        </member>
        <member name="M:Serenity.Data.Alias.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Alias"/> class.
            </summary>
            <param name="alias">The alias.</param>
            <exception cref="T:System.ArgumentNullException">alias</exception>
        </member>
        <member name="M:Serenity.Data.Alias.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Alias"/> class.
            </summary>
            <param name="table">The table.</param>
            <param name="alias">The alias.</param>
        </member>
        <member name="M:Serenity.Data.Alias.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Alias"/> class.
            </summary>
            <param name="table">The table.</param>
            <param name="alias">The alias.</param>
        </member>
        <member name="P:Serenity.Data.Alias.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Serenity.Data.Alias.NameDot">
            <summary>
            Gets the name dot.
            </summary>
            <value>
            The name dot.
            </value>
        </member>
        <member name="P:Serenity.Data.Alias.Table">
            <summary>
            Gets the table.
            </summary>
            <value>
            The table.
            </value>
        </member>
        <member name="P:Serenity.Data.Alias.Item(System.String)">
            <summary>
            Gets the prefixed expression with the specified field name.
            </summary>
            <value>
            The <see cref="T:System.String"/>.
            </value>
            <param name="fieldName">Name of the field.</param>
            <returns>Expression like t0.fieldName</returns>
        </member>
        <member name="P:Serenity.Data.Alias.Item(Serenity.Data.IField)">
            <summary>
            Gets the prefixed expression with the specified field.
            </summary>
            <value>
            The <see cref="T:System.String"/>.
            </value>
            <param name="field">The field.</param>
            <returns>Expression like t0.fieldName</returns>
            <exception cref="T:System.ArgumentNullException">field</exception>
        </member>
        <member name="M:Serenity.Data.Alias._(System.String)">
            <summary>
            Gets a criteria containing prefixed field.
            Only here for backward compatibility.
            </summary>
            <param name="field">The field.</param>
            <returns>Criteria containing prefixed field</returns>
        </member>
        <member name="M:Serenity.Data.Alias._(Serenity.Data.IField)">
            <summary>
            Gets a criteria containing prefixed field.
            Only here for backward compatibility.
            </summary>
            <param name="field">The field.</param>
            <returns>Criteria containing prefixed field</returns>
        </member>
        <member name="M:Serenity.Data.Alias.op_Addition(Serenity.Data.Alias,System.String)">
            <summary>
            Gets a criteria containing prefixed field.
            Only here for backward compatibility.
            </summary>
            <param name="alias">The alias.</param>
            <param name="fieldName">Name of the field.</param>
            <returns>
            String containing prefixed field
            </returns>
        </member>
        <member name="M:Serenity.Data.Alias.op_Addition(Serenity.Data.Alias,Serenity.Data.IField)">
            <summary>
            Gets a criteria containing prefixed field.
            Only here for backward compatibility.
            </summary>
            <param name="alias">The alias.</param>
            <param name="field">The field.</param>
            <returns>
            String containing prefixed field
            </returns>
            <exception cref="T:System.ArgumentNullException">field</exception>
        </member>
        <member name="T:Serenity.Data.AliasExtensions">
            <summary>
            Contains extension methods for Alias objects
            </summary>
        </member>
        <member name="M:Serenity.Data.AliasExtensions.WithNoLock(Serenity.Data.IAlias)">
            <summary>
            Adds a WITH(NOLOCK) to the alias and returns a new alias.
            </summary>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Data.BracketLocator">
            <summary>
            Contains helper methods for locating / replacing brackets in an SQL expression
            </summary>
        </member>
        <member name="M:Serenity.Data.BracketLocator.ReplaceBracketContents(System.String,System.Char,System.Func{System.String,System.String})">
            <summary>
            Replaces the bracket contents in SQL expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="validChar1">An additional character allowed to be in brackets.</param>
            <param name="replace">The replace function.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.BracketLocator.ReplaceBrackets(System.String,Serenity.Data.ISqlDialect)">
            <summary>
            Replaces the brackets in an SQL expression with the dialect specific ones.
            </summary>
            <param name="expression">The expression.</param>
            <param name="dialect">The dialect.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Data.CrossApply">
            <summary>
            CROSS APPLY type of join
            </summary>
            <seealso cref="T:Serenity.Data.Join" />
        </member>
        <member name="M:Serenity.Data.CrossApply.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.CrossApply"/> class.
            </summary>
            <param name="subQuery">Subquery.</param>
            <param name="alias">The alias.</param>
        </member>
        <member name="M:Serenity.Data.CrossApply.#ctor(System.Collections.Generic.IDictionary{System.String,Serenity.Data.Join},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.CrossApply"/> class.
            </summary>
            <param name="joins">Dictionary of joins.</param>
            <param name="subQuery">Subquery.</param>
            <param name="alias">The alias.</param>
        </member>
        <member name="M:Serenity.Data.CrossApply.GetKeyword">
            <summary>
            Gets the SQL keyword.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Serenity.Data.DatabaseCaretReferences">
            <summary>
            Helper class for replacing database caret references in format [^ConnectionKey] in SQL expressions.
            </summary>
        </member>
        <member name="M:Serenity.Data.DatabaseCaretReferences.Replace(System.String)">
            <summary>
            Replaces caret references like [^ConnectionKey] in the specified expression with actual database names.
            </summary>
            <param name="expression">The expression.</param>
            <returns>Replaced expression.</returns>
        </member>
        <member name="T:Serenity.Data.IAlias">
            <summary>
              Interface for table aliases.</summary>
        </member>
        <member name="P:Serenity.Data.IAlias.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Serenity.Data.IAlias.NameDot">
            <summary>
            Gets the name plus dot.
            </summary>
            <value>
            The name dot.
            </value>
        </member>
        <member name="P:Serenity.Data.IAlias.Table">
            <summary>
            Gets the table.
            </summary>
            <value>
            The table.
            </value>
        </member>
        <member name="T:Serenity.Data.InnerJoin">
            <summary>
            INNER JOIN type
            </summary>
            <seealso cref="T:Serenity.Data.Join" />
        </member>
        <member name="M:Serenity.Data.InnerJoin.#ctor(System.String,System.String,Serenity.ICriteria)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.InnerJoin"/> class.
            </summary>
            <param name="toTable">To table.</param>
            <param name="alias">The alias.</param>
            <param name="onCriteria">The ON criteria.</param>
        </member>
        <member name="M:Serenity.Data.InnerJoin.#ctor(System.Collections.Generic.IDictionary{System.String,Serenity.Data.Join},System.String,System.String,Serenity.ICriteria)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.InnerJoin"/> class.
            </summary>
            <param name="joins">The joins.</param>
            <param name="toTable">To table.</param>
            <param name="alias">The alias.</param>
            <param name="onCriteria">The ON criteria.</param>
        </member>
        <member name="M:Serenity.Data.InnerJoin.GetKeyword">
            <summary>
            Gets the SQL keyword.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Serenity.Data.Mapping.ISqlJoin">
            <summary>
            Interface for SQL join types
            </summary>
        </member>
        <member name="P:Serenity.Data.Mapping.ISqlJoin.Alias">
            <summary>
            Gets the alias.
            </summary>
            <value>
            The alias.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.ISqlJoin.ToTable">
            <summary>
            Gets the table joined to
            </summary>
            <value>
            The table joined to.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.ISqlJoin.OnCriteria">
            <summary>
            Gets the ON criteria.
            </summary>
            <value>
            The ON criteria.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.ISqlJoin.PropertyPrefix">
            <summary>
            Gets the property prefix.
            </summary>
            <value>
            The property prefix.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.ISqlJoin.TitlePrefix">
            <summary>
            Gets or sets the title prefix.
            </summary>
            <value>
            The title prefix.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.ISqlJoin.RowType">
            <summary>
            Gets or sets the type of the row.
            </summary>
            <value>
            The type of the row.
            </value>
        </member>
        <member name="T:Serenity.Data.Mapping.AutoIncrementAttribute">
            <summary>
            Marks the field as auto increment, e.g. generated on insert in SQL side
            </summary>
            <seealso cref="T:Serenity.Data.Mapping.SetFieldFlagsAttribute" />
        </member>
        <member name="M:Serenity.Data.Mapping.AutoIncrementAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Mapping.AutoIncrementAttribute"/> class.
            </summary>
        </member>
        <member name="T:Serenity.Data.Mapping.ClientSideAttribute">
            <summary>
            Marks the field as NotMapped, obsolete, prefer [NotMapped] attribute.
            </summary>
            <seealso cref="T:Serenity.Data.Mapping.SetFieldFlagsAttribute" />
        </member>
        <member name="M:Serenity.Data.Mapping.ClientSideAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Mapping.ClientSideAttribute"/> class.
            </summary>
        </member>
        <member name="T:Serenity.Data.Mapping.ColumnAttribute">
            <summary>
            Explicitly specifies the database column name for property.
            Use this attribute if matching column name in database is different than the property name.
            </summary>
        </member>
        <member name="M:Serenity.Data.Mapping.ColumnAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Mapping.ColumnAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="P:Serenity.Data.Mapping.ColumnAttribute.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:Serenity.Data.Mapping.ExpressionAttribute">
            <summary>
            Specifies SQL expression this property corresponds to.
            You may use brackets ([]) to escape identifiers. Brackets will be converted to database specific quotes.
            </summary>
        </member>
        <member name="M:Serenity.Data.Mapping.ExpressionAttribute.#ctor(System.String)">
            <summary>
            Specifies SQL expression this property corresponds to.
            </summary>
            <param name="value">An SQL expression like (T0.Firstname + ' ' + T0.LastName)</param>
        </member>
        <member name="P:Serenity.Data.Mapping.ExpressionAttribute.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.ExpressionAttribute.Dialect">
            <summary>
            Gets or sets the dialect.
            </summary>
            <value>
            The dialect.
            </value>
        </member>
        <member name="T:Serenity.Data.Mapping.ForeignKeyAttribute">
            <summary>
            Specifies that this property is a foreign key to another field in a primary key table.
            There is no need for foreign key to exist in database actually. It is not checked.
            This is mostly used for joins.
            </summary>
        </member>
        <member name="M:Serenity.Data.Mapping.ForeignKeyAttribute.#ctor(System.String,System.String)">
            <summary>
            Specifies that this property is a foreign key to another field in a primary key table.
            </summary>
            <param name="table">Primary key table</param>
            <param name="field">Matching column in primary key table</param>
        </member>
        <member name="M:Serenity.Data.Mapping.ForeignKeyAttribute.#ctor(System.Type,System.String)">
            <summary>
            Specifies that this property is a foreign key to another field in a primary key table.
            </summary>
            <param name="rowType">Entity for primary key table. Row must have a [TableName] attribute.</param>
            <param name="field">If field parameter is not specified, the row type must have a field with 
            [Identity] attribute or single property with [PrimaryKey] attribute.
            (implementing IIdRow won't help)</param>
        </member>
        <member name="P:Serenity.Data.Mapping.ForeignKeyAttribute.Table">
            <summary>
            Gets the table.
            </summary>
            <value>
            The table.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.ForeignKeyAttribute.Field">
            <summary>
            Gets the field.
            </summary>
            <value>
            The field.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.ForeignKeyAttribute.RowType">
            <summary>
            Gets or sets the type of the row.
            </summary>
            <value>
            The type of the row.
            </value>
        </member>
        <member name="T:Serenity.Data.Mapping.IdentityAttribute">
            <summary>
            Marks the field as Identity, a combination of PrimaryKey, AutoIncrement and NotNull flags.
            </summary>
            <seealso cref="T:Serenity.Data.Mapping.SetFieldFlagsAttribute" />
        </member>
        <member name="M:Serenity.Data.Mapping.IdentityAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Mapping.IdentityAttribute"/> class.
            </summary>
        </member>
        <member name="T:Serenity.Data.Mapping.InnerJoinAttribute">
            <summary>
            INNER JOIN type
            </summary>
            <seealso cref="T:System.Attribute" />
            <seealso cref="T:Serenity.Data.Mapping.ISqlJoin" />
        </member>
        <member name="M:Serenity.Data.Mapping.InnerJoinAttribute.#ctor(System.String)">
            <summary>
            Adds a inner join on foreign key. Use this version only on properties with ForeignKey attribute.
            </summary>
            <param name="alias">Foreign join alias</param>
        </member>
        <member name="M:Serenity.Data.Mapping.InnerJoinAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Adds a inner join
            </summary>
            <param name="alias">Join alias</param>
            <param name="toTable">Join table</param>
            <param name="onCriteria">If the attribute is used on a property, this parameter is a field name, if used on a class,
            this parameter is the ON criteria of the inner join statement.</param>
        </member>
        <member name="P:Serenity.Data.Mapping.InnerJoinAttribute.Alias">
            <summary>
            Gets the alias.
            </summary>
            <value>
            The alias.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.InnerJoinAttribute.ToTable">
            <summary>
            Gets the table.
            </summary>
            <value>
            The table joined to.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.InnerJoinAttribute.OnCriteria">
            <summary>
            Gets the ON criteria.
            </summary>
            <value>
            The ON criteria.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.InnerJoinAttribute.PropertyPrefix">
            <summary>
            Gets the property prefix.
            </summary>
            <value>
            The property prefix.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.InnerJoinAttribute.TitlePrefix">
            <summary>
            Gets or sets the title prefix.
            </summary>
            <value>
            The title prefix.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.InnerJoinAttribute.RowType">
            <summary>
            Gets or sets the type of the row.
            </summary>
            <value>
            The type of the row.
            </value>
        </member>
        <member name="T:Serenity.Data.Mapping.LeftJoinAttribute">
            <summary>
            LEFT JOIN type
            </summary>
            <seealso cref="T:System.Attribute" />
            <seealso cref="T:Serenity.Data.Mapping.ISqlJoin" />
        </member>
        <member name="M:Serenity.Data.Mapping.LeftJoinAttribute.#ctor(System.String)">
            <summary>
            Adds a left join on foreign key. Use this version only on properties with ForeignKey attribute.
            </summary>
            <param name="alias">Foreign join alias</param>
        </member>
        <member name="M:Serenity.Data.Mapping.LeftJoinAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Adds a left join
            </summary>
            <param name="alias">Join alias</param>
            <param name="toTable">Join table</param>
            <param name="onCriteria">If the attribute is used on a property, this parameter is a field name, if used on a class,
            this parameter is the ON criteria of the left join statement.</param>
        </member>
        <member name="P:Serenity.Data.Mapping.LeftJoinAttribute.Alias">
            <summary>
            Gets the alias.
            </summary>
            <value>
            The alias.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.LeftJoinAttribute.ToTable">
            <summary>
            Gets the table joined to.
            </summary>
            <value>
            The table joined to.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.LeftJoinAttribute.OnCriteria">
            <summary>
            Gets the ON criteria.
            </summary>
            <value>
            The ON criteria.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.LeftJoinAttribute.PropertyPrefix">
            <summary>
            Gets the property prefix.
            </summary>
            <value>
            The property prefix.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.LeftJoinAttribute.TitlePrefix">
            <summary>
            Gets or sets the title prefix.
            </summary>
            <value>
            The title prefix.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.LeftJoinAttribute.RowType">
            <summary>
            Gets or sets the type of the row.
            </summary>
            <value>
            The type of the row.
            </value>
        </member>
        <member name="T:Serenity.Data.Mapping.LinkingSetRelationAttribute">
            <summary>
            Specifies a linking set relation (1-N relation of ID values, like a check list.)
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.Data.Mapping.LinkingSetRelationAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>
            Declares a linking set relation
            </summary>
            <param name="rowType">Linking row type</param>
            <param name="thisKey">Name of the field in linking row that corresponds to ID in this table</param>
            <param name="itemKey">Name of the field in linking row that will hold item values in list</param>
        </member>
        <member name="P:Serenity.Data.Mapping.LinkingSetRelationAttribute.RowType">
            <summary>
            Gets the type of the row.
            </summary>
            <value>
            The type of the row.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.LinkingSetRelationAttribute.ThisKey">
            <summary>
            Gets the this key, e.g. name of field in linking set table that this tables ID field corresponds to.
            </summary>
            <value>
            The this key.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.LinkingSetRelationAttribute.ItemKey">
            <summary>
            Gets the item key, e.g. name of the field in linking set table that contains ID's of selected items.
            </summary>
            <value>
            The item key.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.LinkingSetRelationAttribute.FilterField">
            <summary>
            Gets or sets the filter field.
            </summary>
            <value>
            The filter field.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.LinkingSetRelationAttribute.FilterValue">
            <summary>
            Gets or sets the filter value.
            </summary>
            <value>
            The filter value.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.LinkingSetRelationAttribute.PreserveOrder">
            <summary>
            Gets or sets a value indicating whether to preserve existing order of records on save.
            </summary>
            <value>
              <c>true</c> if should preserve order; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.LinkingSetRelationAttribute.HandleEqualityFilter">
            <summary>
            Gets or sets a value indicating whether to handle equality filter.
            </summary>
            <value>
              <c>true</c> if should handle equality filter; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.LinkingSetRelationAttribute.ForceCascadeDelete">
            <summary>
            Forces deletion of linking row records even if master record uses soft delete.
            If false (default) this doesn't delete linking records, as master record might be undeleted.
            </summary>
        </member>
        <member name="T:Serenity.Data.Mapping.LookupIncludeAttribute">
            <summary>
            Marks the property so that it should be included in lookup by default.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Serenity.Data.Mapping.MasterDetailRelationAttribute">
            <summary>
            Defines a master detail relation (1-N) between this row and another
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.Data.Mapping.MasterDetailRelationAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Mapping.MasterDetailRelationAttribute"/> class.
            </summary>
            <param name="foreignKey">The foreign key.</param>
        </member>
        <member name="P:Serenity.Data.Mapping.MasterDetailRelationAttribute.ForeignKey">
            <summary>
            Gets the foreign key.
            </summary>
            <value>
            The foreign key.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.MasterDetailRelationAttribute.CheckChangesOnUpdate">
            <summary>
            Gets or sets a value indicating whether to check changes on update.
            Disable this if you are getting comparison errors.
            </summary>
            <value>
              <c>true</c> if to check changes on update; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.MasterDetailRelationAttribute.ColumnSelection">
            <summary>
            Gets or sets the column selection.
            </summary>
            <value>
            The column selection.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.MasterDetailRelationAttribute.IncludeColumns">
            <summary>
            Gets or sets the comma separated list of include columns.
            </summary>
            <value>
            The include columns.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.MasterDetailRelationAttribute.FilterField">
            <summary>
            Gets or sets the filter field.
            </summary>
            <value>
            The filter field.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.MasterDetailRelationAttribute.FilterValue">
            <summary>
            Gets or sets the filter value.
            </summary>
            <value>
            The filter value.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.MasterDetailRelationAttribute.MasterKeyField">
            <summary>
            Optional: override the default behaviour and use a different id field (i.e. from a unique constraint)
            </summary>
        </member>
        <member name="P:Serenity.Data.Mapping.MasterDetailRelationAttribute.ForceCascadeDelete">
            <summary>
            Forces deletion of linking row records even if master record uses soft delete.
            If false (default) this doesn't delete linking records, as master record might be undeleted.
            </summary>
        </member>
        <member name="T:Serenity.Data.Mapping.MinSelectLevelAttribute">
            <summary>
            Determines minimum selection level for this field.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.Data.Mapping.MinSelectLevelAttribute.#ctor(Serenity.Data.SelectLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Mapping.MinSelectLevelAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Serenity.Data.Mapping.MinSelectLevelAttribute.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Serenity.Data.Mapping.NotMappedAttribute">
            <summary>
            Specifies that this property is not mapped to an SQL column/expression
            </summary>
        </member>
        <member name="M:Serenity.Data.Mapping.NotMappedAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Mapping.NotMappedAttribute"/> class.
            </summary>
        </member>
        <member name="T:Serenity.Data.Mapping.NotNullAttribute">
            <summary>
            Specifies that field can not be null.
            </summary>
            <seealso cref="T:Serenity.Data.Mapping.SetFieldFlagsAttribute" />
        </member>
        <member name="M:Serenity.Data.Mapping.NotNullAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Mapping.NotNullAttribute"/> class.
            </summary>
        </member>
        <member name="T:Serenity.Data.Mapping.OriginAttribute">
            <summary>
            Specifies that this column belongs to another table.
            </summary>
        </member>
        <member name="M:Serenity.Data.Mapping.OriginAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Mapping.OriginAttribute"/> class.
            </summary>
            <param name="join">The join.</param>
            <param name="property">The property.</param>
        </member>
        <member name="P:Serenity.Data.Mapping.OriginAttribute.Join">
            <summary>
            Gets the join.
            </summary>
            <value>
            The join.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.OriginAttribute.Property">
            <summary>
            Gets or sets the property.
            </summary>
            <value>
            The property.
            </value>
        </member>
        <member name="T:Serenity.Data.Mapping.OuterApplyAttribute">
            <summary>
            Adds a OUTER APPLY to the row
            </summary>
            <seealso cref="T:System.Attribute" />
            <seealso cref="T:Serenity.Data.Mapping.ISqlJoin" />
        </member>
        <member name="M:Serenity.Data.Mapping.OuterApplyAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Mapping.OuterApplyAttribute"/> class.
            </summary>
            <param name="alias">The alias.</param>
            <param name="innerQuery">The inner query.</param>
        </member>
        <member name="P:Serenity.Data.Mapping.OuterApplyAttribute.Alias">
            <summary>
            Gets the alias.
            </summary>
            <value>
            The alias.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.OuterApplyAttribute.InnerQuery">
            <summary>
            Gets the inner query.
            </summary>
            <value>
            The inner query.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.OuterApplyAttribute.PropertyPrefix">
            <summary>
            Gets the property prefix.
            </summary>
            <value>
            The property prefix.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.OuterApplyAttribute.TitlePrefix">
            <summary>
            Gets or sets the title prefix.
            </summary>
            <value>
            The title prefix.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.OuterApplyAttribute.RowType">
            <summary>
            Gets or sets the type of the row.
            </summary>
            <value>
            The type of the row.
            </value>
        </member>
        <member name="T:Serenity.Data.Mapping.PrimaryKeyAttribute">
            <summary>
            Marks the property as part of the primary key.
            </summary>
            <seealso cref="T:Serenity.Data.Mapping.SetFieldFlagsAttribute" />
        </member>
        <member name="M:Serenity.Data.Mapping.PrimaryKeyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Mapping.PrimaryKeyAttribute"/> class.
            </summary>
        </member>
        <member name="T:Serenity.Data.Mapping.QuickSearchAttribute">
            <summary>
            Marks the property so that it should be included in quick text searches.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.Data.Mapping.QuickSearchAttribute.#ctor(Serenity.Data.Mapping.SearchType,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Mapping.QuickSearchAttribute"/> class.
            </summary>
            <param name="searchType">Type of the search.</param>
            <param name="numericOnly">The numeric only.</param>
            <param name="isExplicit">if set to <c>true</c> [is explicit].</param>
        </member>
        <member name="P:Serenity.Data.Mapping.QuickSearchAttribute.SearchType">
            <summary>
            Gets the type of the search.
            </summary>
            <value>
            The type of the search.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.QuickSearchAttribute.NumericOnly">
            <summary>
            Gets the numeric only.
            </summary>
            <value>
            The numeric only.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.QuickSearchAttribute.IsExplicit">
            <summary>
            Gets a value indicating whether this instance is explicit.
            </summary>
            <value>
              <c>true</c> if this instance is explicit; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Serenity.Data.Mapping.ScaleAttribute">
            <summary>
            Determines numeric scale (decimal places) for the field.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.Data.Mapping.ScaleAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Mapping.ScaleAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Serenity.Data.Mapping.ScaleAttribute.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Serenity.Data.Mapping.SearchType">
            <summary>
            Quick search type enumeration
            </summary>
        </member>
        <member name="F:Serenity.Data.Mapping.SearchType.Auto">
            <summary>
            Automatic mode. Equals for integer types, Contains for other.
            </summary>
        </member>
        <member name="F:Serenity.Data.Mapping.SearchType.Equals">
            <summary>
            Search with equality
            </summary>
        </member>
        <member name="F:Serenity.Data.Mapping.SearchType.Contains">
            <summary>
            Search with contains
            </summary>
        </member>
        <member name="F:Serenity.Data.Mapping.SearchType.StartsWith">
            <summary>
            Search with STARTS WITH
            </summary>
        </member>
        <member name="F:Serenity.Data.Mapping.SearchType.FullTextContains">
            <summary>
            Use full text CONTAINS
            </summary>
        </member>
        <member name="T:Serenity.Data.Mapping.SetFieldFlagsAttribute">
            <summary>
            Used to turn on (include) or turn off (exclude) field flags.
            </summary>
        </member>
        <member name="M:Serenity.Data.Mapping.SetFieldFlagsAttribute.#ctor(Serenity.Data.FieldFlags,Serenity.Data.FieldFlags)">
            <summary>
            Turn on or off field flags.
            </summary>
            <param name="add">Set of flags to turn on (include)</param>
            <param name="remove">Set of flags to turn off (exclude)</param>
        </member>
        <member name="P:Serenity.Data.Mapping.SetFieldFlagsAttribute.Add">
            <summary>
            Gets the include flags.
            </summary>
            <value>
            The include flags.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.SetFieldFlagsAttribute.Remove">
            <summary>
            Gets the exclude flags.
            </summary>
            <value>
            The exclude flags.
            </value>
        </member>
        <member name="T:Serenity.Data.Mapping.SizeAttribute">
            <summary>
            Determines size (max length or numeric precision for) for the field.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.Data.Mapping.SizeAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Mapping.SizeAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Serenity.Data.Mapping.SizeAttribute.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Serenity.Data.Mapping.TableNameAttribute">
            <summary>
            Determines table name for the row.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.Data.Mapping.TableNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Mapping.TableNameAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="P:Serenity.Data.Mapping.TableNameAttribute.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:Serenity.Data.Mapping.TextualFieldAttribute">
            <summary>
            Determines textual field for this field. This is placed on FK's and specifies which field
            in joined table (view fields in this row that originates from foreign table) should be used
            for display / filtering.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.Data.Mapping.TextualFieldAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Mapping.TextualFieldAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Serenity.Data.Mapping.TextualFieldAttribute.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Serenity.Data.Mapping.UniqueAttribute">
            <summary>
            Defines a unique constraint on the field
            </summary>
            <seealso cref="T:Serenity.Data.Mapping.SetFieldFlagsAttribute" />
        </member>
        <member name="M:Serenity.Data.Mapping.UniqueAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Mapping.UniqueAttribute"/> class.
            </summary>
        </member>
        <member name="P:Serenity.Data.Mapping.UniqueAttribute.Name">
            <summary>
            Gets or sets the name of the constraint. Not used.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.UniqueAttribute.CheckBeforeSave">
            <summary>
            Gets or sets a value indicating whether to check this constraint before save.
            </summary>
            <value>
              <c>true</c> if should check, otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.UniqueAttribute.IgnoreDeleted">
            <summary>
            Gets or sets a value indicating whether to ignore deleted records.
            </summary>
            <value>
              <c>true</c> if should ignore deleted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.UniqueAttribute.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
            <value>
            The error message.
            </value>
        </member>
        <member name="T:Serenity.Data.Mapping.UniqueConstraintAttribute">
            <summary>
            Adds a unique constraint check to the row.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.Data.Mapping.UniqueConstraintAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Mapping.UniqueConstraintAttribute"/> class.
            </summary>
            <param name="fields">The fields.</param>
            <exception cref="T:System.ArgumentNullException">fields</exception>
        </member>
        <member name="P:Serenity.Data.Mapping.UniqueConstraintAttribute.Name">
            <summary>
            Gets or sets the constraint name. Not used at the moment.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.UniqueConstraintAttribute.Fields">
            <summary>
            Gets the fields.
            </summary>
            <value>
            The fields.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.UniqueConstraintAttribute.CheckBeforeSave">
            <summary>
            Gets or sets a value indicating whether constraint should be checked before save, default true.
            </summary>
            <value>
              <c>true</c> if [check before save]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.UniqueConstraintAttribute.IgnoreDeleted">
            <summary>
            Gets or sets a value indicating whether to ignore deleted records while checking the constraint.
            </summary>
            <value>
              <c>true</c> if [ignore deleted]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.UniqueConstraintAttribute.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
            <value>
            The error message.
            </value>
        </member>
        <member name="T:Serenity.Data.Mapping.UpdatableExtensionAttribute">
            <summary>
            Marks the JOIN as an updatable extension.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.Data.Mapping.UpdatableExtensionAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Mapping.UpdatableExtensionAttribute"/> class.
            </summary>
            <param name="alias">The alias.</param>
            <param name="rowType">Type of the row.</param>
        </member>
        <member name="P:Serenity.Data.Mapping.UpdatableExtensionAttribute.RowType">
            <summary>
            Gets the type of the row.
            </summary>
            <value>
            The type of the row.
            </value>
        </member>
        <member name="P:Serenity.Data.Mapping.UpdatableExtensionAttribute.Alias">
            <summary>
            The join alias in this row that brings in extension table fields as view fields
            </summary>
        </member>
        <member name="P:Serenity.Data.Mapping.UpdatableExtensionAttribute.ThisKey">
            <summary>
            Name of the key field in this table. 
            If not specified, ID field of this table will be used.
            </summary>
        </member>
        <member name="P:Serenity.Data.Mapping.UpdatableExtensionAttribute.OtherKey">
            <summary>
            Name of the key field in extension table. 
            If not specified, ID field of extension table is assumed,
            unless there is a field with matching name to ThisKey in extension table.
            </summary>
        </member>
        <member name="P:Serenity.Data.Mapping.UpdatableExtensionAttribute.FilterField">
            <summary>
            Name of a field in extension table that will be filtered in 
            extension table in addition to key.
            For example, if you have a CustomerAddresses table, and
            your join condition is T0.CustomerID = ca.CustomerID and
            ca.AddressType = 'Billing', your FilterField is AddressType
            and your FilterValue is 'Billing'
            </summary>
        </member>
        <member name="P:Serenity.Data.Mapping.UpdatableExtensionAttribute.FilterValue">
            <summary>
            Constant value of a field in extension table that will be 
            filtered in extension table in addition to key.
            For example, if you have a CustomerAddresses table, and
            your join condition is T0.CustomerID = ca.CustomerID and
            ca.AddressType = 'Billing', your FilterField is AddressType
            and your FilterValue is 'Billing'
            </summary>
        </member>
        <member name="P:Serenity.Data.Mapping.UpdatableExtensionAttribute.PresenceField">
            <summary>
            This extension should only be inserted if this field is equal to PresenceValue
            For example, you might have a PersonType column in PersonRow and 
            student record should only be created (if not already) if PersonType = "Student".
            </summary>
        </member>
        <member name="P:Serenity.Data.Mapping.UpdatableExtensionAttribute.PresenceValue">
            <summary>
            This extension should only be inserted if PresenceField value is equal to this one.
            For example, you might have a PersonType column in PersonRow and 
            student record should only be created (if not already) if PersonType = "Student".
            </summary>
        </member>
        <member name="P:Serenity.Data.Mapping.UpdatableExtensionAttribute.CascadeDelete">
            <summary>
            Delete extension record if this record is deleted
            </summary>
        </member>
        <member name="T:Serenity.Data.Join">
            <summary>
              Corresponds to an SQL JOIN (INNER, OUTER, CROSS etc.)</summary>
        </member>
        <member name="M:Serenity.Data.Join.GetKeyword">
            <summary>
            Gets the keyword.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Join.#ctor(System.Collections.Generic.IDictionary{System.String,Serenity.Data.Join},System.String,System.String,Serenity.ICriteria)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Join"/> class.
            </summary>
            <param name="joins">The joins dictionary.</param>
            <param name="toTable">To table.</param>
            <param name="alias">The alias.</param>
            <param name="onCriteria">The ON criteria.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:Serenity.Data.Join.OnCriteria">
            <summary>
            Gets the ON criteria.
            </summary>
            <value>
            The ON criteria.
            </value>
        </member>
        <member name="P:Serenity.Data.Join.ReferencedAliases">
            <summary>
            Gets the referenced aliases.
            </summary>
            <value>
            The referenced aliases.
            </value>
        </member>
        <member name="P:Serenity.Data.Join.Joins">
            <summary>
            Gets the joins.
            </summary>
            <value>
            The joins.
            </value>
        </member>
        <member name="P:Serenity.Data.Join.RowType">
            <summary>
            Gets or sets the type of the row.
            </summary>
            <value>
            The type of the row.
            </value>
        </member>
        <member name="T:Serenity.Data.JoinAliasLocator">
            <summary>
            Locates alias references in an SQL expression
            </summary>
        </member>
        <member name="M:Serenity.Data.JoinAliasLocator.Locate(System.String)">
            <summary>
            Locates the aliases in specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">expression is null</exception>
        </member>
        <member name="M:Serenity.Data.JoinAliasLocator.LocateOptimized(System.String,System.String@)">
            <summary>
            Locates the aliases in a SQL expression, returning first alias in an out parameter.
            </summary>
            <param name="expression">The expression.</param>
            <param name="singleAlias">The single alias.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">expression is null</exception>
        </member>
        <member name="M:Serenity.Data.JoinAliasLocator.EnumerateAliases(System.String,System.Action{System.String})">
            <summary>
            Enumerates the aliases in an SQL expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="alias">The alias handler action.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.JoinAliasLocator.ReplaceAliases(System.String,System.Func{System.String,System.String})">
            <summary>
            Replaces the aliases in an SQL expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="replace">The replace function.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Data.LeftJoin">
            <summary>
            LEFT JOIN type
            </summary>
            <seealso cref="T:Serenity.Data.Join" />
        </member>
        <member name="M:Serenity.Data.LeftJoin.#ctor(System.String,System.String,Serenity.ICriteria)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.LeftJoin"/> class.
            </summary>
            <param name="toTable">To table.</param>
            <param name="alias">The alias.</param>
            <param name="onCriteria">The ON criteria.</param>
        </member>
        <member name="M:Serenity.Data.LeftJoin.#ctor(System.Collections.Generic.IDictionary{System.String,Serenity.Data.Join},System.String,System.String,Serenity.ICriteria)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.LeftJoin"/> class.
            </summary>
            <param name="joins">The joins dictionary.</param>
            <param name="toTable">To table.</param>
            <param name="alias">The alias.</param>
            <param name="onCriteria">The ON criteria.</param>
        </member>
        <member name="M:Serenity.Data.LeftJoin.GetKeyword">
            <summary>
            Gets the SQL keyword.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Serenity.Data.OuterApply">
            <summary>
            OUTER APPLY join type
            </summary>
            <seealso cref="T:Serenity.Data.Join" />
        </member>
        <member name="M:Serenity.Data.OuterApply.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.OuterApply"/> class.
            </summary>
            <param name="innerQuery">The inner query.</param>
            <param name="alias">The alias.</param>
        </member>
        <member name="M:Serenity.Data.OuterApply.#ctor(System.Collections.Generic.IDictionary{System.String,Serenity.Data.Join},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.OuterApply"/> class.
            </summary>
            <param name="joins">The joins.</param>
            <param name="innerQuery">The inner query.</param>
            <param name="alias">The alias.</param>
        </member>
        <member name="M:Serenity.Data.OuterApply.GetKeyword">
            <summary>
            Gets the SQL keyword.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Serenity.Data.ParamPrefixReplacer">
            <summary>
            Param prefix replacer
            </summary>
        </member>
        <member name="M:Serenity.Data.ParamPrefixReplacer.Replace(System.String,System.Char)">
            <summary>
            Replaces the param prefixes in specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="paramPrefix">The parameter prefix.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Data.RightJoin">
            <summary>
            RIGHT JOIN type
            </summary>
            <seealso cref="T:Serenity.Data.Join" />
        </member>
        <member name="M:Serenity.Data.RightJoin.#ctor(System.String,System.String,Serenity.ICriteria)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.RightJoin"/> class.
            </summary>
            <param name="toTable">To table.</param>
            <param name="alias">The alias.</param>
            <param name="onCriteria">The ON criteria.</param>
        </member>
        <member name="M:Serenity.Data.RightJoin.#ctor(System.Collections.Generic.IDictionary{System.String,Serenity.Data.Join},System.String,System.String,Serenity.ICriteria)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.RightJoin"/> class.
            </summary>
            <param name="joins">The joins dictionary.</param>
            <param name="toTable">To table.</param>
            <param name="alias">The alias.</param>
            <param name="onCriteria">The ON criteria.</param>
        </member>
        <member name="M:Serenity.Data.RightJoin.GetKeyword">
            <summary>
            Gets the SQL keyword.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Serenity.Data.T0ReferenceRemover">
            <summary>
            Removes T0. references in SQL expression
            </summary>
        </member>
        <member name="M:Serenity.Data.T0ReferenceRemover.RemoveT0Aliases(System.String)">
            <summary>
            Removes the "t0." aliases in SQL expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">expression</exception>
        </member>
        <member name="T:Serenity.Data.ConnectionKeyAttribute">
            <summary>
            Determines the connection key used for a class
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.Data.ConnectionKeyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.ConnectionKeyAttribute"/> class.
            </summary>
            <param name="connectionKey">The connection key.</param>
        </member>
        <member name="M:Serenity.Data.ConnectionKeyAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.ConnectionKeyAttribute"/> class
            with a type that has a ConnectionKey attribute to read the connection key from.
            </summary>
            <param name="sourceType">Type of the source.</param>
            <exception cref="T:System.ArgumentNullException">sourceType is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">sourceType has no ConnectionKey attribute.</exception>
        </member>
        <member name="P:Serenity.Data.ConnectionKeyAttribute.Value">
            <summary>
            Gets the connection key.
            </summary>
            <value>
            The connection.
            </value>
        </member>
        <member name="P:Serenity.Data.ConnectionKeyAttribute.SourceType">
            <summary>
            Gets the source type with connection key attribute if any.
            </summary>
            <value>
            The type of the source.
            </value>
        </member>
        <member name="T:Serenity.Data.DatabaseAliasAttribute">
            <summary>
            Determines database alias, used for unit test database contexts.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.Data.DatabaseAliasAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.DatabaseAliasAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Serenity.Data.DatabaseAliasAttribute.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Serenity.Data.DateTimeKindAttribute">
            <summary>
            Determines Time kind for a DateTime field.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.Data.DateTimeKindAttribute.#ctor(System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.DateTimeKindAttribute"/> class.
            </summary>
            <param name="value">The value. If Unspecified, it means this is a DateTime field but no time zone conversions should be done.
            Local means dates should be converted to server local time. Utc means dates should be converted to UTC timezone.</param>
        </member>
        <member name="P:Serenity.Data.DateTimeKindAttribute.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Serenity.Data.FieldFlags">
            <summary>Flags that determine basic properties of a field</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.None">
            <summary>No flags set.</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.Internal">
            <summary>Internal fields are equal to no flags set.</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.Insertable">
            <summary>Can a value be set on INSERT? Server side calculated 
            fields (like identity) shouldn't have this flag.</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.Updatable">
            <summary>Can it be set on UPDATE? Server side calculated 
            fields (like identity) shouldn't have this flag.</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.NotNull">
            <summary>Can it have a null or empty value?</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.PrimaryKey">
            <summary>Field is a member of primary key.</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.AutoIncrement">
            <summary>Auto incrementing field.</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.Foreign">
            <summary>It is a field originating from another table 
            through a join. e.g. view field.</summary> 
        </member>
        <member name="F:Serenity.Data.FieldFlags.Calculated">
            <summary>Calculated field.</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.Reflective">
            <summary>Just reflects another field value (e.g. negative/absolute 
            version of it), so doesn't have client and server side storage of 
            its own, and setting it just sets another field.</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.ClientSide">
            <summary>
            Field which is just a container to use in client side code (might 
            also be client side calculated / reflective).</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.NotMapped">
            <summary>
            Property which is not mapped to a SQL field / expression.</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.Trim">
            <summary>Should be trimmed (empty string as null) before 
            setting its value.</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.TrimToEmpty">
            <summary>Should be trimmed to (null to empty string) before 
            setting its value.</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.DenyFiltering">
            <summary>Deny filtering on this field.</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.Unique">
            <summary>Values should be unique.</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.Default">
            <summary>These are default flags unless specified otherwise. 
            Insertable, updatable and nullable and trimmed (to null).</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.Required">
            <summary>Default flags with NotNull included.</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.Identity">
            <summary>An identity primary key field with auto incrementing value.</summary>
        </member>
        <member name="T:Serenity.Data.InstanceNameAttribute">
            <summary>
            Determines non-plural name for an entity.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.Data.InstanceNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.InstanceNameAttribute"/> class.
            </summary>
            <param name="instanceName">Name of the instance.</param>
        </member>
        <member name="P:Serenity.Data.InstanceNameAttribute.InstanceName">
            <summary>
            Gets the name of the instance.
            </summary>
            <value>
            The name of the instance.
            </value>
        </member>
        <member name="T:Serenity.Data.NamePropertyAttribute">
            <summary>
            Determines that the attached property is the name field of the table.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.Data.NamePropertyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.NamePropertyAttribute"/> class.
            </summary>
        </member>
        <member name="T:Serenity.Data.SelectLevel">
            <summary>
            Select level enumeration
            </summary>
        </member>
        <member name="F:Serenity.Data.SelectLevel.Auto">
            <summary>
            Auto is equivalent to List level for table fields and Details level for view fields.
            </summary>
        </member>
        <member name="F:Serenity.Data.SelectLevel.Always">
            <summary>
            Always select this field, even if it is in ExcludeColumns list
            </summary>
        </member>
        <member name="F:Serenity.Data.SelectLevel.Lookup">
            <summary>
            Obsolete. Use [LookupInclude] attribute.
            </summary>
        </member>
        <member name="F:Serenity.Data.SelectLevel.List">
            <summary>
            Select this field in ColumnSelection.List or ColumnSelection.Details modes,
            or if it's specified in IncludeColumns list (if not also in 
            ExcludeColumns list)
            </summary>
        </member>
        <member name="F:Serenity.Data.SelectLevel.Details">
            <summary>
            Select this field in ColumnSelection.Details mode or if it's specified in 
            IncludeColumns list (if not also in ExcludeColumns list)
            </summary>
        </member>
        <member name="F:Serenity.Data.SelectLevel.Explicit">
            <summary>
            Don't select this field in any mode. Select it if specified in 
            IncludeColumns list (if not also in ExcludeColumns list)
            </summary>
        </member>
        <member name="F:Serenity.Data.SelectLevel.Never">
            <summary>
            Never select this column. Use this for sensitive fields like password hash.
            </summary>
        </member>
        <member name="T:Serenity.Data.TwoLevelCachedAttribute">
            <summary>
            This attribute marks a row so that when it is Inserted/Updated/Deleted
            through repository, its related cache, if any should be cleared. 
            It doesn't turn on/off caching. A sample of related cached item to a row, might
            be its lookup if any.
            </summary>
        </member>
        <member name="M:Serenity.Data.TwoLevelCachedAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.TwoLevelCachedAttribute"/> class.
            </summary>
            <param name="generationKeys">The generation keys.</param>
        </member>
        <member name="P:Serenity.Data.TwoLevelCachedAttribute.GenerationKeys">
            <summary>
            Gets the generation keys.
            </summary>
            <value>
            The generation keys.
            </value>
        </member>
        <member name="T:Serenity.Data.FilterableQueryExtensions">
            <summary>
              Extensions for objects implementing IDbWhere interface.</summary>
        </member>
        <member name="M:Serenity.Data.FilterableQueryExtensions.Where``1(``0,Serenity.ICriteria)">
            <summary>
              Adds a filter to query</summary>
            <typeparam name="T">
              Query class</typeparam>
            <param name="self">
              Query</param>
            <param name="filter">
              Filter</param>
            <returns>
              Query itself.</returns>
        </member>
        <member name="M:Serenity.Data.FilterableQueryExtensions.WhereEqual``1(``0,Serenity.Data.IField,System.Object)">
            <summary>
              Adds a where statement with equality filter to a query, and sets the parameter value with a parameter.</summary>
            <param field="field">
              Field.</param>
            <param field="value">
              Parameter value</param>
            <returns>
              The new filter parameter.</returns>
        </member>
        <member name="T:Serenity.Data.QueryWithParamsExtensions">
            <summary>
              Extension methods for classes implementing IDbWhereParam interface.</summary>
        </member>
        <member name="M:Serenity.Data.QueryWithParamsExtensions.SetParam``1(``0,Serenity.Data.Parameter,System.Object)">
            <summary>
            Sets the parameter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self">The query.</param>
            <param name="param">The parameter.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.QueryWithParamsExtensions.AddParam``1(``0,System.Object)">
            <summary>
            Adds the parameter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self">The query.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Data.SetFieldByStatementExtensions">
            <summary>
              Extension methods for classes implementing IDbSet interface</summary>
        </member>
        <member name="M:Serenity.Data.SetFieldByStatementExtensions.Set``1(``0,System.String,System.Object)">
            <summary>
              Sets a field value with a parameter.</summary>
            <param field="field">
              Field name.</param>
            <param field="param">
              Parameter name</param>
            <param field="value">
              Parameter value</param>
            <returns>
              Object itself.</returns>
        </member>
        <member name="T:Serenity.Data.IField">
            <summary>
            Field object abstraction for SQL query
            </summary>
        </member>
        <member name="P:Serenity.Data.IField.Name">
            <summary>
            Column name</summary>
        </member>
        <member name="P:Serenity.Data.IField.Expression">
            <summary>
            The expression (can be equal to name if no expression)</summary>
        </member>
        <member name="P:Serenity.Data.IField.ColumnAlias">
            <summary>
            Select as column alias. Can be equal to property name or name.</summary>
        </member>
        <member name="T:Serenity.Data.IFilterableQuery">
            <summary>
              Interface for query classes (e.g. SqlSelect, SqlUpdate) having a where method to filter
              records</summary>
        </member>
        <member name="M:Serenity.Data.IFilterableQuery.Where(System.String)">
            <summary>
              Filters a query by a filter string.</summary>
            <param name="filter">
              Filter string.</param>
            <returns>
              Object itself.</returns>
        </member>
        <member name="T:Serenity.Data.IGetExpressionByName">
            <summary>
              Interface for query classes (e.g. SqlQuery) that can return expression given column name
            </summary>
        </member>
        <member name="M:Serenity.Data.IGetExpressionByName.GetExpression(System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Data.IHaveJoins">
            <summary>
            Interface for row type that provides a list of its joins
            </summary>
        </member>
        <member name="P:Serenity.Data.IHaveJoins.Joins">
            <summary>
            List of all joins in entity</summary>
        </member>
        <member name="T:Serenity.Data.IMustRemoveT0">
            <summary>
            Obsolete interface
            </summary>
        </member>
        <member name="T:Serenity.Data.IQueryWithParams">
            <summary>
              Interface for objects setting parameters by PARAM method (like SqlInsert, SqlUpdate, SqlDelete...)</summary>
        </member>
        <member name="M:Serenity.Data.IQueryWithParams.AddParam(System.String,System.Object)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Serenity.Data.IQueryWithParams.SetParam(System.String,System.Object)">
            <summary>
            Sets the parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Serenity.Data.IQueryWithParams.AutoParam">
            <summary>
            Creates an automatically named parameter.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Serenity.Data.IQueryWithParams.Dialect">
            <summary>
            Gets the dialect.
            </summary>
            <value>
            The dialect.
            </value>
        </member>
        <member name="P:Serenity.Data.IQueryWithParams.Params">
            <summary>
            Gets the parameters.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="T:Serenity.Data.ISetFieldByStatement">
            <summary>
              Interface for objects setting values by SetTo method (like SqlInsert, SqlUpdate...)</summary>
        </member>
        <member name="M:Serenity.Data.ISetFieldByStatement.SetTo(System.String,System.String)">
            <summary>
              Sets a field to given value identifier.</summary>
            <param name="name">
              Field name (required).</param>
            <param name="statement">
              Value identifier (e.g. param name).</param>
            <returns>
              Query itself.</returns>
        </member>
        <member name="T:Serenity.Data.ISqlQuery">
            <summary>
            SqlQuery interface.
            </summary>
            <seealso cref="T:Serenity.Data.IQueryWithParams" />
            <seealso cref="T:Serenity.IChainable" />
        </member>
        <member name="T:Serenity.Data.ISqlQueryExtensible">
            <summary>
            Extensible SQL query interface. Used to abstract Serenity.Data.Row dependency from SqlQuery.
            </summary>
        </member>
        <member name="P:Serenity.Data.ISqlQueryExtensible.IntoRows">
            <summary>
            Gets the into rows.
            </summary>
            <value>
            The into rows.
            </value>
        </member>
        <member name="M:Serenity.Data.ISqlQueryExtensible.IntoRowSelection(System.Object)">
            <summary>
            Selects the into row.
            </summary>
            <param name="into">The into.</param>
        </member>
        <member name="P:Serenity.Data.ISqlQueryExtensible.FirstIntoRow">
            <summary>
            Gets the first into row.
            </summary>
            <value>
            The first into row.
            </value>
        </member>
        <member name="P:Serenity.Data.ISqlQueryExtensible.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>
            The columns.
            </value>
        </member>
        <member name="M:Serenity.Data.ISqlQueryExtensible.GetSelectIntoIndex(Serenity.Data.IField)">
            <summary>
            Gets the index of the select into.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Data.Parameter">
            <summary>
            Parameter struct
            </summary>
        </member>
        <member name="M:Serenity.Data.Parameter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Parameter"/> struct.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Serenity.Data.Parameter.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:Serenity.Data.QueryWithParams">
            <summary>
            Base class for queries with params like SqlQuery, SqlUpdate, SqlInsert
            </summary>
            <seealso cref="T:Serenity.Data.IQueryWithParams" />
        </member>
        <member name="F:Serenity.Data.QueryWithParams.dialect">
            <summary>
            The dialect
            </summary>
        </member>
        <member name="F:Serenity.Data.QueryWithParams.dialectOverridden">
            <summary>
            Is the dialect overridden
            </summary>
        </member>
        <member name="F:Serenity.Data.QueryWithParams.parent">
            <summary>
            The parent query with param storage
            </summary>
        </member>
        <member name="F:Serenity.Data.QueryWithParams.parameters">
            <summary>
            The parameters
            </summary>
        </member>
        <member name="M:Serenity.Data.QueryWithParams.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.QueryWithParams"/> class.
            </summary>
        </member>
        <member name="M:Serenity.Data.QueryWithParams.CloneParams(Serenity.Data.QueryWithParams)">
            <summary>
            Clones the parameters into a target query.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Serenity.Data.QueryWithParams.AddParam(System.String,System.Object)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Serenity.Data.QueryWithParams.SetParam(System.String,System.Object)">
            <summary>
            Sets the parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Serenity.Data.QueryWithParams.Params">
            <summary>
            Gets the parameters.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="P:Serenity.Data.QueryWithParams.ParamCount">
            <summary>
            Gets the parameter count.
            </summary>
            <value>
            The parameter count.
            </value>
        </member>
        <member name="M:Serenity.Data.QueryWithParams.AutoParam">
            <summary>
            Creates an automatically named parameter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.QueryWithParams.CreateSubQuery``1">
            <summary>
            Creates a new query that shares parameter dictionary with this query.
            </summary>
            <returns>
            A new query that shares parameters.</returns>
        </member>
        <member name="M:Serenity.Data.QueryWithParams.Dialect">
            <summary>
            Gets the dialect (SQL server type / version) for query.
            </summary>
        </member>
        <member name="P:Serenity.Data.QueryWithParams.IsDialectOverridden">
            <summary>
            Gets a value indicating whether the dialect is overridden.
            </summary>
            <value>
              <c>true</c> if the dialect is overridden; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.QueryWithParams.DebugText">
            <summary>
            Gets the debug text.
            </summary>
            <value>
            The debug text.
            </value>
        </member>
        <member name="T:Serenity.Data.Schema.FieldInfo">
            <summary>
            Meta data information for an SQL column
            </summary>
        </member>
        <member name="P:Serenity.Data.Schema.FieldInfo.FieldName">
            <summary>
            Gets or sets the name of the field.
            </summary>
            <value>
            The name of the field.
            </value>
        </member>
        <member name="P:Serenity.Data.Schema.FieldInfo.Size">
            <summary>
            Gets or sets the size (max length or numeric precision).
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="P:Serenity.Data.Schema.FieldInfo.Scale">
            <summary>
            Gets or sets the numeric scale.
            </summary>
            <value>
            The numeric scale.
            </value>
        </member>
        <member name="P:Serenity.Data.Schema.FieldInfo.IsPrimaryKey">
            <summary>
            Gets or sets a value indicating whether the field is primary key.
            </summary>
            <value>
              <c>true</c> if the field is primary key; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.Schema.FieldInfo.IsIdentity">
            <summary>
            Gets or sets a value indicating whether the field is an identity column.
            </summary>
            <value>
              <c>true</c> if identity; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.Schema.FieldInfo.IsNullable">
            <summary>
            Gets or sets a value indicating whether the field is nullable.
            </summary>
            <value>
              <c>true</c> if nullable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.Schema.FieldInfo.PKSchema">
            <summary>
            Gets or sets the primary key schema.
            </summary>
            <value>
            The primary key schema.
            </value>
        </member>
        <member name="P:Serenity.Data.Schema.FieldInfo.PKTable">
            <summary>
            Gets or sets the primary key table.
            </summary>
            <value>
            The primary key table.
            </value>
        </member>
        <member name="P:Serenity.Data.Schema.FieldInfo.PKColumn">
            <summary>
            Gets or sets the primary key column.
            </summary>
            <value>
            The primary key column.
            </value>
        </member>
        <member name="P:Serenity.Data.Schema.FieldInfo.DataType">
            <summary>
            Gets or sets the type of the data.
            </summary>
            <value>
            The type of the data.
            </value>
        </member>
        <member name="T:Serenity.Data.Schema.ForeignKeyInfo">
            <summary>
            SQL metadata for a foreign key
            </summary>
        </member>
        <member name="P:Serenity.Data.Schema.ForeignKeyInfo.FKName">
            <summary>
            Gets or sets the name of the foreign key.
            </summary>
            <value>
            The name of the foreign key.
            </value>
        </member>
        <member name="P:Serenity.Data.Schema.ForeignKeyInfo.FKColumn">
            <summary>
            Gets or sets the foreign key column.
            </summary>
            <value>
            The foreign key column.
            </value>
        </member>
        <member name="P:Serenity.Data.Schema.ForeignKeyInfo.PKSchema">
            <summary>
            Gets or sets the primary key schema.
            </summary>
            <value>
            The primary key schema.
            </value>
        </member>
        <member name="P:Serenity.Data.Schema.ForeignKeyInfo.PKTable">
            <summary>
            Gets or sets the primary key table.
            </summary>
            <value>
            The primary key table.
            </value>
        </member>
        <member name="P:Serenity.Data.Schema.ForeignKeyInfo.PKColumn">
            <summary>
            Gets or sets the primary key column.
            </summary>
            <value>
            The primary key column.
            </value>
        </member>
        <member name="T:Serenity.Data.Schema.ISchemaProvider">
            <summary>
            Abstraction for SQL metadata providers
            </summary>
        </member>
        <member name="P:Serenity.Data.Schema.ISchemaProvider.DefaultSchema">
            <summary>
            Gets the default schema.
            </summary>
            <value>
            The default schema.
            </value>
        </member>
        <member name="M:Serenity.Data.Schema.ISchemaProvider.GetForeignKeys(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Gets the foreign keys.
            </summary>
            <param name="connection">The connection.</param>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Schema.ISchemaProvider.GetIdentityFields(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Gets the identity fields.
            </summary>
            <param name="connection">The connection.</param>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Schema.ISchemaProvider.GetPrimaryKeyFields(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Gets the primary key fields.
            </summary>
            <param name="connection">The connection.</param>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Schema.ISchemaProvider.GetTableNames(System.Data.IDbConnection)">
            <summary>
            Gets the table names.
            </summary>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Schema.ISchemaProvider.GetFieldInfos(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Gets the field infos.
            </summary>
            <param name="connection">The connection.</param>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Data.Schema.FirebirdSchemaProvider">
            <summary>
            Firebird metadata provider.
            </summary>
            <seealso cref="T:Serenity.Data.Schema.ISchemaProvider" />
        </member>
        <member name="P:Serenity.Data.Schema.FirebirdSchemaProvider.DefaultSchema">
            <summary>
            Gets the default schema.
            </summary>
            <value>
            The default schema.
            </value>
        </member>
        <member name="M:Serenity.Data.Schema.FirebirdSchemaProvider.GetFieldInfos(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Gets the field infos.
            </summary>
            <param name="connection">The connection.</param>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Schema.FirebirdSchemaProvider.GetForeignKeys(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Gets the foreign keys.
            </summary>
            <param name="connection">The connection.</param>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Schema.FirebirdSchemaProvider.GetIdentityFields(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Gets the identity fields.
            </summary>
            <param name="connection">The connection.</param>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Schema.FirebirdSchemaProvider.GetPrimaryKeyFields(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Gets the primary key fields.
            </summary>
            <param name="connection">The connection.</param>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Schema.FirebirdSchemaProvider.GetTableNames(System.Data.IDbConnection)">
            <summary>
            Gets the table names.
            </summary>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Schema.FirebirdSchemaProvider.GetSqlTypeFromBlrType(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the type of the SQL type from BLR.
            </summary>
            <param name="type">The type.</param>
            <param name="subType">Type of the sub.</param>
            <param name="size">The size.</param>
            <param name="scale">The scale.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Data.Schema.MySqlSchemaProvider">
            <summary>
            MySql metadata provider
            </summary>
            <seealso cref="T:Serenity.Data.Schema.ISchemaProvider" />
        </member>
        <member name="P:Serenity.Data.Schema.MySqlSchemaProvider.DefaultSchema">
            <summary>
            Gets the default schema.
            </summary>
            <value>
            The default schema.
            </value>
        </member>
        <member name="M:Serenity.Data.Schema.MySqlSchemaProvider.GetFieldInfos(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Gets the field infos.
            </summary>
            <param name="connection">The connection.</param>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Schema.MySqlSchemaProvider.GetForeignKeys(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Gets the foreign keys.
            </summary>
            <param name="connection">The connection.</param>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Schema.MySqlSchemaProvider.GetIdentityFields(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Gets the identity fields.
            </summary>
            <param name="connection">The connection.</param>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Schema.MySqlSchemaProvider.GetPrimaryKeyFields(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Gets the primary key fields.
            </summary>
            <param name="connection">The connection.</param>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Schema.MySqlSchemaProvider.GetTableNames(System.Data.IDbConnection)">
            <summary>
            Gets the table names.
            </summary>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Data.Schema.OracleSchemaProvider">
            <summary>
            Oracle metadata provider.
            </summary>
            <seealso cref="T:Serenity.Data.Schema.ISchemaProvider" />
        </member>
        <member name="P:Serenity.Data.Schema.OracleSchemaProvider.DefaultSchema">
            <summary>
            Gets the default schema.
            </summary>
            <value>
            The default schema.
            </value>
        </member>
        <member name="M:Serenity.Data.Schema.OracleSchemaProvider.GetFieldInfos(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Gets the field infos.
            </summary>
            <param name="connection">The connection.</param>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Schema.OracleSchemaProvider.GetForeignKeys(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Gets the foreign keys.
            </summary>
            <param name="connection">The connection.</param>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Schema.OracleSchemaProvider.GetIdentityFields(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Gets the identity fields.
            </summary>
            <param name="connection">The connection.</param>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Schema.OracleSchemaProvider.GetPrimaryKeyFields(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Gets the primary key fields.
            </summary>
            <param name="connection">The connection.</param>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Schema.OracleSchemaProvider.GetTableNames(System.Data.IDbConnection)">
            <summary>
            Gets the table names.
            </summary>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Data.Schema.PostgresSchemaProvider">
            <summary>
            PostgreSQL metadata provider
            </summary>
            <seealso cref="T:Serenity.Data.Schema.ISchemaProvider" />
        </member>
        <member name="P:Serenity.Data.Schema.PostgresSchemaProvider.DefaultSchema">
            <summary>
            Gets the default schema.
            </summary>
            <value>
            The default schema.
            </value>
        </member>
        <member name="M:Serenity.Data.Schema.PostgresSchemaProvider.GetFieldInfos(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Gets the field infos.
            </summary>
            <param name="connection">The connection.</param>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Schema.PostgresSchemaProvider.GetForeignKeys(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Gets the foreign keys.
            </summary>
            <param name="connection">The connection.</param>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Schema.PostgresSchemaProvider.GetIdentityFields(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Gets the identity fields.
            </summary>
            <param name="connection">The connection.</param>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Schema.PostgresSchemaProvider.GetPrimaryKeyFields(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Gets the primary key fields.
            </summary>
            <param name="connection">The connection.</param>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Schema.PostgresSchemaProvider.GetTableNames(System.Data.IDbConnection)">
            <summary>
            Gets the table names.
            </summary>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Data.Schema.SqliteSchemaProvider">
            <summary>
            SQLite metadata provider
            </summary>
            <seealso cref="T:Serenity.Data.Schema.ISchemaProvider" />
        </member>
        <member name="P:Serenity.Data.Schema.SqliteSchemaProvider.DefaultSchema">
            <summary>
            Gets the default schema.
            </summary>
            <value>
            The default schema.
            </value>
        </member>
        <member name="M:Serenity.Data.Schema.SqliteSchemaProvider.GetFieldInfos(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Gets the field infos.
            </summary>
            <param name="connection">The connection.</param>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Schema.SqliteSchemaProvider.GetForeignKeys(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Gets the foreign keys.
            </summary>
            <param name="connection">The connection.</param>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Schema.SqliteSchemaProvider.GetIdentityFields(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Gets the identity fields.
            </summary>
            <param name="connection">The connection.</param>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Schema.SqliteSchemaProvider.GetPrimaryKeyFields(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Gets the primary key fields.
            </summary>
            <param name="connection">The connection.</param>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Schema.SqliteSchemaProvider.GetTableNames(System.Data.IDbConnection)">
            <summary>
            Gets the table names.
            </summary>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Data.Schema.SqlServerSchemaProvider">
            <summary>
            SQL server metadata provider
            </summary>
            <seealso cref="T:Serenity.Data.Schema.ISchemaProvider" />
        </member>
        <member name="P:Serenity.Data.Schema.SqlServerSchemaProvider.DefaultSchema">
            <summary>
            Gets the default schema.
            </summary>
            <value>
            The default schema.
            </value>
        </member>
        <member name="M:Serenity.Data.Schema.SqlServerSchemaProvider.GetFieldInfos(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Gets the field infos.
            </summary>
            <param name="connection">The connection.</param>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Schema.SqlServerSchemaProvider.GetForeignKeys(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Gets the foreign keys.
            </summary>
            <param name="connection">The connection.</param>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Schema.SqlServerSchemaProvider.GetIdentityFields(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Gets the identity fields.
            </summary>
            <param name="connection">The connection.</param>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Schema.SqlServerSchemaProvider.GetPrimaryKeyFields(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Gets the primary key fields.
            </summary>
            <param name="connection">The connection.</param>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Schema.SqlServerSchemaProvider.GetTableNames(System.Data.IDbConnection)">
            <summary>
            Gets the table names.
            </summary>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Data.Schema.TableName">
            <summary>
            Table schema/name and view information
            </summary>
        </member>
        <member name="P:Serenity.Data.Schema.TableName.Schema">
            <summary>
            Gets or sets the schema.
            </summary>
            <value>
            The schema.
            </value>
        </member>
        <member name="P:Serenity.Data.Schema.TableName.Table">
            <summary>
            Gets or sets the table.
            </summary>
            <value>
            The table.
            </value>
        </member>
        <member name="P:Serenity.Data.Schema.TableName.IsView">
            <summary>
            Gets or sets a value indicating whether this instance is view.
            </summary>
            <value>
              <c>true</c> if this instance is view; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.Schema.TableName.Tablename">
            <summary>
            Gets the tablename containg schema name dot table.
            </summary>
            <value>
            The tablename.
            </value>
        </member>
        <member name="T:Serenity.Data.SqlMapper">
            <summary>
            Dapper, a light weight object mapper for ADO.NET
            </summary>
        </member>
        <member name="T:Serenity.Data.SqlMapper.IDynamicParameters">
            <summary>
            Implement this interface to pass an arbitrary db specific set of parameters to Dapper
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.IDynamicParameters.AddParameters(System.Data.IDbCommand,Serenity.Data.SqlMapper.Identity)">
            <summary>
            Add all the parameters needed to the command just before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="identity">Information about the query</param>
        </member>
        <member name="T:Serenity.Data.SqlMapper.ICustomQueryParameter">
            <summary>
            Implement this interface to pass an arbitrary db specific parameter to Dapper
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.ICustomQueryParameter.AddParameter(System.Data.IDbCommand,System.String)">
            <summary>
            Add the parameter needed to the command before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="name">Parameter name</param>
        </member>
        <member name="T:Serenity.Data.SqlMapper.ITypeMap">
            <summary>
            Implement this interface to change default mapping of reader columns to type memebers
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.ITypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Finds best constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Matching constructor or default one</returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.ITypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Gets mapping for constructor parameter
            </summary>
            <param name="constructor">Constructor to resolve</param>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.ITypeMap.GetMember(System.String)">
            <summary>
            Gets member mapping for column
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="T:Serenity.Data.SqlMapper.IMemberMap">
            <summary>
            Implements this interface to provide custom member mapping
            </summary>
        </member>
        <member name="P:Serenity.Data.SqlMapper.IMemberMap.ColumnName">
            <summary>
            Source DataReader column name
            </summary>
        </member>
        <member name="P:Serenity.Data.SqlMapper.IMemberMap.MemberType">
            <summary>
             Target member type
            </summary>
        </member>
        <member name="P:Serenity.Data.SqlMapper.IMemberMap.Property">
            <summary>
            Target property
            </summary>
        </member>
        <member name="P:Serenity.Data.SqlMapper.IMemberMap.Field">
            <summary>
            Target field
            </summary>
        </member>
        <member name="P:Serenity.Data.SqlMapper.IMemberMap.Parameter">
            <summary>
            Target constructor parameter
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.GetBindByName(System.Type)">
            <summary>
            Gets the name of the bind by.
            </summary>
            <param name="commandType">Type of the command.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Data.SqlMapper.Link`2">
            <summary>
            This is a micro-cache; suitable when the number of terms is controllable (a few hundred, for example),
            and strictly append-only; you cannot change existing values. All key matches are on **REFERENCE**
            equality. The type is fully thread-safe.
            </summary>
        </member>
        <member name="E:Serenity.Data.SqlMapper.QueryCachePurged">
            <summary>
            Called if the query cache is purged via PurgeQueryCache
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.PurgeQueryCache">
            <summary>
            Purge the query cache 
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.GetCachedSQLCount">
            <summary>
            Return a count of all the cached queries by dapper
            </summary>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.GetCachedSQL(System.Int32)">
            <summary>
            Return a list of all the queries cached by dapper
            </summary>
            <param name="ignoreHitCountAbove"></param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.GetHashCollissions">
            <summary>
            Deep diagnostics only: find any hash collisions in the cache
            </summary>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.AddTypeMap(System.Type,System.Data.DbType)">
            <summary>
            Configire the specified type to be mapped to a given db-type
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.LookupDbType(System.Type,System.String)">
            <summary>
            Lookups the type of the database.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Member type cannot be used as a parameter value</exception>
        </member>
        <member name="T:Serenity.Data.SqlMapper.Identity">
            <summary>
            Identity of a cached query in Dapper, used for extensability
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.Identity.ForDynamicParameters(System.Type)">
            <summary>
            Create an identity for use with DynamicParameters, internal use only
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.Identity.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:Serenity.Data.SqlMapper.Identity.sql">
            <summary>
            The sql
            </summary>
        </member>
        <member name="F:Serenity.Data.SqlMapper.Identity.commandType">
            <summary>
            The command type 
            </summary>
        </member>
        <member name="F:Serenity.Data.SqlMapper.Identity.hashCode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Serenity.Data.SqlMapper.Identity.gridIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:Serenity.Data.SqlMapper.Identity.type">
            <summary>
            
            </summary>
        </member>
        <member name="F:Serenity.Data.SqlMapper.Identity.connectionString">
            <summary>
            
            </summary>
        </member>
        <member name="F:Serenity.Data.SqlMapper.Identity.parametersType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.Identity.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.Identity.Equals(Serenity.Data.SqlMapper.Identity)">
            <summary>
            Compare 2 Identity objects
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.Execute(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL  
            </summary>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.Query(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a list of dynamic objects, reader is closed after the call
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.Query(System.Data.IDbConnection,Serenity.Data.ISqlQuery,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a list of dynamic objects, reader is closed after the call
            </summary>
            <param name="cnn">The connection.</param>
            <param name="sql">The SQL.</param>
            <param name="transaction">The transaction.</param>
            <param name="buffered">if set to <c>true</c> [buffered].</param>
            <param name="commandTimeout">The command timeout.</param>
            <param name="commandType">Type of the command.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.Query``1(System.Data.IDbConnection,Serenity.Data.ISqlQuery,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.Query``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.QueryMultiple(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.QueryInternal``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a typed list of objects, reader is closed after the call
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.Query``3(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst">The first type in the recordset</typeparam>
            <typeparam name="TSecond">The second type in the recordset</typeparam>
            <typeparam name="TReturn">The return type</typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.Query``4(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.Query``5(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 4 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.Query``6(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 5 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.Query``7(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 6 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TSixth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.Query``8(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 7 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TSixth"></typeparam>
            <typeparam name="TSeventh"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.ReadChar(System.Object)">
            <summary>
            Internal use only
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.ReadNullableChar(System.Object)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.FindOrAddParameter(System.Data.IDataParameterCollection,System.Data.IDbCommand,System.String)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.PackListParameters(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.CreateParamInfoGenerator(Serenity.Data.SqlMapper.Identity,System.Boolean)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.GetTypeMap(System.Type)">
            <summary>
            Gets type-map for the given type
            </summary>
            <returns>Type map implementation, DefaultTypeMap instance if no override present</returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.SetTypeMap(System.Type,Serenity.Data.SqlMapper.ITypeMap)">
            <summary>
            Set custom mapping for type deserializers
            </summary>
            <param name="type">Entity type to override</param>
            <param name="map">Mapping rules impementation, null to remove custom map</param>
        </member>
        <member name="M:Serenity.Data.SqlMapper.GetTypeDeserializer(System.Type,System.Data.IDataReader,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Internal use only
            </summary>
            <param name="type"></param>
            <param name="reader"></param>
            <param name="startBound"></param>
            <param name="length"></param>
            <param name="returnNullIfFirstMissing"></param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.ThrowDataException(System.Exception,System.Int32,System.Data.IDataReader)">
            <summary>
            Throws a data exception, only used internally
            </summary>
            <param name="ex"></param>
            <param name="index"></param>
            <param name="reader"></param>
        </member>
        <member name="P:Serenity.Data.SqlMapper.ConnectionStringComparer">
            <summary>
            How should connection strings be compared for equivalence? Defaults to StringComparer.Ordinal.
            Providing a custom implementation can be useful for allowing multi-tenancy databases with identical
            schema to share startegies. Note that usual equivalence rules apply: any equivalent connection strings
            <b>MUST</b> yield the same hash-code.
            </summary>
        </member>
        <member name="T:Serenity.Data.SqlMapper.GridReader">
            <summary>
            The grid reader provides interfaces for reading multiple result sets from a Dapper query 
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.GridReader.Read(System.Boolean)">
            <summary>
            Read the next grid of results, returned as a dynamic object
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.GridReader.Read``1(System.Boolean)">
            <summary>
            Read the next grid of results
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.GridReader.Read``3(System.Func{``0,``1,``2},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single recordset on the grid
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.GridReader.Read``4(System.Func{``0,``1,``2,``3},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single recordset on the grid
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.GridReader.Read``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.GridReader.Read``6(System.Func{``0,``1,``2,``3,``4,``5},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.GridReader.Read``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.GridReader.Read``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.GridReader.Dispose">
            <summary>
            Dispose the grid, closing and disposing both the underlying reader and command.
            </summary>
        </member>
        <member name="T:Serenity.Data.DynamicParameters">
            <summary>
            A bag of parameters that can be passed to the Dapper Query and Execute methods
            </summary>
        </member>
        <member name="M:Serenity.Data.DynamicParameters.#ctor">
            <summary>
            construct a dynamic parameter bag
            </summary>
        </member>
        <member name="M:Serenity.Data.DynamicParameters.#ctor(System.Object)">
            <summary>
            construct a dynamic parameter bag
            </summary>
            <param name="template">can be an anonymous type or a DynamicParameters bag</param>
        </member>
        <member name="M:Serenity.Data.DynamicParameters.AddDynamicParams(System.Object)">
            <summary>
            Append a whole object full of params to the dynamic
            EG: AddDynamicParams(new {A = 1, B = 2}) // will add property A and B to the dynamic
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:Serenity.Data.DynamicParameters.Add(System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Data.ParameterDirection},System.Nullable{System.Int32})">
            <summary>
            Add a parameter to this dynamic parameter list
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="dbType"></param>
            <param name="direction"></param>
            <param name="size"></param>
        </member>
        <member name="M:Serenity.Data.DynamicParameters.AddParameters(System.Data.IDbCommand,Serenity.Data.SqlMapper.Identity)">
            <summary>
            Add all the parameters needed to the command just before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="identity">Information about the query</param>
        </member>
        <member name="P:Serenity.Data.DynamicParameters.ParameterNames">
            <summary>
            All the names of the param in the bag, use Get to yank them out
            </summary>
        </member>
        <member name="M:Serenity.Data.DynamicParameters.Get``1(System.String)">
            <summary>
            Get the value of a parameter
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns>The value, note DBNull.Value is not returned, instead the value is returned as null</returns>
        </member>
        <member name="T:Serenity.Data.DbString">
            <summary>
            This class represents a SQL string, it can be used if you need to denote your parameter is a Char vs VarChar vs nVarChar vs nChar
            </summary>
        </member>
        <member name="M:Serenity.Data.DbString.#ctor">
            <summary>
            Create a new DbString
            </summary>
        </member>
        <member name="P:Serenity.Data.DbString.IsAnsi">
            <summary>
            Ansi vs Unicode 
            </summary>
        </member>
        <member name="P:Serenity.Data.DbString.IsFixedLength">
            <summary>
            Fixed length 
            </summary>
        </member>
        <member name="P:Serenity.Data.DbString.Length">
            <summary>
            Length of the string -1 for max
            </summary>
        </member>
        <member name="P:Serenity.Data.DbString.Value">
            <summary>
            The value of the string
            </summary>
        </member>
        <member name="M:Serenity.Data.DbString.AddParameter(System.Data.IDbCommand,System.String)">
            <summary>
            Add the parameter to the command... internal use only
            </summary>
            <param name="command"></param>
            <param name="name"></param>
        </member>
        <member name="T:Serenity.Data.FeatureSupport">
            <summary>
            Handles variances in features per DBMS
            </summary>
        </member>
        <member name="F:Serenity.Data.FeatureSupport.FeatureList">
            <summary>
            Dictionary of supported features index by connection type name
            </summary>
        </member>
        <member name="M:Serenity.Data.FeatureSupport.Get(System.Data.IDbConnection)">
            <summary>
            Gets the featureset based on the passed connection
            </summary>
        </member>
        <member name="P:Serenity.Data.FeatureSupport.Arrays">
            <summary>
            True if the db supports array columns e.g. Postgresql
            </summary>
        </member>
        <member name="T:Serenity.Data.SimpleMemberMap">
            <summary>
            Represents simple memeber map for one of target parameter or property or field to source DataReader column
            </summary>
        </member>
        <member name="M:Serenity.Data.SimpleMemberMap.#ctor(System.String,System.Reflection.PropertyInfo)">
            <summary>
            Creates instance for simple property mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="property">Target property</param>
        </member>
        <member name="M:Serenity.Data.SimpleMemberMap.#ctor(System.String,System.Reflection.FieldInfo)">
            <summary>
            Creates instance for simple field mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="field">Target property</param>
        </member>
        <member name="M:Serenity.Data.SimpleMemberMap.#ctor(System.String,System.Reflection.ParameterInfo)">
            <summary>
            Creates instance for simple constructor parameter mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="parameter">Target constructor parameter</param>
        </member>
        <member name="P:Serenity.Data.SimpleMemberMap.ColumnName">
            <summary>
            DataReader column name
            </summary>
        </member>
        <member name="P:Serenity.Data.SimpleMemberMap.MemberType">
            <summary>
            Target member type
            </summary>
        </member>
        <member name="P:Serenity.Data.SimpleMemberMap.Property">
            <summary>
            Target property
            </summary>
        </member>
        <member name="P:Serenity.Data.SimpleMemberMap.Field">
            <summary>
            Target field
            </summary>
        </member>
        <member name="P:Serenity.Data.SimpleMemberMap.Parameter">
            <summary>
            Target constructor parameter
            </summary>
        </member>
        <member name="T:Serenity.Data.DefaultTypeMap">
            <summary>
            Represents default type mapping strategy used by Dapper
            </summary>
        </member>
        <member name="M:Serenity.Data.DefaultTypeMap.#ctor(System.Type)">
            <summary>
            Creates default type map
            </summary>
            <param name="type">Entity type</param>
        </member>
        <member name="M:Serenity.Data.DefaultTypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Finds best constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Matching constructor or default one</returns>
        </member>
        <member name="M:Serenity.Data.DefaultTypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Gets mapping for constructor parameter
            </summary>
            <param name="constructor">Constructor to resolve</param>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="M:Serenity.Data.DefaultTypeMap.GetMember(System.String)">
            <summary>
            Gets member mapping for column
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="T:Serenity.Data.CustomPropertyTypeMap">
            <summary>
            Implements custom property mapping by user provided criteria (usually presence of some custom attribute with column to member mapping)
            </summary>
        </member>
        <member name="M:Serenity.Data.CustomPropertyTypeMap.#ctor(System.Type,System.Func{System.Type,System.String,System.Reflection.PropertyInfo})">
            <summary>
            Creates custom property mapping
            </summary>
            <param name="type">Target entity type</param>
            <param name="propertySelector">Property selector based on target type and DataReader column name</param>
        </member>
        <member name="M:Serenity.Data.CustomPropertyTypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Always returns default constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Default constructor</returns>
        </member>
        <member name="M:Serenity.Data.CustomPropertyTypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Not impelmeneted as far as default constructor used for all cases
            </summary>
            <param name="constructor"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.CustomPropertyTypeMap.GetMember(System.String)">
            <summary>
            Returns property based on selector strategy
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Poperty member map</returns>
        </member>
        <member name="T:Serenity.Data.ExpectedRows">
            <summary>
            Expected number of rows enumeration for SQL Update / Delete operation.
            This enumeration is used to avoid updating/deleting multiple records
            by mistake when forgot to add a WHERE statement.
            </summary>
        </member>
        <member name="F:Serenity.Data.ExpectedRows.One">
            <summary>
            Query should only affect One row, not zero or more
            </summary>
        </member>
        <member name="F:Serenity.Data.ExpectedRows.ZeroOrOne">
            <summary>
            Query may affect zero or one row, not more
            </summary>
        </member>
        <member name="F:Serenity.Data.ExpectedRows.Ignore">
            <summary>
            Ignore number of affected rows
            </summary>
        </member>
        <member name="T:Serenity.Data.ReaderCallBack">
            <summary>
            A delegate that gets a data reader parameter
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="T:Serenity.Data.Sql">
            <summary>
            Contains SQL expression generation helpers
            </summary>
        </member>
        <member name="M:Serenity.Data.Sql.Sum(System.String)">
            <summary>
            Creates a SUM() expression
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">field is null or empty</exception>
        </member>
        <member name="M:Serenity.Data.Sql.Count(System.String)">
            <summary>
            Creates a COUNT() expression
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">field is null or empty</exception>
        </member>
        <member name="M:Serenity.Data.Sql.Count(System.Int32,System.String)">
            <summary>
            Creates a COUNT() expression
            </summary>
            <param name="joinNumber">The join number.</param>
            <param name="field">The field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">field is null or empty</exception>
        </member>
        <member name="M:Serenity.Data.Sql.Count">
            <summary>
            Returns COUNT(*)
            </summary>
            <returns>COUNT(*)</returns>
        </member>
        <member name="M:Serenity.Data.Sql.Coalesce(System.String[])">
            <summary>
            Creates a COALESCE() expression.
            </summary>
            <param name="statements">The statements.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">fields is null or empty</exception>
        </member>
        <member name="M:Serenity.Data.Sql.Coalesce(Serenity.Data.IQueryWithParams,System.Object[])">
            <summary>
            Creates a COALESCE() expression while adding values to specified query as params.
            </summary>
            <param name="query">The query.</param>
            <param name="values">The values.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">values is null or empty</exception>
        </member>
        <member name="M:Serenity.Data.Sql.Min(System.String)">
            <summary>
            Creates a MIN() expression
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">field is null or empty</exception>
        </member>
        <member name="M:Serenity.Data.Sql.Min(System.Int32,System.String)">
            <summary>
            Creates a MIN() expression.
            </summary>
            <param name="joinNumber">The join number.</param>
            <param name="field">The field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">field is null or empty</exception>
        </member>
        <member name="M:Serenity.Data.Sql.Max(System.String)">
            <summary>
            Creates a MAX() expression.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">field is null or empty</exception>
        </member>
        <member name="M:Serenity.Data.Sql.Max(System.Int32,System.String)">
            <summary>
            Creates a MAX() expression.
            </summary>
            <param name="joinNumber">The join number.</param>
            <param name="field">The field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">field is null or empty</exception>
        </member>
        <member name="M:Serenity.Data.Sql.Sum(System.Int32,System.String)">
            <summary>
            Creates a SUM() expression.
            </summary>
            <param name="joinNumber">The join number.</param>
            <param name="field">The field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">field is null or empty.</exception>
        </member>
        <member name="M:Serenity.Data.Sql.Avg(System.String)">
            <summary>
            Creates a AVG expression.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">field is null or empty</exception>
        </member>
        <member name="M:Serenity.Data.Sql.Avg(System.Int32,System.String)">
            <summary>
            Creates a AVG() expression.
            </summary>
            <param name="joinNumber">The join number.</param>
            <param name="field">The field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">field is null or empty</exception>
        </member>
        <member name="M:Serenity.Data.Sql.Convert(System.String,System.String)">
            <summary>
            Creates a Convert() expression.
            </summary>
            <param name="type">The type.</param>
            <param name="field">The field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            type or field is null or empty.
            </exception>
        </member>
        <member name="M:Serenity.Data.Sql.SubString(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a SUBSTRING() expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">The end index.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">expression</exception>
        </member>
        <member name="M:Serenity.Data.Sql.Case(Serenity.Data.IQueryWithParams,System.Action{Serenity.Data.Sql.CaseBuilder})">
            <summary>
            Creates a CASE() expression.
            </summary>
            <param name="query">The query.</param>
            <param name="builder">The action which will receive CASE statement builder.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Sql.Case(System.String,System.String[],System.String)">
            <summary>
            Builds a CASE statement.
            </summary>
            <param name="condition">Optional condition. For example for statement "CASE Field1 WHEN 1 THEN 2 END", condition would be "Field1"</param>
            <param name="whenThenPairs">Pairs of WHEN/THEN statements like ["A = 1", "'Result1'", "A = 2", "'Result2'"] for a case
            statement like CASE WHEN A = 1 THEN 'Result1' WHEN A = 2 THEN 'Result2' END.</param>
            <param name="elseStatement">Optional ELSE statement</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">whenThenPairs is empty or contains odd number of elements</exception>
        </member>
        <member name="T:Serenity.Data.Sql.CaseBuilder">
            <summary>
            CASE statement builder
            </summary>
        </member>
        <member name="M:Serenity.Data.Sql.CaseBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.Sql.CaseBuilder"/> class.
            </summary>
        </member>
        <member name="M:Serenity.Data.Sql.CaseBuilder.WhenThen(Serenity.ICriteria,System.Object)">
            <summary>
            Adds a WHEN THEN part
            </summary>
            <param name="when">The when.</param>
            <param name="then">The then.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Sql.CaseBuilder.When(Serenity.ICriteria)">
            <summary>
            Adds a WHEN part
            </summary>
            <param name="when">The when.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Sql.CaseBuilder.Then(System.Object)">
            <summary>
            Adds a THEN PART
            </summary>
            <param name="then">The then.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Sql.CaseBuilder.Else(System.Object)">
            <summary>
            Adds a ELSE part
            </summary>
            <param name="elseValue">The else value.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Internal else value is not null</exception>
        </member>
        <member name="M:Serenity.Data.Sql.CaseBuilder.ToString(Serenity.Data.IQueryWithParams)">
            <summary>
            Converts to string.
            </summary>
            <param name="query">The query.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            There should be at least one WHEN/THEN pair.
            or
            WHEN/THEN pairs doesn't match.
            </exception>
        </member>
        <member name="T:Serenity.Data.SqlCommandDumper">
            <summary>
            http://stackoverflow.com/questions/265192/get-the-generated-sql-statement-from-a-sqlcommand-object (answer by Mitch)
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlCommandDumper.GetCommandText(System.Data.SqlClient.SqlCommand)">
            <summary>
            Gets the command text.
            </summary>
            <param name="sqc">The SQL command.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Data.SqlConversions">
            <summary>
            Value to SQL constant expression conversions
            </summary>
        </member>
        <member name="F:Serenity.Data.SqlConversions.Null">
            <summary>
            The NULL constant
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlConversions.ToSql(System.Nullable{System.Boolean})">
            <summary>
            Converts the value to sql.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlConversions.ToSql(System.Nullable{System.Double})">
            <summary>
            Converts the value to sql.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlConversions.ToSql(System.Nullable{System.Decimal})">
            <summary>
            Converts the value to sql.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlConversions.ToSql(System.Nullable{System.Int64})">
            <summary>
            Converts the value to sql.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlConversions.ToSql(System.Nullable{System.DateTime},Serenity.Data.ISqlDialect)">
            <summary>
            Converts the value to sql.
            </summary>
            <param name="value">The value.</param>
            <param name="dialect">The dialect.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlConversions.ToSql(System.DateTime,Serenity.Data.ISqlDialect)">
            <summary>
            Converts the value to sql.
            </summary>
            <param name="value">The value.</param>
            <param name="dialect">The dialect.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlConversions.ToSqlDate(System.Nullable{System.DateTime},Serenity.Data.ISqlDialect)">
            <summary>
            Converts the value to sql date.
            </summary>
            <param name="value">The value.</param>
            <param name="dialect">The dialect.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlConversions.ToSqlDate(System.DateTime,Serenity.Data.ISqlDialect)">
            <summary>
            Converts the value to sql date.
            </summary>
            <param name="value">The value.</param>
            <param name="dialect">The dialect.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlConversions.ToSqlTime(System.Nullable{System.DateTime},Serenity.Data.ISqlDialect)">
            <summary>
            Converts the value to sql time.
            </summary>
            <param name="value">The value.</param>
            <param name="dialect">The dialect.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlConversions.ToSqlTime(System.DateTime,Serenity.Data.ISqlDialect)">
            <summary>
            Converts the value to sql time.
            </summary>
            <param name="value">The value.</param>
            <param name="dialect">The dialect.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlConversions.ToSql(System.Nullable{System.Guid})">
            <summary>
            Converts the value to sql.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlConversions.ToSql(System.String,Serenity.Data.ISqlDialect)">
            <summary>
            Converts the value to sql.
            </summary>
            <param name="value">The value.</param>
            <param name="dialect">The dialect.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlConversions.ToSql(System.Nullable{System.Int32})">
            <summary>
            Converts the value to sql.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Data.SqlDebugDumper">
            <summary>
            Formats a debug version of a query, replacing parameters with SQL constants, fixing brackets, database caret references etc.
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlDebugDumper.Dump(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},Serenity.Data.ISqlDialect)">
            <summary>
            Dumps the specified SQL.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="parameters">The parameters.</param>
            <param name="dialect">The dialect.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Data.SqlHelper">
            <summary>
            Contains static SQL related helper functions and extensions.
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlHelper.IsDatabaseException(System.Exception)">
            <summary>
            Determines whether the exception is a database exception.
            </summary>
            <param name="e">The exception.</param>
            <returns>
              <c>true</c> if database exception; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.ExecuteAndGetID(Serenity.Data.SqlInsert,System.Data.IDbConnection)">
            <summary>
            Executes the query and returns the generated identity value.
            Only works for auto incremented fields, not GUIDs.
            </summary>
            <param name="query">The query.</param>
            <param name="connection">The connection.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">query.IdentityColumn is null</exception>
            <exception cref="T:System.NotImplementedException">The connection dialect doesn't support returning inserted identity.</exception>
        </member>
        <member name="M:Serenity.Data.SqlHelper.Execute(Serenity.Data.SqlInsert,System.Data.IDbConnection)">
            <summary>
            Executes the specified query on connection.
            </summary>
            <param name="query">The query.</param>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:Serenity.Data.SqlHelper.Execute(Serenity.Data.SqlInsert,System.Data.IDbConnection,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Executes the query on connection with specified params.
            </summary>
            <param name="query">The query.</param>
            <param name="connection">The connection.</param>
            <param name="param">The parameters.</param>
        </member>
        <member name="M:Serenity.Data.SqlHelper.Execute(Serenity.Data.SqlUpdate,System.Data.IDbConnection,Serenity.Data.ExpectedRows)">
            <summary>
            Executes the specified update query on connection and returns number of affected rows.
            </summary>
            <param name="query">The query.</param>
            <param name="connection">The connection.</param>
            <param name="expectedRows">The expected rows. Used to validate expected number of affected rows.</param>
            <returns>Number of affected rows.</returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.Execute(Serenity.Data.SqlDelete,System.Data.IDbConnection,Serenity.Data.ExpectedRows)">
            <summary>
            Executes the specified delete query on connection and returns number of affected rows.
            </summary>
            <param name="query">The query.</param>
            <param name="connection">The connection.</param>
            <param name="expectedRows">The expected rows. Used to validate expected number of affected rows.</param>
            <returns>
            Number of affected rows.
            </returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.Execute(Serenity.Data.SqlDelete,System.Data.IDbConnection,System.Collections.Generic.Dictionary{System.String,System.Object},Serenity.Data.ExpectedRows)">
            <summary>
            Executes the specified delete query on connection and returns number of affected rows.
            </summary>
            <param name="query">The query.</param>
            <param name="connection">The connection.</param>
            <param name="param">The parameters.</param>
            <param name="expectedRows">The expected rows. Used to validate expected number of affected rows.</param>
            <returns>
            Number of affected rows.
            </returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.ExecuteReader(Serenity.Data.SqlQuery,System.Data.IDbConnection)">
            <summary>
            Executes the query.
            </summary>
            <param name="query">The query.</param>
            <param name="connection">The connection.</param>
            <returns>A data reader with results.</returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.ExecuteReader(Serenity.Data.SqlQuery,System.Data.IDbConnection,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Executes the query.
            </summary>
            <param name="query">The query.</param>
            <param name="connection">The connection.</param>
            <param name="param">The parameters.</param>
            <returns>A data reader with results</returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.NewCommand(System.Data.IDbConnection,System.String)">
            <summary>
            Creates a new command.
            </summary>
            <param name="connection">The connection.</param>
            <param name="commandText">The command text.</param>
            <returns>A new command with specified command text</returns>
            <exception cref="T:System.ArgumentNullException">connection</exception>
        </member>
        <member name="M:Serenity.Data.SqlHelper.FixCommandText(System.String,Serenity.Data.ISqlDialect)">
            <summary>
            Fixes the command text for target dialect by replacing brackets ([]), and parameter prefixes (@).
            </summary>
            <param name="commandText">The command text.</param>
            <param name="dialect">The dialect.</param>
            <returns>Fixed query.</returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.NewCommand(System.Data.IDbConnection,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates new command.
            </summary>
            <param name="connection">The connection.</param>
            <param name="commandText">The command text.</param>
            <param name="param">The parameters.</param>
            <returns>New command with specified command text and parameters</returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.FixParamType(System.Object)">
            <summary>
            Fixes the type of the parameter to something suitable as SQL parameter.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.AddParamWithValue(System.Data.Common.DbCommand,System.String,System.Object,Serenity.Data.ISqlDialect)">
            <summary>
            Adds the parameter with value to the target command.
            </summary>
            <param name="command">The command.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="dialect">The dialect.</param>
            <returns>New parameter</returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.CheckConnectionPoolException(System.Data.IDbConnection,System.Exception)">
            <summary>
            Checks for the connection pool exception.
            </summary>
            <param name="connection">The connection.</param>
            <param name="exception">The exception.</param>
            <returns>True if exception is 10054, e.g. connection pool.</returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.ExecuteNonQuery(System.Data.IDbCommand)">
            <summary>
            Executes the SQL statement, and returns affected rows.
            </summary>
            <param name="command">The command.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            command is null or command.Connection is null.
            </exception>
        </member>
        <member name="M:Serenity.Data.SqlHelper.ExecuteNonQuery(System.Data.IDbConnection,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes the statement
            </summary>
            <param name="connection">The connection.</param>
            <param name="commandText">The command text.</param>
            <param name="param">The parameters.</param>
            <returns>Number of affected rows</returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.ExecuteNonQuery(System.Data.IDbConnection,System.String)">
            <summary>
            Executes the statement.
            </summary>
            <param name="connection">The connection.</param>
            <param name="commandText">The command text.</param>
            <returns>Number of affected rows</returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.ExecuteScalar(System.Data.IDbConnection,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes the statement returning a scalar value.
            </summary>
            <param name="connection">The connection.</param>
            <param name="commandText">The command text.</param>
            <param name="param">The parameters.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">connection</exception>
        </member>
        <member name="M:Serenity.Data.SqlHelper.ExecuteScalar(System.Data.IDbConnection,System.String)">
            <summary>
            Executes the statement returning a scalar value.
            </summary>
            <param name="connection">The connection.</param>
            <param name="commandText">The command text.</param>
            <returns>Scalar value</returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.ExecuteScalar(System.Data.IDbConnection,Serenity.Data.SqlQuery)">
            <summary>
            Executes the statement returning a scalar value.
            </summary>
            <param name="connection">The connection.</param>
            <param name="selectQuery">The select query.</param>
            <returns>Scalar value</returns>
            <exception cref="T:System.ArgumentNullException">selectQuery is null</exception>
        </member>
        <member name="M:Serenity.Data.SqlHelper.ExecuteScalar(System.Data.IDbConnection,Serenity.Data.SqlQuery,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Executes the statement returning a scalar value.
            </summary>
            <param name="connection">The connection.</param>
            <param name="selectQuery">The select query.</param>
            <param name="param">The parameters.</param>
            <returns>
            Scalar value
            </returns>
            <exception cref="T:System.ArgumentNullException">selectQuery is null</exception>
        </member>
        <member name="M:Serenity.Data.SqlHelper.LogCommand(System.String,System.Data.IDbCommand)">
            <summary>
            Logs the command.
            </summary>
            <param name="type">The type.</param>
            <param name="command">The command.</param>
        </member>
        <member name="M:Serenity.Data.SqlHelper.ExecuteReader(System.Data.IDbConnection,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes the command returning a data reader.
            </summary>
            <param name="connection">The connection.</param>
            <param name="commandText">The command text.</param>
            <param name="param">The parameters.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">connection is null</exception>
        </member>
        <member name="M:Serenity.Data.SqlHelper.ExecuteReader(System.Data.IDbConnection,System.String)">
            <summary>
            Executes the statement returning a data reader.
            </summary>
            <param name="connection">The connection.</param>
            <param name="commandText">The command text.</param>
            <returns>Data reader with results</returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.ExecuteReader(System.Data.IDbConnection,Serenity.Data.SqlQuery)">
            <summary>
            Executes the statement returning a data reader.
            </summary>
            <param name="connection">The connection.</param>
            <param name="query">The query.</param>
            <returns>
            Data reader with results
            </returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.ExecuteReader(System.Data.IDbConnection,Serenity.Data.SqlQuery,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Executes the statement returning a data reader.
            </summary>
            <param name="connection">The connection.</param>
            <param name="query">The query.</param>
            <param name="param">The parameters.</param>
            <returns>
            Data reader with results
            </returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.Exists(Serenity.Data.SqlQuery,System.Data.IDbConnection)">
            <summary>
            Executes the query returning true if it has at least one result.
            </summary>
            <param name="query">The query.</param>
            <param name="connection">The connection.</param>
            <returns>True if query returns one result.</returns>
        </member>
        <member name="T:Serenity.Data.SqlSettings">
            <summary>
            Global SQL settings
            </summary>
        </member>
        <member name="P:Serenity.Data.SqlSettings.AutoQuotedIdentifiers">
            <summary>
            Gets or sets a value indicating whether to automatically quote identifiers.
            </summary>
            <value>
              <c>true</c> if should automatically quote identifiers; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Data.SqlSettings.DefaultCommandTimeout">
            <summary>
            Gets or sets the default command timeout.
            </summary>
            <value>
            The default command timeout.
            </value>
        </member>
        <member name="F:Serenity.Data.SqlSettings.DefaultDialect">
            <summary>
            The default dialect
            </summary>
        </member>
        <member name="T:Serenity.Data.SqlSyntax">
            <summary>
            Contains SQL syntax helpers.
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlSyntax.IndexParam(System.Int32)">
            <summary>
              Returns an indexed parameter name like @p123.</summary>
            <param name="param">
              Param index.</param>
            <returns>
              Param name.</returns>
        </member>
        <member name="M:Serenity.Data.SqlSyntax.TableAlias(System.Int32)">
            <summary>
            Creates a table alias like T0
            </summary>
            <param name="joinIndex">Index of the join.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlSyntax.TableAliasDot(System.Int32)">
            <summary>
            Creates a table alias dot like "T0."
            </summary>
            <param name="joinIndex">Index of the join.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlSyntax.IsValidIdentifier(System.String)">
            <summary>
            Determines whether the specified string is a valid SQL identifier.
            </summary>
            <param name="s">The string.</param>
            <returns>
              <c>true</c> if is valid identifier; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Serenity.Data.SqlSyntax.IsValidQuotedIdentifier(System.String)">
            <summary>
            Determines whether the specified string is a valid quoted SQL identifier.
            </summary>
            <param name="s">The string.</param>
            <returns>
              <c>true</c> if valid quoted identifier; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Serenity.Data.SqlSyntax.IsQuoted(System.String)">
            <summary>
            Determines whether the specified string is quoted.
            </summary>
            <param name="s">The s.</param>
            <returns>
              <c>true</c> if the specified string is quoted; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Serenity.Data.SqlSyntax.AutoBracket(System.String)">
            <summary>
            Automatically brackets the string based on SqlSettings.AutoQuotedIdentifier setting.
            </summary>
            <param name="s">The string.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlSyntax.AutoBracketValid(System.String)">
            <summary>
            Automatically brackets the string based on SqlSettings.AutoQuotedIdentifier setting, only if the identifier is valid.
            </summary>
            <param name="s">The string.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlSyntax.Unquote(System.String)">
            <summary>
            Unquotes the specified string.
            </summary>
            <param name="s">The string.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Data.DeltaLister`1">
            <summary>
            Helper class to find differences between to lists for updating
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="M:Serenity.Data.DeltaLister`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Func{`0,System.Nullable{System.Int64}},Serenity.Data.DeltaOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.DeltaLister`1"/> class.
            </summary>
            <param name="oldList">The old list.</param>
            <param name="newList">The new list.</param>
            <param name="getItemId">The get item identifier.</param>
            <param name="options">The options.</param>
            <exception cref="T:System.ArgumentNullException">
            oldList or newList or getItemId or oldItem or oldItemId or newItem is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">newItemId</exception>
            <exception cref="T:System.Data.DuplicateNameException">newItemId</exception>
        </member>
        <member name="P:Serenity.Data.DeltaLister`1.ItemsToDelete">
            <summary>
            Gets the items to delete.
            </summary>
            <value>
            The items to delete.
            </value>
        </member>
        <member name="P:Serenity.Data.DeltaLister`1.ItemsToCreate">
            <summary>
            Gets the items to create.
            </summary>
            <value>
            The items to create.
            </value>
        </member>
        <member name="P:Serenity.Data.DeltaLister`1.ItemsToUpdate">
            <summary>
            Gets the items to update.
            </summary>
            <value>
            The items to update.
            </value>
        </member>
        <member name="T:Serenity.Data.DeltaOptions">
            <summary>
            Delta options flags
            </summary>
        </member>
        <member name="F:Serenity.Data.DeltaOptions.Default">
            <summary>
            The default
            </summary>
        </member>
        <member name="F:Serenity.Data.DeltaOptions.IgnoreInvalidNewId">
            <summary>
            The ignore invalid new identifier
            </summary>
        </member>
        <member name="T:Serenity.Data.OldNewPair`1">
            <summary>
            A pair of old new values
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="M:Serenity.Data.OldNewPair`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.OldNewPair`1"/> struct.
            </summary>
            <param name="o">The o.</param>
            <param name="n">The n.</param>
        </member>
        <member name="P:Serenity.Data.OldNewPair`1.Old">
            <summary>
            Gets the old.
            </summary>
            <value>
            The old.
            </value>
        </member>
        <member name="P:Serenity.Data.OldNewPair`1.New">
            <summary>
            Gets the new.
            </summary>
            <value>
            The new.
            </value>
        </member>
        <member name="T:Serenity.MethodChainingExtensions">
            <summary>
            Contains method chaining extensions
            </summary>
        </member>
        <member name="M:Serenity.MethodChainingExtensions.With``1(``0,System.Action{``0})">
            <summary>
            Allows to reference the call chain object itself without breaking a call chain.
            </summary>
            <param name="chain">Chaining object</param>
            <param name="action">An action that will be called with the chain object as parameter.</param>
            <returns>
            The query itself.</returns>
        </member>
        <member name="M:Serenity.MethodChainingExtensions.With``2(``0,``1,System.Action{``0,``1})">
            <summary>
            Allows to reference the call chain object itself, while declaring
            an inline object without breaking a call chain.
            </summary>
            <param name="chain">Chaining object</param>
            <param name="action">An action that will be called with the chain object as first parameter.</param>
            <param name="param1">An object that will be passed to action as second parameter</param>
            <returns>
            The query itself.</returns>
        </member>
        <member name="M:Serenity.MethodChainingExtensions.With``3(``0,``1,``2,System.Action{``0,``1,``2})">
            <summary>
            Allows to reference the call chain object itself, while declaring
            two inline objects without breaking call chain.
            </summary>
            <param name="chain">Chaining object</param>
            <param name="action">An action that will be called with the chain object as first parameter.</param>
            <param name="param1">An object that will be passed to action as second parameter</param>
            <param name="param2">An object that will be passed to action as third parameter</param>
            <returns>
            The query itself.</returns>
        </member>
        <member name="M:Serenity.MethodChainingExtensions.With``4(``0,``1,``2,``3,System.Action{``0,``1,``2,``3})">
            <summary>
            Allows to reference the call chain object itself, while declaring
            three inline objects without breaking call chain.
            </summary>
            <param name="chain">Chaining object</param> 
            <param name="action">An action that will be called with the chain object as first parameter.</param>
            <param name="param1">An object that will be passed to action as second parameter</param>
            <param name="param2">An object that will be passed to action as third parameter</param>
            <param name="param3">An object that will be passed to action as fourth parameter</param>
            <returns>
            The query itself.</returns>
        </member>
        <member name="M:Serenity.MethodChainingExtensions.With``5(``0,``1,``2,``3,``4,System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Allows to reference the call chain object itself, while declaring
            four inline objects without breaking call chain.
            </summary>
            <param name="chain">Chaining object</param>
            <param name="action">An action that will be called with the chain object as first parameter.</param>
            <param name="param1">An object that will be passed to action as second parameter</param>
            <param name="param2">An object that will be passed to action as third parameter</param>
            <param name="param3">An object that will be passed to action as fourth parameter</param>
            <param name="param4">An object that will be passed to action as fifth parameter</param>
            <returns>
            The query itself.</returns>
        </member>
        <member name="M:Serenity.MethodChainingExtensions.With``6(``0,``1,``2,``3,``4,``5,System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Allows to reference the call chain object itself, while declaring
            five inline objects without breaking call chain.
            </summary>
            <param name="chain">Chaining object</param>
            <param name="action">An action that will be called with the chain object as first parameter.</param>
            <param name="param1">An object that will be passed to action as second parameter</param>
            <param name="param2">An object that will be passed to action as third parameter</param>
            <param name="param3">An object that will be passed to action as fourth parameter</param>
            <param name="param4">An object that will be passed to action as fifth parameter</param>
            <param name="param5">An object that will be passed to action as sixth parameter</param>
            <returns>
            The query itself.</returns>
        </member>
        <member name="M:Serenity.MethodChainingExtensions.With``7(``0,``1,``2,``3,``4,``5,``6,System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Allows to reference the call chain object itself, while declaring
            six inline objects without breaking call chain.
            </summary>
            <param name="chain">Chaining object</param>
            <param name="action">An action that will be called with the chain object as first parameter.</param>
            <param name="param1">An object that will be passed to action as second parameter</param>
            <param name="param2">An object that will be passed to action as third parameter</param>
            <param name="param3">An object that will be passed to action as fourth parameter</param>
            <param name="param4">An object that will be passed to action as fifth parameter</param>
            <param name="param5">An object that will be passed to action as sixth parameter</param>
            <param name="param6">An object that will be passed to action as seventh parameter</param>
            <returns>
            The query itself.</returns>
        </member>
        <member name="M:Serenity.MethodChainingExtensions.With``8(``0,``1,``2,``3,``4,``5,``6,``7,System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Allows to reference the call chain object itself, while declaring
            seven inline objects without breaking call chain.
            </summary>
            <param name="chain">Chaining object</param>
            <param name="action">An action that will be called with the chain object as first parameter.</param>
            <param name="param1">An object that will be passed to action as second parameter</param>
            <param name="param2">An object that will be passed to action as third parameter</param>
            <param name="param3">An object that will be passed to action as fourth parameter</param>
            <param name="param4">An object that will be passed to action as fifth parameter</param>
            <param name="param5">An object that will be passed to action as sixth parameter</param>
            <param name="param6">An object that will be passed to action as seventh parameter</param>
            <param name="param7">An object that will be passed to action as eight parameter</param>
            <returns>
            The query itself.</returns>
        </member>
        <member name="M:Serenity.MethodChainingExtensions.With``9(``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Allows to reference the call chain object itself, while declaring
            seven inline objects without breaking call chain.
            </summary>
            <param name="chain">Chaining object</param>
            <param name="action">An action that will be called with the chain object as first parameter.</param>
            <param name="param1">An object that will be passed to action as second parameter</param>
            <param name="param2">An object that will be passed to action as third parameter</param>
            <param name="param3">An object that will be passed to action as fourth parameter</param>
            <param name="param4">An object that will be passed to action as fifth parameter</param>
            <param name="param5">An object that will be passed to action as sixth parameter</param>
            <param name="param6">An object that will be passed to action as seventh parameter</param>
            <param name="param7">An object that will be passed to action as eight parameter</param>
            <param name="param8">An object that will be passed to action as ninth parameter</param>
            <returns>
            The query itself.</returns>
        </member>
        <member name="M:Serenity.MethodChainingExtensions.With``10(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Allows to reference the call chain object itself, while declaring
            seven inline objects without breaking call chain.
            </summary>
            <param name="chain">Chaining object</param>
            <param name="action">An action that will be called with the chain object as first parameter.</param>
            <param name="param1">An object that will be passed to action as second parameter</param>
            <param name="param2">An object that will be passed to action as third parameter</param>
            <param name="param3">An object that will be passed to action as fourth parameter</param>
            <param name="param4">An object that will be passed to action as fifth parameter</param>
            <param name="param5">An object that will be passed to action as sixth parameter</param>
            <param name="param6">An object that will be passed to action as seventh parameter</param>
            <param name="param7">An object that will be passed to action as eight parameter</param>
            <param name="param8">An object that will be passed to action as ninth parameter</param>
            <param name="param9">An object that will be passed to action as tenth parameter</param>
            <returns>
            The query itself.</returns>
        </member>
        <member name="T:Serenity.Services.ColumnSelection">
            <summary>
            Column selection types for List services
            </summary>
        </member>
        <member name="F:Serenity.Services.ColumnSelection.List">
            <summary>
            List, e.g. only the table columns
            </summary>
        </member>
        <member name="F:Serenity.Services.ColumnSelection.KeyOnly">
            <summary>
            Key Only, e.g. the primary key of the table
            </summary>
        </member>
        <member name="F:Serenity.Services.ColumnSelection.Details">
            <summary>
            Details, e.g. all the fields
            </summary>
        </member>
        <member name="T:Serenity.IChainable">
            <summary>
            Interface for chainable objects, e.g. with functions returning themselves.
            </summary>
        </member>
        <member name="T:Serenity.ICriteria">
            <summary>
            Shared criteria interface
            </summary>
        </member>
        <member name="P:Serenity.ICriteria.IsEmpty">
            <summary>
            Gets a value indicating whether this criteria instance is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Serenity.ICriteria.ToString(Serenity.Data.IQueryWithParams)">
            <summary>
            Converts the criteria to string representation while adding params to the target query.
            </summary>
            <param name="query">The target query to add params to.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Serenity.ICriteria.ToString(System.Text.StringBuilder,Serenity.Data.IQueryWithParams)">
            <summary>
            Converts the criteria to string representation into a string builder, while adding
            its params to the target query.
            </summary>
            <param name="sb">The string builder.</param>
            <param name="query">The target query to add params to.</param>
        </member>
        <member name="M:Serenity.ICriteria.ToStringIgnoreParams">
            <summary>
            Converts the criteria to string while ignoring its params if any.
            ToString() raises an exception if a criteria has params, while this not.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Serenity.Logging.SqlLogger">
            <summary>
            A simple logger that logs to an SQL table.
            </summary>
            <seealso cref="T:Serenity.Abstractions.ILogger" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Serenity.Logging.SqlLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Logging.SqlLogger"/> class.
            </summary>
        </member>
        <member name="M:Serenity.Logging.SqlLogger.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Serenity.Logging.SqlLogger"/> class.
            </summary>
        </member>
        <member name="M:Serenity.Logging.SqlLogger.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Serenity.Logging.SqlLogger.Flush">
            <summary>
            Flushes this instance.
            </summary>
        </member>
        <member name="P:Serenity.Logging.SqlLogger.ConnectionKey">
            <summary>
            Gets or sets the connection key.
            </summary>
            <value>
            The connection key.
            </value>
        </member>
        <member name="P:Serenity.Logging.SqlLogger.InsertCommand">
            <summary>
            Gets or sets the insert command.
            </summary>
            <value>
            The insert command.
            </value>
        </member>
        <member name="M:Serenity.Logging.SqlLogger.Write(Serenity.Logging.LoggingLevel,System.String,System.Exception,System.Type)">
            <summary>
            Writes the specified level log message.
            </summary>
            <param name="level">The level.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Serenity.ICustomValidator">
            <summary>
            Custom validator abstraction
            </summary>
        </member>
        <member name="M:Serenity.ICustomValidator.Validate(Serenity.IValidationContext)">
            <summary>
            Validates value using specified context.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.IValidationContext">
            <summary>
            Validation context abstraction
            </summary>
        </member>
        <member name="P:Serenity.IValidationContext.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:Serenity.IValidationContext.GetFieldValue(System.String)">
            <summary>
            Gets the field value.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns></returns>
        </member>
        <member name="P:Serenity.IValidationContext.Connection">
            <summary>
            Gets the connection.
            </summary>
            <value>
            The connection.
            </value>
        </member>
    </members>
</doc>
