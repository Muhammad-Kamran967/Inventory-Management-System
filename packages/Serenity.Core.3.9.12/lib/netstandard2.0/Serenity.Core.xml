<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Serenity.Core</name>
    </assembly>
    <members>
        <member name="T:Serenity.Authorization">
            <summary>
            Provides a common access point for authorization related services
            </summary>
        </member>
        <member name="P:Serenity.Authorization.IsLoggedIn">
            <summary>
            Returns true if user is logged in.
            </summary>
            <remarks>
            Uses the IAuthorizationService dependency.
            </remarks>
        </member>
        <member name="P:Serenity.Authorization.UserDefinition">
            <summary>
            Returns user definition for currently logged user.
            </summary>
            <remarks>
            Uses IUserRetrieveService to get definition of current user by
            its username.
            </remarks>
        </member>
        <member name="P:Serenity.Authorization.UserId">
            <summary>
            Returns currently logged user ID
            </summary>
            <remarks>
            This is a shortcut to UserDefinition.UserId.
            </remarks>
        </member>
        <member name="P:Serenity.Authorization.Username">
            <summary>
            Returns currently logged username.
            </summary>
            <remarks>Uses IAuthorizationService dependency.</remarks>
        </member>
        <member name="M:Serenity.Authorization.HasPermission(System.String)">
            <summary>
            Returns true if current user has given permission.
            </summary>
            <param name="permission">Permission key (e.g. Administration)</param>
        </member>
        <member name="M:Serenity.Authorization.ValidateLoggedIn">
            <summary>
            Checks if there is a currently logged user and throws a validation error with
            "NotLoggedIn" error code if not.
            </summary>
        </member>
        <member name="M:Serenity.Authorization.ValidatePermission(System.String)">
            <summary>
            Checks if current user has given permission and throws a validation error with 
            "AccessDenied" error code if not.
            </summary>
            <param name="permission"></param>
        </member>
        <member name="T:Serenity.Abstractions.IAuthenticationService">
            <summary>
            Authentication service abstraction
            </summary>
        </member>
        <member name="M:Serenity.Abstractions.IAuthenticationService.Validate(System.String@,System.String)">
            <summary>
            Returns true if username/password pair is correct
            </summary>
        </member>
        <member name="T:Serenity.Abstractions.IAuthorizationService">
            <summary>
            Authorization service abstraction
            </summary>
        </member>
        <member name="P:Serenity.Abstractions.IAuthorizationService.IsLoggedIn">
            <summary>
            True if there is a currenty logged user
            </summary>
        </member>
        <member name="P:Serenity.Abstractions.IAuthorizationService.Username">
            <summary>
            Return currently logged user name
            </summary>
        </member>
        <member name="T:Serenity.Abstractions.IImpersonator">
            <summary>
            Interface for authorization services that supports temporary impersonating
            </summary>
        </member>
        <member name="M:Serenity.Abstractions.IImpersonator.Impersonate(System.String)">
            <summary>
            Temporarily impersonates as a user
            </summary>
            <param name="username">Username to impersonate as</param>
        </member>
        <member name="M:Serenity.Abstractions.IImpersonator.UndoImpersonate">
            <summary>
            Undoes impersonation
            </summary>
        </member>
        <member name="T:Serenity.Abstractions.IPermissionService">
            <summary>
            Permission service abstraction
            </summary>
        </member>
        <member name="M:Serenity.Abstractions.IPermissionService.HasPermission(System.String)">
            <summary>
            Returns true if user has specified permission
            </summary>
            <param name="permission">The permission key (e.g. Administration)</param>
        </member>
        <member name="T:Serenity.Abstractions.IRequestContext">
            <summary>
            Interface for abstraction that should return HttpContext.Current.Items for web requests,
            and null for normal threads.
            </summary>
        </member>
        <member name="P:Serenity.Abstractions.IRequestContext.Items">
            <summary>
            A dictionary that can be used as a request context specific storage
            </summary>
        </member>
        <member name="T:Serenity.Abstractions.ITransientGrantor">
            <summary>
            Interface for permission services that supports granting permissions temporarily
            </summary>
        </member>
        <member name="M:Serenity.Abstractions.ITransientGrantor.Grant(System.String[])">
            <summary>
            Grants specified permissions temporarily (or makes it look like)
            </summary>
            <param name="permissions">List of permission keys</param>
        </member>
        <member name="M:Serenity.Abstractions.ITransientGrantor.GrantAll">
            <summary>
            Grants all permissions temporarily (or makes it look like)
            </summary>
        </member>
        <member name="M:Serenity.Abstractions.ITransientGrantor.UndoGrant">
            <summary>
            Undoes last grant or grant all operation
            </summary>
        </member>
        <member name="T:Serenity.Abstractions.IUserRetrieveService">
            <summary>
            User definition retrieve service abstraction
            </summary>
        </member>
        <member name="M:Serenity.Abstractions.IUserRetrieveService.ById(System.String)">
            <summary>
            Returns user definition for specified user ID or null if doesn't exist.
            </summary>
        </member>
        <member name="M:Serenity.Abstractions.IUserRetrieveService.ByUsername(System.String)">
            <summary>
            Returns user definition for specified username or null if doesn't exist.
            </summary>
        </member>
        <member name="T:Serenity.Abstractions.IDistributedCache">
            <summary>
            An abstraction for distributed cache access. (e.g.: Redis, MemCached, Couchbase)
            </summary>
        </member>
        <member name="M:Serenity.Abstractions.IDistributedCache.Increment(System.String,System.Int32)">
            <summary>
            Increments value with specified key and returns the new value.
            If value doesn't exist, its new value will be 1.
            </summary>
            <param name="key">Key.</param>
            <param name="amount">Increase amount.</param>
            <returns>Increased amount, or 1 if it didn't exist before</returns>
        </member>
        <member name="M:Serenity.Abstractions.IDistributedCache.Get``1(System.String)">
            <summary>
            Reads the value with given key. If value didn't exist in cache, 
            return the default(T) value. 
            </summary>
            <typeparam name="TValue">Value type</typeparam>
            <param name="key">Key</param>
            <remarks>It may raise an exception if the value is not of type TValue.</remarks>
        </member>
        <member name="M:Serenity.Abstractions.IDistributedCache.Set``1(System.String,``0)">
            <summary>
            Writes the value to cache with specified key.
            </summary>
            <typeparam name="TValue">Value type.</typeparam>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Serenity.Abstractions.IDistributedCache.Set``1(System.String,``0,System.TimeSpan)">
            <summary>
            Writes the value to cache with specified key and
            expiration date.
            </summary>
            <typeparam name="TValue">Value type.</typeparam>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <param name="expiration">The time the cached item will be expired on.</param>
        </member>
        <member name="T:Serenity.Abstractions.ILocalCache">
            <summary>
            An abstraction for local cache access (e.g. System.Web.Cache). The 'local' means 
            objects in local memory, so no serialization should be in effect.
            </summary>
        </member>
        <member name="M:Serenity.Abstractions.ILocalCache.Add(System.String,System.Object,System.TimeSpan)">
            <summary>
            Adds a value to cache with a given key
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
            <param name="expiration">Expire time (Use TimeSpan.Zero to hold value with no expiration)</param>
        </member>
        <member name="M:Serenity.Abstractions.ILocalCache.Get``1(System.String)">
            <summary>
            Reads the value with specified key from the local cache.</summary>
            <typeparam name="TItem">Data type</typeparam>
            <param name="key">Key</param>
        </member>
        <member name="M:Serenity.Abstractions.ILocalCache.Remove(System.String)">
            <summary>
            Removes the value with specified key from the local cache. If the value doesn't exist, no error is raised.
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="M:Serenity.Abstractions.ILocalCache.RemoveAll">
            <summary>
            Removes all items from the cache (avoid expect unit tests).
            </summary>
        </member>
        <member name="T:Serenity.Abstractions.IConfigurationManager">
            <summary>
            Abstraction for ConfigurationManager to remove dependency on System.Configuration
            </summary>
        </member>
        <member name="M:Serenity.Abstractions.IConfigurationManager.AppSetting(System.String,System.Type)">
            <summary>
            Gets the app setting with given key.
            </summary>
            <param name="key">The key.</param>
            <param name="settingType">Type of the setting.</param>
            <returns>Loaded setting.</returns>
        </member>
        <member name="M:Serenity.Abstractions.IConfigurationManager.ConnectionString(System.String)">
            <summary>
            Gets the connection string with given key.
            </summary>
            <param name="key">The key.</param>
            <returns>Connection string and its provider type as tuple.</returns>
        </member>
        <member name="T:Serenity.Abstractions.IConfigurationRepository">
            <summary>
            Abstraction for configuration system
            </summary>
        </member>
        <member name="M:Serenity.Abstractions.IConfigurationRepository.Load(System.Type)">
            <summary>
            Loads configuration for the specified setting type.
            Returns an object instance, even if setting is not found.
            </summary>
            <param name="settingType">Setting type</param>
        </member>
        <member name="M:Serenity.Abstractions.IConfigurationRepository.Save(System.Type,System.Object)">
            <summary>
            Saves configuration for the specified setting type.
            </summary>
            <param name="settingType">Setting type</param>
            <param name="value">Setting value</param>
        </member>
        <member name="T:Serenity.Abstractions.DateTimeProvider">
            <summary>
            Date time abstraction for unit tests.
            </summary>
            <seealso cref="T:Serenity.Abstractions.IDateTimeProvider" />
        </member>
        <member name="F:Serenity.Abstractions.DateTimeProvider.StaticProvider">
            <summary>
            The static provider
            </summary>
        </member>
        <member name="P:Serenity.Abstractions.DateTimeProvider.Current">
            <summary>
            Gets the current provider.
            </summary>
            <value>
            The current provider.
            </value>
        </member>
        <member name="P:Serenity.Abstractions.DateTimeProvider.Now">
            <summary>
            Gets the date/time now.
            </summary>
            <value>
            The now.
            </value>
        </member>
        <member name="P:Serenity.Abstractions.DateTimeProvider.Serenity#Abstractions#IDateTimeProvider#Now">
            <summary>
            Gets the now.
            </summary>
            <value>
            The now.
            </value>
        </member>
        <member name="T:Serenity.Abstractions.IDateTimeProvider">
            <summary>
            Date/time abstraction for unit testing.
            </summary>
        </member>
        <member name="P:Serenity.Abstractions.IDateTimeProvider.Now">
            <summary>
            Gets the now.
            </summary>
            <value>
            The now.
            </value>
        </member>
        <member name="T:Serenity.Abstractions.IExceptionLogger">
            <summary>
            Exception logger abstraction
            </summary>
        </member>
        <member name="M:Serenity.Abstractions.IExceptionLogger.Log(System.Exception)">
            <summary>
            Logs the specified exception.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:Serenity.Abstractions.ILocalTextRegistry">
            <summary>
            Abstraction for local text registry which stores translations for local text keys. 
            </summary>
        </member>
        <member name="M:Serenity.Abstractions.ILocalTextRegistry.TryGet(System.String,System.String)">
            <summary>
            Returns localized representation which corresponds to the local text key or the key itself if none 
            found in the registry.
            </summary>
            <param name="key">Local text key (e.g. Enums.Month.June)</param>
            <param name="languageID">Language identifier</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Abstractions.ILocalTextRegistry.Add(System.String,System.String,System.String)">
            <summary>
            Adds a local text entry to the registry
            </summary>
            <param name="languageID">Language ID (e.g. en-US, tr-TR)</param>
            <param name="key">Local text key</param>
            <param name="text">Translated text</param>
        </member>
        <member name="T:Serenity.Abstractions.ILogger">
            <summary>
            Logger abstraction
            </summary>
        </member>
        <member name="M:Serenity.Abstractions.ILogger.Write(Serenity.Logging.LoggingLevel,System.String,System.Exception,System.Type)">
            <summary>
            Writes the specified level log message.
            </summary>
            <param name="level">The level.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Serenity.Web.ImpersonatingAuthorizationService">
            <summary>
            Adds impersonation support to any IAuthorizationService implementation
            </summary>
        </member>
        <member name="M:Serenity.Web.ImpersonatingAuthorizationService.#ctor(Serenity.Abstractions.IAuthorizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Web.ImpersonatingAuthorizationService"/> class
            that wraps passed authorization service and adds impersonation support.
            </summary>
            <param name="authorizationService">The authorization service to wrap with impersonation support.</param>
        </member>
        <member name="P:Serenity.Web.ImpersonatingAuthorizationService.IsLoggedIn">
            <summary>
            True if there is a currenty logged user
            </summary>
        </member>
        <member name="P:Serenity.Web.ImpersonatingAuthorizationService.Username">
            <summary>
            Return currently logged user name
            </summary>
        </member>
        <member name="M:Serenity.Web.ImpersonatingAuthorizationService.Impersonate(System.String)">
            <summary>
            Temporarily impersonates as a user
            </summary>
            <param name="username">Username to impersonate as</param>
        </member>
        <member name="M:Serenity.Web.ImpersonatingAuthorizationService.UndoImpersonate">
            <summary>
            Undoes impersonation
            </summary>
            <exception cref="T:System.InvalidOperationException">UndoImpersonate() is called while impersonation stack is empty!</exception>
        </member>
        <member name="T:Serenity.Web.LogicOperatorPermissionService">
            <summary>
            Adds AND OR operator support to any IPermissionService implementation
            </summary>
            <remarks>
            Register this class in your application start, to allow !, |, &amp;, () operators
            in your permission services, e.g.
            <code>
            registrar.RegisterInstance&lt;IPermissionService&gt;(new LogicOperatorPermissionService(new MyPermissionService()))
            </code>
            </remarks>
        </member>
        <member name="M:Serenity.Web.LogicOperatorPermissionService.#ctor(Serenity.Abstractions.IPermissionService)">
            <summary>
            Creates a new LogicOperatorPermissionService wrapping passed IPermissionService
            </summary>
            <param name="permissionService">Permission service to wrap with AND/OR functionality</param>
        </member>
        <member name="M:Serenity.Web.LogicOperatorPermissionService.HasPermission(System.String)">
            <summary>
            Returns true if user has specified permission
            </summary>
            <param name="permission">Permission to check</param>
            <returns>True if user has specified permission</returns>
        </member>
        <member name="T:Serenity.Web.TransientGrantingPermissionService">
            <summary>
            Adds temporary granting support to any IPermissionService implementation
            </summary>
            <remarks>
            Register this class in your application start, to allow granting permissions temporarily.
            <code>
            registrar.RegisterInstance&lt;IPermissionService&gt;(new TransientGrantingPermissionService(new MyPermissionService()))
            </code>
            </remarks> 
        </member>
        <member name="M:Serenity.Web.TransientGrantingPermissionService.#ctor(Serenity.Abstractions.IPermissionService)">
            <summary>
            Creates a new TransientGrantingPermissionService wrapping passed service
            </summary>
            <param name="permissionService">Permission service to wrap with transient granting ability</param>
        </member>
        <member name="M:Serenity.Web.TransientGrantingPermissionService.HasPermission(System.String)">
            <summary>
            Checks if user has specified permission
            </summary>
            <param name="permission">Permission to check</param>
            <returns>True if user has the permission</returns>
        </member>
        <member name="M:Serenity.Web.TransientGrantingPermissionService.Grant(System.String[])">
            <summary>
            Grants specified permissions temporarily (or makes it look like)
            </summary>
            <param name="permissions">List of permission keys</param>
        </member>
        <member name="M:Serenity.Web.TransientGrantingPermissionService.GrantAll">
            <summary>
            Grants all permissions temporarily (or makes it look like)
            </summary>
        </member>
        <member name="M:Serenity.Web.TransientGrantingPermissionService.UndoGrant">
            <summary>
            Undoes last grant or grant all operation
            </summary>
        </member>
        <member name="T:Serenity.Web.ImageScaleMode">
            <summary>
              Thumbnail scaling modes</summary>
        </member>
        <member name="F:Serenity.Web.ImageScaleMode.StretchToFit">
            <summary>
              In this mode, thumbnail is generated just at the size requested.
              If thumbnail width or height specified only, than thumbnail will have same aspect ratio,
              otherwise if thumbnail and source is not at same ratio, thumbnail will have a 
              narrowed or widened look.</summary>
        </member>
        <member name="F:Serenity.Web.ImageScaleMode.PreserveRatioNoFill">
            <summary>
              Try to keep original aspect ratio of source image while generating the thumbnail.
              If only width or height is set, it works same way with StretchToFit.
              When both set, thumbnail width or height will be decreased suitably.</summary>
        </member>
        <member name="F:Serenity.Web.ImageScaleMode.PreserveRatioWithFill">
            <summary>
              It is logically same with PreserveRatioNoFill but this time instead of decreasing
              thumbnail width or height, empty parts are filled.</summary>
        </member>
        <member name="F:Serenity.Web.ImageScaleMode.CropSourceImage">
            <summary>
              In this mode only central part of source image (horizontally or vertically) is taken to keep 
              thumbnail at requested size if aspect ratio of source image is different.</summary>
        </member>
        <member name="T:Serenity.IUserDefinition">
            <summary>
            User definition abstraction.
            </summary>
            <remarks>Your application might have a class that implements this interface, e.g. UserDefinition, that has these properties plus some more
            specific to your app.</remarks>
        </member>
        <member name="P:Serenity.IUserDefinition.Id">
            <summary>
            User ID
            </summary>
        </member>
        <member name="P:Serenity.IUserDefinition.Username">
            <summary>
            User login name
            </summary>
        </member>
        <member name="P:Serenity.IUserDefinition.DisplayName">
            <summary>
            Display name for user (can be same with Username)
            </summary>
        </member>
        <member name="P:Serenity.IUserDefinition.Email">
            <summary>
            Email address
            </summary>
        </member>
        <member name="P:Serenity.IUserDefinition.IsActive">
            <summary>
            Is user active (1 = active, 0 = disabled, -1 = deleted)
            </summary>
        </member>
        <member name="T:Serenity.Services.PermissionExpressionParser">
            <summary>
            A simple parser / evaluator for logic permission expressions
            </summary>
        </member>
        <member name="M:Serenity.Services.PermissionExpressionParser.Tokenize(System.String)">
            <summary>
            Tokenizes a permission expression
            </summary>
            <param name="expression">Tokenizes a permission expression</param>
            <returns>List of tokens</returns>
        </member>
        <member name="M:Serenity.Services.PermissionExpressionParser.ShuntingYard(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Converts a list of tokens to Reverse Polish Notation using ShuntingYard algorithm.
            </summary>
            <param name="tokens">List of tokens, produced from Tokenize method</param>
            <returns>Tokens in RPN notation</returns>
        </member>
        <member name="M:Serenity.Services.PermissionExpressionParser.Evaluate(System.Collections.Generic.IEnumerable{System.String},System.Func{System.String,System.Boolean})">
            <summary>
            Evaluates a list of tokens in RPN notation, produced from ShuntingYard method.
            </summary>
            <param name="rpnTokens">List of tokens in RPN notation</param>
            <param name="hasPermission">A method that returns True if the user has given permission</param>
            <returns>True if expression evaluates to true</returns>
        </member>
        <member name="T:Serenity.Services.ValidationError">
            <summary>
            Generic validation error mostly used by services.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Serenity.Services.ValidationError.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Services.ValidationError"/> class.
            </summary>
        </member>
        <member name="M:Serenity.Services.ValidationError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Services.ValidationError"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Serenity.Services.ValidationError.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Services.ValidationError"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Serenity.Services.ValidationError.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Services.ValidationError"/> class.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Serenity.Services.ValidationError.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Services.ValidationError"/> class.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="arguments">The arguments.</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Serenity.Services.ValidationError.#ctor(System.String,System.String,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Services.ValidationError"/> class.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="arguments">The arguments.</param>
            <param name="errorMessageFormat">The error message format.</param>
            <param name="formatArgs">The format arguments.</param>
        </member>
        <member name="P:Serenity.Services.ValidationError.ErrorCode">
            <summary>
            Gets or sets the error code.
            </summary>
            <value>
            The error code.
            </value>
        </member>
        <member name="P:Serenity.Services.ValidationError.Arguments">
            <summary>
            Gets or sets the arguments.
            </summary>
            <value>
            The arguments.
            </value>
        </member>
        <member name="T:Serenity.Services.JsonStringHashSetConverter">
            <summary>
              Serialize/deserialize a IdentifierSet object as string</summary>
        </member>
        <member name="M:Serenity.Services.JsonStringHashSetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
              Writes the JSON representation of the object.</summary>
            <param name="writer">
              The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">
              The value.</param>
            <param name="serializer">
              The calling serializer.</param>
        </member>
        <member name="M:Serenity.Services.JsonStringHashSetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
              Reads the JSON representation of the object.</summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">
              Type of the object.</param>
            <param name="existingValue">
              The existing value of object being read.</param>
            <param name="serializer">
              The calling serializer.</param>
            <returns>
              The object value.</returns>
        </member>
        <member name="M:Serenity.Services.JsonStringHashSetConverter.CanConvert(System.Type)">
            <summary>
              Determines whether this instance can convert the specified object type.</summary>
            <param name="objectType">
              Type of the object.</param>
            <returns>
              True if this instance can convert the specified object type; otherwise, false.</returns>
        </member>
        <member name="P:Serenity.Services.JsonStringHashSetConverter.CanRead">
            <summary>
              Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can read JSON.</summary>
            <value>
              True if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, false.</value>
        </member>
        <member name="P:Serenity.Services.JsonStringHashSetConverter.CanWrite">
            <summary>
              Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON.</summary>
            <value>
              True if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, false.</value>
        </member>
        <member name="T:Serenity.Throttler">
            <summary>
            Provides throttling checks for operations. E.g. allow 10 login attempts per minute.
            </summary>
        </member>
        <member name="M:Serenity.Throttler.#ctor(System.String,System.TimeSpan,System.Int32)">
            <summary>
            Creates a new throttler
            </summary>
            <param name="key">Cache key for throttler. Include the resource name, e.g. username, you are throttling</param>
            <param name="duration">Check period</param>
            <param name="limit">How many times are allowed</param>
        </member>
        <member name="P:Serenity.Throttler.Key">
            <summary>
            Cache key
            </summary>
        </member>
        <member name="P:Serenity.Throttler.Duration">
            <summary>
            Duration
            </summary>
        </member>
        <member name="P:Serenity.Throttler.Limit">
            <summary>
            Limit
            </summary>
        </member>
        <member name="P:Serenity.Throttler.CacheKey">
            <summary>
            Full cache key
            </summary>
        </member>
        <member name="M:Serenity.Throttler.Check">
            <summary>
            Checks if over throttle limit
            </summary>
            <returns>True if under throttle limit, false otherwise</returns>
        </member>
        <member name="M:Serenity.Throttler.Reset">
            <summary>
            Resets the throttle.
            </summary>
        </member>
        <member name="T:Serenity.DistributedCache">
            <summary>
            Provides shortcuts to currently configured IDistributedCache provider.</summary>
        </member>
        <member name="F:Serenity.DistributedCache.StaticProvider">
            <summary>
            As cache access is performance-criticial, in some cases resolving 
            the cache through dependency resolver might add some overhead even 
            though neglible. This lets you to set a static provider to use in
            cases where desirable (millions of requests per second).
            </summary>
        </member>
        <member name="P:Serenity.DistributedCache.Provider">
            <summary>
            Gets current distributed cache provider, e.g. static one or
            the one configured through dependency resolver
            </summary>
        </member>
        <member name="M:Serenity.DistributedCache.Increment(System.String,System.Int32)">
            <summary>
            Increments value with specified key and returns the new value.
            If value doesn't exist, its new value will be 1.
            </summary>
            <param name="key">Key.</param>
            <param name="amount">Increase amount.</param>
            <returns>Increased amount, or 1 if it didn't exist before</returns>
        </member>
        <member name="M:Serenity.DistributedCache.Get``1(System.String)">
            <summary>
            Reads the value with given key. If value didn't exist in cache, 
            return the default(T) value. 
            </summary>
            <typeparam name="TValue">Value type</typeparam>
            <param name="key">Key</param>
            <remarks>It may raise an exception if the value is not of type TValue.</remarks>
        </member>
        <member name="M:Serenity.DistributedCache.Set``1(System.String,``0)">
            <summary>
            Writes the value to cache with specified key.
            </summary>
            <typeparam name="TValue">Value type.</typeparam>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Serenity.DistributedCache.Set``1(System.String,``0,System.TimeSpan)">
            <summary>
            Writes the value to cache with specified key and
            expiration date.
            </summary>
            <typeparam name="TValue">Value type.</typeparam>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <param name="expiration">The time the cached item will be expired on.</param>
        </member>
        <member name="T:Serenity.Caching.DistributedCacheEmulator">
            <summary>
            In memory distributed cache implementation, which emulates an IDistributedCache.
            </summary>
        </member>
        <member name="F:Serenity.Caching.DistributedCacheEmulator.sync">
            <summary>
            The synchronization lock
            </summary>
        </member>
        <member name="F:Serenity.Caching.DistributedCacheEmulator.dictionary">
            <summary>
            The dictionary that contains cached items
            </summary>
        </member>
        <member name="F:Serenity.Caching.DistributedCacheEmulator.expiration">
            <summary>
            The dictionary that contains expiration dates for keys that added with an expiration
            </summary>
        </member>
        <member name="M:Serenity.Caching.DistributedCacheEmulator.Increment(System.String,System.Int32)">
            <summary>
            Increments value with specified key and returns the new value.
            If value doesn't exist, its new value will be 1.
            </summary>
            <param name="key">Key.</param>
            <param name="amount">Increase amount.</param>
            <returns>Increased amount, or 1 if it didn't exist before</returns>
        </member>
        <member name="M:Serenity.Caching.DistributedCacheEmulator.Get``1(System.String)">
            <summary>
            Reads the value with given key. If value didn't exist in cache, 
            return the default(T) value. 
            </summary>
            <typeparam name="TValue">Value type</typeparam>
            <param name="key">Key</param>
            <remarks>It may raise an exception if the value is not of type TValue.</remarks>
        </member>
        <member name="M:Serenity.Caching.DistributedCacheEmulator.Set``1(System.String,``0)">
            <summary>
            Writes the value to cache with specified key.
            </summary>
            <typeparam name="TValue">Value type.</typeparam>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Serenity.Caching.DistributedCacheEmulator.Set``1(System.String,``0,System.TimeSpan)">
            <summary>
            Writes the value to cache with specified key.
            </summary>
            <typeparam name="TValue">Value type.</typeparam>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <param name="expiration">Expiration</param>
        </member>
        <member name="M:Serenity.Caching.DistributedCacheEmulator.Reset">
            <summary>
            Used for testing purposes to clear all cache items
            </summary>
        </member>
        <member name="T:Serenity.Caching.MemoryLocalCache">
            <summary>
            Implements ILocalCache interface using a IMemoryCache class, e.g. .NET MemoryCache
            </summary>
            <seealso cref="T:Serenity.Abstractions.ILocalCache" />
        </member>
        <member name="M:Serenity.Caching.MemoryLocalCache.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Caching.MemoryLocalCache" /> class.
            </summary>
            <param name="cache">The cache to wrap as ILocalCache.</param>
        </member>
        <member name="M:Serenity.Caching.MemoryLocalCache.Add(System.String,System.Object,System.TimeSpan)">
            <summary>
            Adds a value to cache with a given key
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
            <param name="expiration">Expire time (Use TimeSpan.Zero to hold value with no expiration)</param>
        </member>
        <member name="M:Serenity.Caching.MemoryLocalCache.Get``1(System.String)">
            <summary>
            Reads the value with specified key from the local cache.
            </summary>
            <typeparam name="TItem">Data type</typeparam>
            <param name="key">Key</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Caching.MemoryLocalCache.Remove(System.String)">
            <summary>
            Removes the value with specified key from the local cache. If the value doesn't exist, no error is raised.
            </summary>
            <param name="key">Key</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Caching.MemoryLocalCache.RemoveAll">
            <summary>
            Removes all items from the cache (avoid expect unit tests).
            </summary>
        </member>
        <member name="T:Serenity.LocalCache">
            <summary>
            Contains helper functions to access currently registered ILocalCache provider.
            </summary>
        </member>
        <member name="F:Serenity.LocalCache.StaticProvider">
            <summary>
            Use to skip Dependency.Resolve calls only when performance is critical
            </summary>
        </member>
        <member name="P:Serenity.LocalCache.Provider">
            <summary>
            Gets current local cache provider, static one or the one configured in dependency resolver
            </summary>
        </member>
        <member name="M:Serenity.LocalCache.Add(System.String,System.Object,System.TimeSpan)">
            <summary>
            Adds a value to cache with a given key
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
            <param name="expiration">Expire time (Use TimeSpan.Zero to hold value with no expiration)</param>
        </member>
        <member name="M:Serenity.LocalCache.Get``1(System.String,System.TimeSpan,System.Func{``0})">
            <summary>
            Reads the value with specified key from the local cache. If it doesn't exists in cache, calls the loader 
            function to generate value (from database etc.) and adds it to the cache. If loader returns a null value, 
            it is written to the cache as DBNull.Value.
            </summary>
            <typeparam name="TItem">Data type</typeparam>
            <param name="cacheKey">Key</param>
            <param name="expiration">Expiration (TimeSpan.Zero means no expiration)</param>
            <param name="loader">Loader function that will be called if item doesn't exist in the cache.</param>
        </member>
        <member name="M:Serenity.LocalCache.TryGet``1(System.String)">
            <summary>
            Reads the value of given type with specified key from the local cache. If the value doesn't exist or not
            of given type, it returns null.
            </summary>
            <typeparam name="TItem">Expected type</typeparam>
            <param name="cacheKey">Key</param>
        </member>
        <member name="M:Serenity.LocalCache.Remove(System.String)">
            <summary>
            Removes the value with specified key from the local cache. If the value doesn't exist, no error is raised.
            </summary>
            <param name="cacheKey">Key</param>
        </member>
        <member name="M:Serenity.LocalCache.RemoveAll">
            <summary>
            Removes all items from the cache (avoid expect unit tests).
            </summary>
        </member>
        <member name="T:Serenity.TwoLevelCache">
            <summary>
            Contains helper functions to use local and distributed cache in sync with optional cache invalidation.
            </summary>
        </member>
        <member name="F:Serenity.TwoLevelCache.GenerationCacheExpiration">
            <summary>
            Expiration timeout for cache generation keys
            </summary>
        </member>
        <member name="F:Serenity.TwoLevelCache.GenerationSuffix">
            <summary>
            Suffix for cache generation keys
            </summary>
        </member>
        <member name="M:Serenity.TwoLevelCache.Get``1(System.String,System.TimeSpan,System.TimeSpan,System.String,System.Func{``0})">
            <summary>
            Tries to read a value from local cache. If it is not found there, tries the distributed cache. 
            If neither contains the specified key, produces value by calling a loader function and adds the
            value to local and distributed cache for a given expiration time. By using a group key, 
            all items on both cache types that are members of this group can be expired at once. </summary>
            <remarks>
            To not check group generation every time an item is requested, generation number itself is also
            cached in local cache. Thus, when a generation number changes, local cached items might expire
            after about 5 seconds. This means that, if you use this strategy in a web farm setup, when a change 
            occurs in one server, other servers might continue to use old local cached data for 5 seconds more.
            If this is a problem for your configuration, use DistributedCache directly.
            </remarks>
            <typeparam name="TItem">Data type</typeparam>
            <param name="cacheKey">The item key for local and distributed cache</param>
            <param name="localExpiration">Local expiration</param>
            <param name="remoteExpiration">Distributed cache expiration (is usually same with local expiration)</param>
            <param name="groupKey">Group key that will hold generation (version). Can be used to expire all items
            that depend on it. This can be a table name. When a table changes, you change its version, and all
            cached data that depends on that table is expired.</param>
            <param name="loader">The delegate that will be called to generate value, if not found in local cache,
            or distributed cache, or all found items are expired.</param>
        </member>
        <member name="M:Serenity.TwoLevelCache.Get``1(System.String,System.TimeSpan,System.String,System.Func{``0})">
            <summary>
            Tries to read a value from local cache. If it is not found there, tries the distributed cache. 
            If neither contains the specified key, produces value by calling a loader function and adds the
            value to local and distributed cache for a given expiration time. By using a group key, 
            all items on both cache types that are members of this group can be expired at once. </summary>
            <remarks>
            To not check group generation every time an item is requested, generation number itself is also
            cached in local cache. Thus, when a generation number changes, local cached items might expire
            after about 5 seconds. This means that, if you use this strategy in a web farm setup, when a change 
            occurs in one server, other servers might continue to use old local cached data for 5 seconds more.
            If this is a problem for your configuration, use DistributedCache directly.
            </remarks>
            <typeparam name="TItem">Data type</typeparam>
            <param name="cacheKey">The item key for local and distributed cache</param>
            <param name="expiration">Local and remote expiration</param>
            <param name="groupKey">Group key that will hold generation (version). Can be used to expire all items
            that depend on it. This can be a table name. When a table changes, you change its version, and all
            cached data that depends on that table is expired.</param>
            <param name="loader">The delegate that will be called to generate value, if not found in local cache,
            or distributed cache, or all found items are expired.</param>
        </member>
        <member name="M:Serenity.TwoLevelCache.GetWithCustomSerializer``2(System.String,System.TimeSpan,System.TimeSpan,System.String,System.Func{``0},System.Func{``0,``1},System.Func{``1,``0})">
            <summary>
            Tries to read a value from local cache. If it is not found there, tries the distributed cache. 
            If neither contains the specified key, produces value by calling a loader function and adds the
            value to local and distributed cache for a given expiration time. By using a group
            key, all items on both cache types that are members of this group can be expired at once. </summary>
            <remarks>
            To not check group generation every time an item is requested, generation number itself is also
            cached in local cache. Thus, when a generation number changes, local cached items might expire
            after about 5 seconds. This means that, if you use this strategy in a web farm setup, when a change 
            occurs in one server, other servers might continue to use old local cached data for 5 seconds more.
            If this is a problem for your configuration, use DistributedCache directly.
            </remarks>
            <typeparam name="TItem">Data type</typeparam>
            <param name="cacheKey">The item key for local and distributed cache</param>
            <param name="localExpiration">Local expiration</param>
            <param name="remoteExpiration">Distributed cache expiration (is usually same with local 
            expiration)</param>
            <param name="groupKey">Group key that will hold generation (version). Can be used to expire all items
            that depend on it. This can be a table name. When a table changes, you change its version, and all
            cached data that depends on that table is expired.</param>
            <param name="loader">The delegate that will be called to generate value, if not found in local cache,
            or distributed cache, or all found items are expired.</param>
            <param name="serialize">A function used to serialize items before cached.</param>
            <param name="deserialize">A function used to deserialize items before cached.</param>
            <typeparam name="TSerialized">Serilized type</typeparam>
        </member>
        <member name="M:Serenity.TwoLevelCache.GetLocalStoreOnly``1(System.String,System.TimeSpan,System.String,System.Func{``0})">
            <summary>
            Tries to read a value from local cache. If it is not found there produces value by calling a loader 
            function and adds the value to local cache for a given expiration time. By using a generation 
            (item version) key, all items on local cache that are members of this group can be expired 
            at once. </summary>
            <remarks>
            The difference between this and Get method is that this one only caches items in local cache, but 
            uses distributed cache for versioning. To not check group generation every time an item is requested, 
            generation number itself is also cached in local cache. Thus, when a generation number changes, local 
            cached items might expire after about 5 seconds. This means that, if you use this strategy in a web farm 
            setup, when a change occurs in one server, other servers might continue to use old local cached data for 
            5 seconds more. If this is a problem for your configuration, use DistributedCache directly.
            </remarks>
            <typeparam name="TItem">Data type</typeparam>
            <param name="cacheKey">The item key for local and distributed cache</param>
            <param name="localExpiration">Local expiration</param>
            <param name="groupKey">Group key that will hold generation (version). Can be used to expire all items
            that depend on it. This can be a table name. When a table changes, you change its version, and all
            cached data that depends on that table is expired.</param>
            <param name="loader">The delegate that will be called to generate value, if not found in local cache,
            or distributed cache, or all found items are expired.</param>
        </member>
        <member name="M:Serenity.TwoLevelCache.GetSeed">
            <summary>
            Generates a seed for Random object.
            </summary>
            <returns>Random 32 bit seed</returns>
        </member>
        <member name="M:Serenity.TwoLevelCache.RandomGeneration">
            <summary>
            Generates a 64 bit random generation number (version key)
            </summary>
            <returns>Random 64 bit number</returns>
        </member>
        <member name="M:Serenity.TwoLevelCache.ChangeGlobalGeneration(System.String)">
            <summary>
            Changes a group generation value, so that all items that depend on it are expired.
            </summary>
            <param name="groupKey">Group key</param>
        </member>
        <member name="M:Serenity.TwoLevelCache.ExpireGroupItems(System.String)">
            <summary>
            Changes a group generation value, so that all items that depend on it are expired.
            </summary>
            <param name="groupKey">Group key</param>
        </member>
        <member name="M:Serenity.TwoLevelCache.Remove(System.String)">
            <summary>
            Removes a key from local, distributed caches, and removes their generation version information.
            </summary>
            <param name="cacheKey">Cache key</param>
        </member>
        <member name="T:Serenity.ComponentModel.AlignCenterAttribute">
            <summary>
            Centers text horizontally (usually in a grid column).
            </summary>
            <remarks>
            Used for text alignment in grids by adding `align-center` CSS class to corresponding SlickGrid column.
            Note that it has no effect on editors or forms.
            </remarks>
        </member>
        <member name="M:Serenity.ComponentModel.AlignCenterAttribute.#ctor">
            <summary>
            Creates a new AlignCenterAttribute
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.AlignmentAttribute">
            <summary>
            Controls horizontal alignment of text (usually in grid columns).
            </summary>
            <remarks>
            This is an abstract base class. You need to use AlignCenter or AlignRight attributes.
            </remarks>
        </member>
        <member name="M:Serenity.ComponentModel.AlignmentAttribute.#ctor(System.String)">
            <summary>
            Creates a new AlignmentAttribute
            </summary>
            <param name="align">Alignment</param>
        </member>
        <member name="P:Serenity.ComponentModel.AlignmentAttribute.Value">
            <summary>
            Gets/sets value of the alignment attribute
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.AlignRightAttribute">
            <summary>
            Right aligns text horizontally (usually in a grid column)
            </summary>
            <remarks>
            Used for text alignment in grids by adding `align-center` CSS class to corresponding SlickGrid column.
            Note that it has no effect on editors or forms.
            </remarks>
        </member>
        <member name="M:Serenity.ComponentModel.AlignRightAttribute.#ctor">
            <summary>
            Creates a new AlignRight attribute
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.EditLinkAttribute">
            <summary>
            Indicates that the property this attribute placed on should have an edit link
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.EditLinkAttribute.#ctor">
            <summary>
            Creates a new EditLink attribute
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.EditLinkAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new EditLink attribute with enable/disable option
            </summary>
            <param name="value">True if edit link should be enabled</param>
        </member>
        <member name="P:Serenity.ComponentModel.EditLinkAttribute.Value">
            <summary>
            Gets/sets edit link enable state
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.EditLinkAttribute.ItemType">
            <summary>
            Optional item type that this edit link should open. 
            It should match the dialog namespace / class name.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.EditLinkAttribute.IdField">
            <summary>
            Gets/sets from which property this edit link should get its ID value to edit
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.EditLinkAttribute.CssClass">
            <summary>
            Gets/sets optional css class to add to edit links
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.BooleanFilteringAttribute">
            <summary>
            Sets filtering type to "Boolean"
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomFilteringAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.BooleanFilteringAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.BooleanFilteringAttribute"/> class.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.BooleanFilteringAttribute.FalseText">
            <summary>
            Gets or sets the text used of false value.
            </summary>
            <value>
            The false text.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.BooleanFilteringAttribute.TrueText">
            <summary>
            Gets or sets the text used for true value.
            </summary>
            <value>
            The true text.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.DateFilteringAttribute">
            <summary>
            Sets filtering type as "Date"
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomFilteringAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.DateFilteringAttribute.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Serenity.ComponentModel.DateFilteringAttribute"/> class.</summary>
        </member>
        <member name="P:Serenity.ComponentModel.DateFilteringAttribute.DisplayFormat">
            <summary>
            Gets or sets the display format.
            </summary>
            <value>
            The display format.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.DateTimeFilteringAttribute">
            <summary>
            Indicates that this field should have date/time type of filtering
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.DateTimeFilteringAttribute.#ctor">
            <summary>
            Creates a new DateTimeFilteringAttribute
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.DateTimeFilteringAttribute.DisplayFormat">
            <summary>
            Gets/sets optional display format to use for display of filter
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.DecimalFilteringAttribute">
            <summary>
            Indicates that this field should have decimal type of filtering
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.DecimalFilteringAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.DecimalFilteringAttribute"/> class.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.EditorFilteringAttribute">
            <summary>
            Indicates that property should a custom editor for filtering,
            which is usually determined by form editor type of the property.
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomFilteringAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.EditorFilteringAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.EditorFilteringAttribute"/> class.
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.EditorFilteringAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.EditorFilteringAttribute"/> class.
            </summary>
            <param name="editorType">Type of the editor.</param>
        </member>
        <member name="M:Serenity.ComponentModel.EditorFilteringAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.EditorFilteringAttribute"/> class.
            </summary>
            <param name="editorTypeAttribute">The editor type attribute to read editor type from.</param>
        </member>
        <member name="P:Serenity.ComponentModel.EditorFilteringAttribute.EditorType">
            <summary>
            Gets or sets the type of the editor.
            </summary>
            <value>
            The type of the editor.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.EditorFilteringAttribute.UseRelative">
            <summary>
            Gets or sets a value indicating whether to use relative comparisons, like GT/LT.
            </summary>
            <value>
              <c>true</c> if should use relative comparisons; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.EditorFilteringAttribute.UseLike">
            <summary>
            Gets or sets a value indicating whether to use LIKE kind of operators including
            starts with, ends with etc.
            </summary>
            <value>
              <c>true</c> if should use LIKE operators; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.EnumFilteringAttribute">
            <summary>
            Indicates that property should use enum type of filtering
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomFilteringAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.EnumFilteringAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.EnumFilteringAttribute"/> class.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.EnumFilteringAttribute.EnumKey">
            <summary>
            Gets or sets the enum key.
            </summary>
            <value>
            The enum key.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.IntegerFilteringAttribute">
            <summary>
            Indicates that property should use integer type of filtering
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomFilteringAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.IntegerFilteringAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.IntegerFilteringAttribute"/> class.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.LookupFilteringAttribute">
            <summary>
            Indicates that property should use lookup editor type of filtering
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomFilteringAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.LookupFilteringAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.LookupFilteringAttribute"/> class.
            </summary>
            <param name="lookupKey">The lookup key.</param>
        </member>
        <member name="M:Serenity.ComponentModel.LookupFilteringAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.LookupFilteringAttribute"/> class.
            </summary>
            <param name="lookupType">Type of the lookup to get lookup key from. Can be 
            a row with [LookupScript] attribute or a custom lookup script.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">lookupType is null</exception>
        </member>
        <member name="P:Serenity.ComponentModel.LookupFilteringAttribute.IdField">
            <summary>
            Gets or sets the ID field editor should filter on.
            </summary>
            <value>
            The identifier field.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.CustomFilteringAttribute">
            <summary>
            Base class which other custom filtering types derive from.
            </summary>
            <seealso cref="T:Serenity.ComponentModel.FilteringTypeAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.CustomFilteringAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.CustomFilteringAttribute"/> class.
            </summary>
            <param name="filteringType">Type of the filtering.</param>
        </member>
        <member name="M:Serenity.ComponentModel.CustomFilteringAttribute.SetParams(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the parameters.
            </summary>
            <param name="filteringParams">The filtering parameters.</param>
        </member>
        <member name="M:Serenity.ComponentModel.CustomFilteringAttribute.SetOption(System.String,System.Object)">
            <summary>
            Sets the option.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Serenity.ComponentModel.CustomFilteringAttribute.GetOption``1(System.String)">
            <summary>
            Gets the option.
            </summary>
            <typeparam name="TType">The type of the value.</typeparam>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.ComponentModel.FilteringIdFieldAttribute">
            <summary>
            Specifies ID field to filter on a field. For example, if this attribute
            is placed on EmployeeName field, EmployeeId can be the filtering field,
            so that values are filtered on ID not text value.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.ComponentModel.FilteringIdFieldAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.FilteringIdFieldAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Serenity.ComponentModel.FilteringIdFieldAttribute.Value">
            <summary>
            Gets the filtering ID value.
            </summary>
            <value>
            The filtering ID value.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.FilteringOptionAttribute">
            <summary>
            Declares a new filtering option
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.ComponentModel.FilteringOptionAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.FilteringOptionAttribute"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Serenity.ComponentModel.FilteringOptionAttribute.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.FilteringOptionAttribute.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.FilteringTypeAttribute">
            <summary>
            Sets filtering type for the field
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.ComponentModel.FilteringTypeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.FilteringTypeAttribute"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Serenity.ComponentModel.FilteringTypeAttribute.SetParams(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the parameters. This is called by filtering system to pass
            additional parameters / options to the filtering object
            </summary>
            <param name="formatterParams">The formatter parameters.</param>
        </member>
        <member name="P:Serenity.ComponentModel.FilteringTypeAttribute.FilteringType">
            <summary>
            Gets the type of the filtering.
            </summary>
            <value>
            The type of the filtering.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.FilterOnlyAttribute">
            <summary>
            Indicates that this field should not be shown, and could not be made visible 
            in column selection dialog, but only used for advanced filtering.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.ComponentModel.FilterOnlyAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.FilterOnlyAttribute"/> class.
            </summary>
            <param name="value">if set to <c>true</c> (default) indicates this field is filter only.</param>
        </member>
        <member name="P:Serenity.ComponentModel.FilterOnlyAttribute.Value">
            <summary>
            Gets a value indicating whether this <see cref="T:Serenity.ComponentModel.FilterOnlyAttribute"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.NotFilterableAttribute">
            <summary>
            Indicates that the field this attribute is placed on is not filterable.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.ComponentModel.NotFilterableAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.NotFilterableAttribute"/> class.
            </summary>
            <param name="value">if set to <c>true</c> (default) field is not filterable.</param>
        </member>
        <member name="P:Serenity.ComponentModel.NotFilterableAttribute.Value">
            <summary>
            Gets a value indicating whether this <see cref="T:Serenity.ComponentModel.NotFilterableAttribute"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.QuickFilterAttribute">
            <summary>
            Indicates that this property should have a quick filter on grid.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.ComponentModel.QuickFilterAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.QuickFilterAttribute"/> class.
            </summary>
            <param name="value">if set to <c>true</c> quick filter is enabled.</param>
        </member>
        <member name="P:Serenity.ComponentModel.QuickFilterAttribute.Value">
            <summary>
            Gets a value indicating whether this <see cref="T:Serenity.ComponentModel.QuickFilterAttribute"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.QuickFilterAttribute.Separator">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Serenity.ComponentModel.QuickFilterAttribute"/> 
            should have a separator before others, e.g. wrap into new line.
            </summary>
            <value>
              <c>true</c> if separator is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.QuickFilterAttribute.CssClass">
            <summary>
            Gets or sets the CSS class for generated quick filter div.
            </summary>
            <value>
            The CSS class to add to the quick filter div.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.QuickFilterOptionAttribute">
            <summary>
            Add an option to the quick filtering.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.ComponentModel.QuickFilterOptionAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.QuickFilterOptionAttribute"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Serenity.ComponentModel.QuickFilterOptionAttribute.Key">
            <summary>
            Gets the key of the quick filter option.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.QuickFilterOptionAttribute.Value">
            <summary>
            Gets the value of the quick filter option.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.SortableAttribute">
            <summary>
            Indicates if sorting is enabled for this property
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.ComponentModel.SortableAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.SortableAttribute"/> class.
            </summary>
            <param name="value">if set to <c>true</c> (default) sorting is enabled.</param>
        </member>
        <member name="P:Serenity.ComponentModel.SortableAttribute.Value">
            <summary>
            Gets a value indicating whether this <see cref="T:Serenity.ComponentModel.SortableAttribute"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.BooleanFormatterAttribute">
            <summary>
            Sets formatting type to "Boolean"
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomFormatterAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.BooleanFormatterAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.BooleanFormatterAttribute"/> class.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.BooleanFormatterAttribute.FalseText">
            <summary>
            Gets or sets the text corresponding to falsey value.
            </summary>
            <value>
            The false text.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.BooleanFormatterAttribute.TrueText">
            <summary>
            Gets or sets the text corresponding to trueish value.
            </summary>
            <value>
            The true text.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.CheckboxFormatterAttribute">
            <summary>
            Sets formatting type to "Checkbox"
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomFormatterAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.CheckboxFormatterAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.CheckboxFormatterAttribute"/> class.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.DateFormatterAttribute">
            <summary>
            Sets formatting type to "Date"
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomFormatterAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.DateFormatterAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.DateFormatterAttribute"/> class.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.DateFormatterAttribute.DisplayFormat">
            <summary>
            Gets or sets the display format.
            </summary>
            <value>
            The display format.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.DateTimeFormatterAttribute">
            <summary>
            Sets formatting type to "DateTime".
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomFormatterAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.DateTimeFormatterAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.DateTimeFormatterAttribute"/> class.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.DateTimeFormatterAttribute.DisplayFormat">
            <summary>
            Gets or sets the display format.
            </summary>
            <value>
            The display format.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.EnumFormatterAttribute">
            <summary>
            Sets formatting type to "Enum".
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomFormatterAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.EnumFormatterAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.EnumFormatterAttribute"/> class.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.EnumFormatterAttribute.EnumKey">
            <summary>
            Gets or sets the enum key which is full namespace and 
            class name of the enum or it should match the value
            set with [EnumKey] attribute on the enum type.
            </summary>
            <value>
            The enum key.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.FileDownloadFormatterAttribute">
            <summary>
            Sets formatting type to "FileDownload".
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomFormatterAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.FileDownloadFormatterAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.FileDownloadFormatterAttribute"/> class.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.FileDownloadFormatterAttribute.DisplayFormat">
            <summary>
            Gets or sets the display format.
            </summary>
            <value>
            The display format.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.FileDownloadFormatterAttribute.OriginalNameProperty">
            <summary>
            Gets or sets the original name property which indicates
            the property to read original file name from (if any).
            </summary>
            <value>
            The original name property.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.NumberFormatterAttribute">
            <summary>
            Sets formatting type to "Number"
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomFormatterAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.NumberFormatterAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.NumberFormatterAttribute"/> class.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.NumberFormatterAttribute.DisplayFormat">
            <summary>
            Gets or sets the display format.
            </summary>
            <value>
            The display format.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.MinuteFormatterAttribute">
            <summary>
            Sets formatting type to "Minute" which formats an integer value in HH:mm format.
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomFormatterAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.MinuteFormatterAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.MinuteFormatterAttribute"/> class.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.MinuteFormatterAttribute.DisplayFormat">
            <summary>
            Gets or sets the display format.
            </summary>
            <value>
            The display format.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.UrlFormatterAttribute">
            <summary>
            Sets formatting type to "Url"
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomFormatterAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.UrlFormatterAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.UrlFormatterAttribute"/> class.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.UrlFormatterAttribute.DisplayProperty">
            <summary>
            Gets or sets the display property to show in hyperlink as text.
            </summary>
            <value>
            The display property.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.UrlFormatterAttribute.DisplayFormat">
            <summary>
            Gets or sets the display format.
            </summary>
            <value>
            The display format.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.UrlFormatterAttribute.UrlProperty">
            <summary>
            Gets or sets the URL property.
            </summary>
            <value>
            The URL property.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.UrlFormatterAttribute.UrlFormat">
            <summary>
            Gets or sets the URL format.
            </summary>
            <value>
            The URL format.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.UrlFormatterAttribute.Target">
            <summary>
            Gets or sets the target window, e.g. "_blank".
            </summary>
            <value>
            The target.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.CustomFormatterAttribute">
            <summary>
            Base class for custom formatter type attributes
            </summary>
            <seealso cref="T:Serenity.ComponentModel.FormatterTypeAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.CustomFormatterAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.CustomFormatterAttribute"/> class.
            </summary>
            <param name="formatterType">Type of the formatter.</param>
        </member>
        <member name="M:Serenity.ComponentModel.CustomFormatterAttribute.SetParams(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the parameters for formatter.
            </summary>
            <param name="formatterParams">The formatter parameters.</param>
        </member>
        <member name="M:Serenity.ComponentModel.CustomFormatterAttribute.SetOption(System.String,System.Object)">
            <summary>
            Sets the option.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Serenity.ComponentModel.CustomFormatterAttribute.GetOption``1(System.String)">
            <summary>
            Gets value of an option.
            </summary>
            <typeparam name="TType">The type of the option.</typeparam>
            <param name="key">The option key.</param>
            <returns>Option value</returns>
        </member>
        <member name="T:Serenity.ComponentModel.DisplayFormatAttribute">
            <summary>
            Sets the display format for a column.
            This has no effect on editors! It is only for Display, "NOT Editing". For editing, you have to change UI culture.
            <para>Display format strings are specific to column data and formatter type.</para>
            <para>If column is a Date or DateTime column, its default formatter accepts custom DateTime format strings like "dd/MM/yyyy".
            We don't suggest setting DisplayFormat for dates explicitly, use UI culture setting in Web.config unless a column has to display date/time in a different 
            order than the default.
            You may also use following standard format strings:<br/>
            - "d": "dd/MM/yyyy" where DMY order changes based on current UI culture.<br/>
            - "g": "dd/MM/yyyy HH:mm" where DMY order changes based on current UI culture.<br/>
            - "G": "dd/MM/yyyy HH:mm:ss" where DMY order changes based on current UI culture.<br/>
            - "s": "yyydd-MM-ddTHH:mm:ss" ISO sortable date time format.<br/>
            - "u": "yyydd-MM-ddTHH:mm:ss.fffZ" ISO 8601 UTC.</para>
            <para>If column is an integer, double or decimal it accepts.NET custom numeric format strings like "#,##0.00", "0.#"</para>
            </summary>
            <remarks>
            public class SomeColumns
            {
                [DisplayFormat("d")]
                public DateTime DateWithCultureDMYOrder { get; set; }
                [DisplayFormat("dd/MM/yyyy")]
                public DateTime DateWithConstantDMYOrder { get; set; }
                [DisplayFormat("g")]
                public DateTime DateTimeToMinWithCultureDMYOrder { get; set; }
                [DisplayFormat("dd/MM/yyyy HH:mm")]
                public DateTime DateTimeToMinConstantDMYOrder { get; set; }
                [DisplayFormat("G")]
                public DateTime DateTimeToSecWithCultureDMYOrder { get; set; }
                [DisplayFormat("dd/MM/yyyy HH:mm:ss")]
                public DateTime DateTimeToSecWithConstantDMYOrder { get; set; }
                [DisplayFormat("s")]
                public DateTime SortableDateTime { get; set; }
                [DisplayFormat("u")]
                public DateTime ISO8601UTC { get; set; }
                [DisplayFormat("#,##0.00")]
                public Decimal ShowTwoZerosAfterDecimalWithGrouping { get; set; }
                [DisplayFormat("0.00")]
                public Decimal ShowTwoZerosAfterDecimalNoGrouping { get; set; }
            }
            </remarks>
        </member>
        <member name="M:Serenity.ComponentModel.DisplayFormatAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.DisplayFormatAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Serenity.ComponentModel.DisplayFormatAttribute.Value">
            <summary>
            Gets the display format value.
            </summary>
            <value>
            The display format value.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.FormatterOptionAttribute">
            <summary>
            Adds a formatter option
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.ComponentModel.FormatterOptionAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.FormatterOptionAttribute"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Serenity.ComponentModel.FormatterOptionAttribute.Key">
            <summary>
            Gets the option key.
            </summary>
            <value>
            The option key.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.FormatterOptionAttribute.Value">
            <summary>
            Gets the option value.
            </summary>
            <value>
            The option value.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.FormatterTypeAttribute">
            <summary>
            Sets formatter type.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.ComponentModel.FormatterTypeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.FormatterTypeAttribute"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Serenity.ComponentModel.FormatterTypeAttribute.SetParams(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the formatter parameters.
            </summary>
            <param name="formatterParams">The formatter parameters.</param>
        </member>
        <member name="P:Serenity.ComponentModel.FormatterTypeAttribute.FormatterType">
            <summary>
            Gets the type of the formatter.
            </summary>
            <value>
            The type of the formatter.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.SummaryTypeAttribute">
            <summary>
            Determines type of aggregate function for a column to use
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.SummaryTypeAttribute.#ctor(Serenity.SummaryType)">
            <summary>
            Creates a new instance of SummaryTypeAttribute.
            </summary>
            <param name="value">Aggregate function type</param>
        </member>
        <member name="P:Serenity.ComponentModel.SummaryTypeAttribute.Value">
            <summary>
            Gets aggregate function type
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.WidthAttribute">
            <summary>
            Sets column width
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.ComponentModel.WidthAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.WidthAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Serenity.ComponentModel.WidthAttribute.Value">
            <summary>
            Gets the column width.
            </summary>
            <value>
            The column width.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.WidthAttribute.Min">
            <summary>
            Gets or sets the minimum width.
            </summary>
            <value>
            The minimum width.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.WidthAttribute.Max">
            <summary>
            Gets or sets the maximum width.
            </summary>
            <value>
            The maximum width.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.AllowHideAttribute">
            <summary>
            Controls users ability to hide a column, e.g. using column picker.
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.AllowHideAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.AllowHideAttribute"/> class.
            </summary>
            <param name="value">if set to <c>false</c> column can't be hidden by user.</param>
        </member>
        <member name="P:Serenity.ComponentModel.AllowHideAttribute.Value">
            <summary>
            Gets a value indicating whether this <see cref="T:Serenity.ComponentModel.AllowHideAttribute"/> is ON.
            </summary>
            <value>
              <c>true</c> if ON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.HiddenAttribute">
            <summary>
            Sets a column as initially hidden
            </summary>
            <seealso cref="T:Serenity.ComponentModel.VisibleAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.HiddenAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.HiddenAttribute"/> class.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.InsertableAttribute">
            <summary>
            Controls if this field is editable in new record mode.
            When used with fields, turns on or off the insertable flag.
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.InsertableAttribute.#ctor(System.Boolean)">
            <summary>
            Controls if this field is editable in new record mode.
            When used with fields, turns on or off the insertable flag.
            </summary>
            <param name="insertable">True to make field insertable</param>
        </member>
        <member name="P:Serenity.ComponentModel.InsertableAttribute.Value">
            <summary>
            Gets a value indicating whether this <see cref="T:Serenity.ComponentModel.InsertableAttribute"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.LocalTextPrefixAttribute">
            <summary>
            Sets local text prefix for the row.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.ComponentModel.LocalTextPrefixAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.LocalTextPrefixAttribute"/> class.
            </summary>
            <param name="value">The prefix.</param>
        </member>
        <member name="P:Serenity.ComponentModel.LocalTextPrefixAttribute.Value">
            <summary>
            Gets the local text prefix.
            </summary>
            <value>
            The local text prefix.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.ModuleAttribute">
            <summary>
            Sets the module name for the row. Module name is usually the folder name
            under ~/Modules folder entity resides in.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.ComponentModel.ModuleAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.ModuleAttribute"/> class.
            </summary>
            <param name="module">The module.</param>
        </member>
        <member name="P:Serenity.ComponentModel.ModuleAttribute.Value">
            <summary>
            Gets the module.
            </summary>
            <value>
            The module.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.ScriptIncludeAttribute">
            <summary>
            Enables script code generation for the type this attribute is placed on.
            By default, types which are used in an endpoint / row is automatically
            enabled for code generation. Use this only for non-referenced types.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Serenity.ComponentModel.UpdatableAttribute">
            <summary>
            Controls if this field is editable in update record mode.
            When used with fields, turns on or off the updatable flag.
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.UpdatableAttribute.#ctor(System.Boolean)">
            <summary>
            Controls if this field is editable in update record mode.
            When used with fields, turns on or off the updatable flag.
            </summary>
            <param name="updatable">True to make field updatable</param>
        </member>
        <member name="P:Serenity.ComponentModel.UpdatableAttribute.Value">
            <summary>
            Gets a value indicating whether this <see cref="T:Serenity.ComponentModel.UpdatableAttribute"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.VisibleAttribute">
            <summary>
            Controls initial visibility of a column / form field.
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.VisibleAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.VisibleAttribute"/> class.
            </summary>
            <param name="value">if set to <c>true</c> (default) column is visible initially.</param>
        </member>
        <member name="P:Serenity.ComponentModel.VisibleAttribute.Value">
            <summary>
            Gets a value indicating whether this <see cref="T:Serenity.ComponentModel.VisibleAttribute"/> is ON.
            </summary>
            <value>
              <c>true</c> if ON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.AnnotationTypeAttribute">
            <summary>
            Declares that the type with this attribute is an annotation type for another type,
            e.g. it contains attributes for the other type and its properties. This is mainly used to
            separate dependencies between rows and UI related properties like editor types etc.
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.AnnotationTypeAttribute.#ctor(System.Type)">
            <summary>
            Creates an instance of AnnotationType attribute
            </summary>
            <param name="type">The type to match. It can be a type, an interface 
            or an attribute type that type other type should have.</param>
        </member>
        <member name="P:Serenity.ComponentModel.AnnotationTypeAttribute.AnnotatedType">
            <summary>
            Other type, interface or type of attribute that other type should have
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.AnnotationTypeAttribute.Inherited">
            <summary>
            Should type exactly match, or can it be a subclass of the type.
            Default is true, ignored for attribute types.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.AnnotationTypeAttribute.Namespaces">
            <summary>
            If specified this annotation only applies to types in the namespaces 
            and their sub namespaces if namespace ends with ".*"
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.AnnotationTypeAttribute.Properties">
            <summary>
            If specified, this annotation matches the type only if it has all the
            properties listed in this array.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.ColumnsScriptAttribute">
            <summary>
            Indicates that this type should generate a columns script, 
            which contains information about properties in this type and 
            is an array of PropertyItem objects. Column scripts can be
            accessed from client side using Q.getColumns("Key")
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.ComponentModel.ColumnsScriptAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.ColumnsScriptAttribute"/> class.
            </summary>
            <param name="key">The key.</param>
            <exception cref="T:System.ArgumentNullException">key</exception>
        </member>
        <member name="P:Serenity.ComponentModel.ColumnsScriptAttribute.Key">
            <summary>
            Gets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.DataScriptAttribute">
            <summary>
            Indicates that this method / type should generate a remote data
            script. Data contained by remote data scripts can be accessed
            client side using Q.getRemoteData("Key") function.
            </summary>
            <seealso cref="T:Serenity.ComponentModel.DynamicScriptAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.DataScriptAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.DataScriptAttribute"/> class.
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.DataScriptAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.DataScriptAttribute"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="P:Serenity.ComponentModel.DataScriptAttribute.Key">
            <summary>
            Gets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.DataScriptAttribute.Permission">
            <summary>
            Permission key required to access this data script.
            Use special value "?" for all logged-in users.
            Use special value "*" for anyone including not logged-in users.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.DataScriptAttribute.CacheDuration">
            <summary>
            Cache duration in seconds
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.DataScriptAttribute.CacheGroupKey">
            <summary>
            Gets or sets the cache group key. 
            Group keys are used to invalidate a group of items.
            </summary>
            <value>
            The cache group key.
            </value>
        </member>
        <member name="M:Serenity.ComponentModel.DataScriptAttribute.AutoKeyFor(System.Type)">
            <summary>
            Gets the automatically generated key for given type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.ComponentModel.DynamicScriptAttribute">
            <summary>
            Base class for dynamic script attributes.
            Dynamic scripts contain dynamic data, but they are not parameterized.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.ComponentModel.DynamicScriptAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.DynamicScriptAttribute"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="P:Serenity.ComponentModel.DynamicScriptAttribute.Key">
            <summary>
            Gets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.DynamicScriptAttribute.CacheDuration">
            <summary>
            Gets or sets the duration of the caching.
            </summary>
            <value>
            The duration of the caching.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.DynamicScriptAttribute.CacheGroupKey">
            <summary>
            Gets or sets the cache group key. 
            Group keys are used to invalidate a group of items.
            </summary>
            <value>
            The cache group key.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.EnumKeyAttribute">
            <summary>
            Sets the enumeration key of an enum
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.ComponentModel.EnumKeyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.EnumKeyAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Serenity.ComponentModel.EnumKeyAttribute.Value">
            <summary>
            Gets the enum key.
            </summary>
            <value>
            The enum key.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.FormScriptAttribute">
            <summary>
            Indicates that this type should generate a form script, 
            which contains information about properties in this type and 
            is an array of PropertyItem objects. Form scripts can be
            accessed from client side using Q.getForm("Key")
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.ComponentModel.FormScriptAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.FormScriptAttribute"/> class.
            </summary>
            <param name="key">The key.</param>
            <exception cref="T:System.ArgumentNullException">key</exception>
        </member>
        <member name="P:Serenity.ComponentModel.FormScriptAttribute.Key">
            <summary>
            Gets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.LookupScriptAttribute">
            <summary>
            Placed on rows / or custom lookup classes to denote
            it has a lookup script.
            When placed on a row class, lookup scripts only transfer ID 
            and Name fields by default to client side for 
            security / performance reasons. Make sure you add 
            [LookupInclude] attribute to properties you'll need to
            access from script.
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.LookupScriptAttribute.#ctor">
            <summary>
            Creates a LookupScriptAttribute with auto determined lookup key
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.LookupScriptAttribute.#ctor(System.String)">
            <summary>
            Creates a LookupScriptAttribute.
            </summary>
            <param name="key">Lookup key, usually in "Module.EntityName" format.</param>
        </member>
        <member name="M:Serenity.ComponentModel.LookupScriptAttribute.AutoLookupKeyFor(System.Type)">
            <summary>
            When lookup key is null, e.g. default constructor is used, this method
            tries to determine the lookup key by looking at the type this attribute 
            is placed on. This is a combination of module identifier and type name.
            If type has a [Module] attribute it is used, otherwise module identifier
            is determined from namespace, by removing ".Entities", ".Scripts", ".Lookups"
            common suffixes and the root namespace (e.g. the first part of namespace 
            before the first dot). Type name is determined from class type name, with
            common suffixes like "Row" or "Lookup" removed.
            </summary>
            <param name="type">Type to generate a lookup key for</param>
            <returns>Auto generated lookup key</returns>
        </member>
        <member name="M:Serenity.ComponentModel.LookupScriptAttribute.#ctor(System.Type)">
            <summary>
            Defines that this type has an external lookup script type,
            and the lookup key is available on that type. Use this overload only
            for row types that have external lookups.
            </summary>
            <param name="lookupType">Script type with LookupScript attribute of its own.</param>
        </member>
        <member name="P:Serenity.ComponentModel.LookupScriptAttribute.Key">
            <summary>
            Lookup key, usually in "Module.EntityName" format.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.LookupScriptAttribute.Permission">
            <summary>
            Permission key required to access this lookup script.
            Use special value "?" for all logged-in users.
            Use special value "*" for anyone including not logged-in users.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.LookupScriptAttribute.Expiration">
            <summary>
            Cache duration in seconds
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.LookupScriptAttribute.LookupType">
            <summary>
            External lookup script type or base type that should be used for generating dynamic lookup script.
            Only meaningfull for Row types with external lookup scripts. Can be a generic type of TRow or
            a simple lookup class.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.RegisterPermissionKeyAttribute">
            <summary>
            Registers a permission key.
            </summary>
            <seealso cref="T:Serenity.Data.PermissionAttributeBase" />
        </member>
        <member name="M:Serenity.ComponentModel.RegisterPermissionKeyAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.RegisterPermissionKeyAttribute"/> class.
            </summary>
            <param name="permission">The permission.</param>
        </member>
        <member name="M:Serenity.ComponentModel.RegisterPermissionKeyAttribute.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.RegisterPermissionKeyAttribute"/> class.
            A colon is inserted between module and permission to generate permission key.
            </summary>
            <param name="module">The module.</param>
            <param name="permission">The permission.</param>
        </member>
        <member name="M:Serenity.ComponentModel.RegisterPermissionKeyAttribute.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.RegisterPermissionKeyAttribute"/> class.
            A colon is inserted between module, submodule and permission to generate permission key.
            </summary>
            <param name="module">The module.</param>
            <param name="submodule">The submodule.</param>
            <param name="permission">The permission.</param>
        </member>
        <member name="T:Serenity.ComponentModel.RequiredPermissionAttribute">
            <summary>
            Specifies required permission to access an object, e.g. a report
            </summary>
            <seealso cref="T:Serenity.Data.PermissionAttributeBase" />
        </member>
        <member name="M:Serenity.ComponentModel.RequiredPermissionAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.RequiredPermissionAttribute"/> class.
            </summary>
            <param name="permission">The permission.</param>
        </member>
        <member name="M:Serenity.ComponentModel.RequiredPermissionAttribute.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.RequiredPermissionAttribute"/> class.
            A colon is inserted between module and permission to generate permission key.
            </summary>
            <param name="module">The module.</param>
            <param name="permission">The permission.</param>
        </member>
        <member name="M:Serenity.ComponentModel.RequiredPermissionAttribute.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.RequiredPermissionAttribute"/> class.
            A colon is inserted between module, submodule and permission to generate permission key.
            </summary>
            <param name="module">The module.</param>
            <param name="submodule">The submodule.</param>
            <param name="permission">The permission.</param>
        </member>
        <member name="T:Serenity.ComponentModel.BasedOnRowAttribute">
            <summary>
            An attribute that indicates this type is based on another row type.
            Used with form, columns etc. types to map their properties to
            corresponding property in a row, so that they inherit attributes.
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.BasedOnRowAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.BasedOnRowAttribute"/> class.
            </summary>
            <param name="rowType">Type of the row.</param>
        </member>
        <member name="P:Serenity.ComponentModel.BasedOnRowAttribute.RowType">
            <summary>
            Gets the type of the row.
            </summary>
            <value>
            The type of the row.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.BasedOnRowAttribute.CheckNames">
            <summary>
            Gets or sets a value indicating whether to check names.
            If this is true (by default false), if a property name doesn't
            exactly match a property in the RowType row, Serenity will
            raise error. In that case you might add [IgnoreName] attribute 
            to properties that shouldn't be checked.
            </summary>
            <value>
              <c>true</c> if should check names; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.CollapsibleAttribute">
            <summary>
            Used to specify a target is collapsible.
            Commonly used with form categories to make them collapsible.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.ComponentModel.CollapsibleAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.CollapsibleAttribute"/> class.
            </summary>
            <param name="value">if set to <c>true</c> target is collapsible.</param>
        </member>
        <member name="P:Serenity.ComponentModel.CollapsibleAttribute.Value">
            <summary>
            Gets a value indicating whether this <see cref="T:Serenity.ComponentModel.CollapsibleAttribute"/> is value.
            </summary>
            <value>
              <c>true</c> if value; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.CollapsibleAttribute.Collapsed">
            <summary>
            Gets or sets a value indicating whether the target is initially collapsed.
            Default is false.
            </summary>
            <value>
              <c>true</c> if collapsed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.CssClassAttribute">
            <summary>
            Sets the CSS class for columns and form fields.
            In forms, class is added to container div with .field class that contains both label and editor.
            For columns, it sets cssClass property of SlickColumn, which adds this class to slick cells for all rows.
            Slick column headers are not affected by this attribute, use HeaderCssClass for that.
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.CssClassAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.CssClassAttribute"/> class.
            </summary>
            <param name="cssClass">The CSS class.</param>
        </member>
        <member name="P:Serenity.ComponentModel.CssClassAttribute.CssClass">
            <summary>
            Gets the CSS class.
            </summary>
            <value>
            The CSS class.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.CustomEditorAttribute">
            <summary>
            Base attribute class that all other custom editor types
            derives from.
            </summary>
            <seealso cref="T:Serenity.ComponentModel.EditorTypeAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.CustomEditorAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.CustomEditorAttribute"/> class.
            </summary>
            <param name="editorType">Type of the editor.</param>
        </member>
        <member name="M:Serenity.ComponentModel.CustomEditorAttribute.SetParams(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the parameters for each pair in the editorParams dictionary.
            </summary>
            <param name="editorParams">The editor parameters.</param>
        </member>
        <member name="M:Serenity.ComponentModel.CustomEditorAttribute.SetOption(System.String,System.Object)">
            <summary>
            Sets the editor option.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Serenity.ComponentModel.CustomEditorAttribute.GetOption``1(System.String)">
            <summary>
            Gets the editor option.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.ComponentModel.EditorOptionAttribute">
            <summary>
            Sets an editor option for target property editor.
            Avoid using this where possible as option keys and values 
            are not checked.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.ComponentModel.EditorOptionAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.EditorOptionAttribute"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Serenity.ComponentModel.EditorOptionAttribute.Key">
            <summary>
            Gets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.EditorOptionAttribute.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.EditorTypeAttribute">
            <summary>
            Sets editor type of the target property.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.ComponentModel.EditorTypeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.EditorTypeAttribute"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Serenity.ComponentModel.EditorTypeAttribute.SetParams(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Transfers the current editor parameters to specified editorParams dictionary.
            </summary>
            <param name="editorParams">The editor parameters.</param>
        </member>
        <member name="P:Serenity.ComponentModel.EditorTypeAttribute.EditorType">
            <summary>
            Gets the type of the editor.
            </summary>
            <value>
            The type of the editor.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.AsyncLookupEditorAttribute">
            <summary>
            Indicates that the target property should use a "AsyncLookup" editor.
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomEditorAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.AsyncLookupEditorAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.AsyncLookupEditorAttribute"/> class.
            </summary>
            <param name="lookupKey">The lookup key.</param>
        </member>
        <member name="M:Serenity.ComponentModel.AsyncLookupEditorAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.AsyncLookupEditorAttribute"/> class.
            </summary>
            <param name="lookupType">Type of the lookup.</param>
            <exception cref="T:System.ArgumentNullException">lookupType</exception>
            <exception cref="T:System.ArgumentException">lookupType</exception>
        </member>
        <member name="P:Serenity.ComponentModel.AsyncLookupEditorAttribute.LookupKey">
            <summary>
            Gets the lookup key.
            </summary>
            <value>
            The lookup key.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.BooleanEditorAttribute">
            <summary>
            Indicates that the target property should use a "Boolean" editor.
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomEditorAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.BooleanEditorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.BooleanEditorAttribute"/> class.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.CheckLookupEditorAttribute">
            <summary>
            Indicates that the target property should use a "CheckLookup" editor.
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomEditorAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.CheckLookupEditorAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.CheckLookupEditorAttribute"/> class.
            </summary>
            <param name="lookupKey">The lookup key.</param>
        </member>
        <member name="M:Serenity.ComponentModel.CheckLookupEditorAttribute.#ctor(System.Type)">
            <summary>
            If you use this constructor, lookupKey will be determined by [LookupScript] attribute
            on specified lookup type. If this is a row type, make sure it has [LookupScript] attribute
            on it.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.CheckLookupEditorAttribute.LookupKey">
            <summary>
            Lookup key, e.g. Northwind.CustomerCity
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.CheckLookupEditorAttribute.CascadeFrom">
            <summary>
            ID (can be relative) of the editor that this editor will cascade from, e.g. Country
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.CheckLookupEditorAttribute.CascadeField">
            <summary>
            Cascade filtering field (items will be filtered on this key, e.g. CountryID)
            Make sure you have [LookupInclude] attribute on this field of lookup row,
            otherwise you'll have empty results as this field won't be available client side.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.CheckLookupEditorAttribute.CascadeValue">
            <summary>
            Cascade filtering value, usually set by CascadeFrom editor, e.g. the integer value of CountryID
            If null or empty, and CascadeField is set, all items are filtered
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.CheckLookupEditorAttribute.FilterField">
            <summary>
            Optional filtering field (items will be filtered on this key, e.g. GroupID)
            Make sure you have [LookupInclude] attribute on this field of lookup row,
            otherwise you'll have empty results as this field won't be available client side.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.CheckLookupEditorAttribute.FilterValue">
            <summary>
            Optional filtering value, e.g. the integer value of GroupID. If null or empty string no filtering occurs.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.CheckLookupEditorAttribute.Delimited">
            <summary>
            Use comma separated string instead of an array to serialize values.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.CheckLookupEditorAttribute.CheckedOnTop">
            <summary>
            Move selected items to top on load
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.CheckLookupEditorAttribute.ShowSelectAll">
            <summary>
            Show select all button
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.CheckLookupEditorAttribute.HideSearch">
            <summary>
            Hide quick search input
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.DateEditorAttribute">
            <summary>
            Indicates that the target property should use a "Date" editor.
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomEditorAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.DateEditorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.DateEditorAttribute"/> class.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.DateEditorAttribute.MinValue">
            <summary>
            Gets or sets the minimum value.
            </summary>
            <value>
            The minimum value.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.DateEditorAttribute.MaxValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
            <value>
            The maximum value.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.DateEditorAttribute.SqlMinMax">
            <summary>
            Gets or sets a value indicating whether SQL server min max dates should be used.
            </summary>
            <value>
              <c>true</c> if SQL server min max dates should be used; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.DateTimeEditorAttribute">
            <summary>
            Indicates that the target property should use a "DateTime" editor.
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomEditorAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.DateTimeEditorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.DateTimeEditorAttribute"/> class.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.DateTimeEditorAttribute.MinValue">
            <summary>
            Gets or sets the minimum value.
            </summary>
            <value>
            The minimum value.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.DateTimeEditorAttribute.MaxValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
            <value>
            The maximum value.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.DateTimeEditorAttribute.SqlMinMax">
            <summary>
            Gets or sets a value indicating whether SQL server min max dates should be used.
            </summary>
            <value>
              <c>true</c> if SQL server min max dates should be used; otherwise, <c>false</c>.
            </value>        
        </member>
        <member name="P:Serenity.ComponentModel.DateTimeEditorAttribute.StartHour">
            <summary>
            Gets or sets the start hour between 0 and 23.
            </summary>
            <value>
            The start hour.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.DateTimeEditorAttribute.EndHour">
            <summary>
            Gets or sets the end hour between 0 and 23.
            </summary>
            <value>
            The end hour.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.DateTimeEditorAttribute.IntervalMinutes">
            <summary>
            Gets or sets the interval minutes, default is 5 mins.
            </summary>
            <value>
            The interval minutes.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.DateTimeEditorAttribute.UseUtc">
            <summary>
            Gets or sets a value indicating whether the editor should use UTC format.
            </summary>
            <value>
              <c>true</c> if UTC format should be used; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.DateYearEditorAttribute">
            <summary>
            Indicates that the target property should use a "DateYear" editor.
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomEditorAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.DateYearEditorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.DateYearEditorAttribute"/> class.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.DateYearEditorAttribute.MaxYear">
            <summary>
            Gets or sets the maximum year.
            It can be written as an integer value, or +50, -20 etc. 
            corresponding to current year plus or minus years.
            </summary>
            <value>
            The maximum year.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.DateYearEditorAttribute.MinYear">
            <summary>
            Gets or sets the minimum year.
            It can be written as an integer value, or +50, -20 etc. 
            corresponding to current year plus or minus years.
            </summary>
            <value>
            The minimum year. 
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.DateYearEditorAttribute.Descending">
            <summary>
            Gets or sets a value indicating whether the years should be listed in descending order.
            </summary>
            <value>
              <c>true</c> if descending; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.DecimalEditorAttribute">
            <summary>
            Indicates that the target property should use a "Decimal" editor.
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomEditorAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.DecimalEditorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.DecimalEditorAttribute"/> class.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.DecimalEditorAttribute.Decimals">
            <summary>
            Gets or sets the number of decimals allowed.
            </summary>
            <value>
            The decimals allowed.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.DecimalEditorAttribute.MaxValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
            <value>
            The maximum value.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.DecimalEditorAttribute.MinValue">
            <summary>
            Gets or sets the minimum value.
            </summary>
            <value>
            The minimum value.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.DecimalEditorAttribute.PadDecimals">
            <summary>
            Gets or sets a value indicating whether to pad decimals with zero.
            </summary>
            <value>
              <c>true</c> if pad decimals with zero; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.DecimalEditorAttribute.AllowNegatives">
            <summary>
            Gets or sets a value indicating whether to allow negatives.
            </summary>
            <value>
              <c>true</c> if should allow negatives; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.DecimalEditorAttribute.AllowNegativesByDefault">
            <summary>
            Gets or sets a value indicating whether to allow negatives by default.
            This is a global setting that controls if decimal editors should allow
            negative values unless specified otherwise.
            </summary>
            <value>
              <c>true</c> if negatives should be allowed by default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.DistinctValuesEditorAttribute">
            <summary>
            Indicates that the target property should use a "DistinctValues" editor
            and also defines an automatic lookup script for row fields.
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomEditorAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.DistinctValuesEditorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.DistinctValuesEditorAttribute"/> class.
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.DistinctValuesEditorAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.DistinctValuesEditorAttribute"/> class.
            </summary>
            <param name="rowType">Type of the row.</param>
            <param name="propertyName">Name of the property.</param>
            <exception cref="T:System.ArgumentNullException">
            rowType
            or
            propertyName
            </exception>
        </member>
        <member name="P:Serenity.ComponentModel.DistinctValuesEditorAttribute.RowType">
            <summary>
            RowType that this editor will get values from
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.DistinctValuesEditorAttribute.PropertyName">
            <summary>
            Property name that this editor will get values from
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.DistinctValuesEditorAttribute.Permission">
            <summary>
            Permission key required to access this lookup script.
            Use special value "?" for all logged-in users.
            Use special value "*" for anyone including not logged-in users.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.DistinctValuesEditorAttribute.Expiration">
            <summary>
            Cache duration in seconds
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.EmailAddressEditorAttribute">
            <summary>
            Indicates that the target property should use a "EmailAddress" editor.
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomEditorAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.EmailAddressEditorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.EmailAddressEditorAttribute"/> class.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.EnumEditorAttribute">
            <summary>
            Indicates that the target property should use a "Enum" editor.
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomEditorAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.EnumEditorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.EnumEditorAttribute"/> class.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.EnumEditorAttribute.AllowClear">
            <summary>
            Gets or sets a value indicating whether to allow clearing.
            </summary>
            <value>
              <c>true</c> if allow clear; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.EnumEditorAttribute.Delimited">
            <summary>
            Use comma separated string instead of an array to serialize values.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.EnumEditorAttribute.MinimumResultsForSearch">
            <summary>
            The minimum number of results that must be initially (after opening the dropdown for the first time) populated in order to keep the search field. 
            This is useful for cases where local data is used with just a few results, in which case the search box is not very useful and wastes screen space.
            The option can be set to a negative value to permanently hide the search field.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.EnumEditorAttribute.Multiple">
            <summary>
            Allow multiple selection. Make sure your field is a List. 
            You may also set CommaSeparated to use a string field.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.HtmlContentEditorAttribute">
            <summary>
            Indicates that the target property should use a "HtmlContent" editor.
            This is generally a CK editor that contains more functionalities
            compared to other ones.
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomEditorAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.HtmlContentEditorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.HtmlContentEditorAttribute"/> class.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.HtmlContentEditorAttribute.Cols">
            <summary>
            Gets or sets the cols for underlying textarea.
            </summary>
            <value>
            The cols.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.HtmlContentEditorAttribute.Rows">
            <summary>
            Gets or sets the rows for underlying textarea.
            </summary>
            <value>
            The rows.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.HtmlNoteContentEditorAttribute">
            <summary>
            Indicates that the target property should use a "HtmlNoteContent" editor.
            This is generally a CK editor with only basic functionality for notes enabled.
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomEditorAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.HtmlNoteContentEditorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.HtmlNoteContentEditorAttribute"/> class.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.HtmlNoteContentEditorAttribute.Cols">
            <summary>
            Gets or sets the cols of underlying textarea.
            </summary>
            <value>
            The cols.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.HtmlNoteContentEditorAttribute.Rows">
            <summary>
            Gets or sets the rows of underlying textarea.
            </summary>
            <value>
            The rows.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.HtmlReportContentEditorAttribute">
            <summary>
            Indicates that the target property should use a "HtmlReportContent" editor.
            This is generally a CK editor with only functionality compatible with common
            reporting tools like SSRS, Telerik, DevExpress etc. enabled.
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomEditorAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.HtmlReportContentEditorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.HtmlReportContentEditorAttribute"/> class.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.HtmlReportContentEditorAttribute.Cols">
            <summary>
            Gets or sets the cols for underlying textarea.
            </summary>
            <value>
            The cols.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.HtmlReportContentEditorAttribute.Rows">
            <summary>
            Gets or sets the rows for underlying textarea.
            </summary>
            <value>
            The rows.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.IntegerEditorAttribute">
            <summary>
            Indicates that the target property should use a "Integer" editor.
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomEditorAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.IntegerEditorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.IntegerEditorAttribute"/> class.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.IntegerEditorAttribute.MaxValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
            <value>
            The maximum value.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.IntegerEditorAttribute.MinValue">
            <summary>
            Gets or sets the minimum value.
            </summary>
            <value>
            The minimum value.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.IntegerEditorAttribute.AllowNegatives">
            <summary>
            Gets or sets a value indicating whether the editor should allow negatives.
            </summary>
            <value>
              <c>true</c> if [allow negatives]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.IntegerEditorAttribute.AllowNegativesByDefault">
            <summary>
            Gets or sets a value indicating whether editors should allow negatives by default.
            This is a global setting that controls default of AllowNegatives property in this attribute.
            </summary>
            <value>
              <c>true</c> if editors should allow negatives by default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.LookupEditorAttribute">
            <summary>
            Indicates that the target property should use a "Lookup" editor.
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomEditorAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.LookupEditorAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.LookupEditorAttribute"/> class.
            </summary>
            <param name="lookupKey">The lookup key.</param>
        </member>
        <member name="M:Serenity.ComponentModel.LookupEditorAttribute.#ctor(System.Type)">
            <summary>
            If you use this constructor, lookupKey will be determined by [LookupScript] attribute
            on specified lookup type. If this is a row type, make sure it has [LookupScript] attribute
            on it.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.LookupEditorBaseAttribute">
            <summary>
            Base class for lookup based editor types
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomEditorAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.LookupEditorBaseAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.LookupEditorBaseAttribute"/> class.
            </summary>
            <param name="editorType">Type of the editor.</param>
        </member>
        <member name="P:Serenity.ComponentModel.LookupEditorBaseAttribute.LookupKey">
            <summary>
            Lookup key, e.g. Northwind.CustomerCity
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.LookupEditorBaseAttribute.AutoComplete">
            <summary>
            Allows dynamically creating new options from text input by the user in the search box.
            This option should only be used for free text inputs, not ID / Text pairs.
            When this option is enabled InplaceAdd cannot be used. 
            Newly created option will have same ID / Text which is user entered text.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.LookupEditorBaseAttribute.InplaceAdd">
            <summary>
            Enable inplace add / edit functionality
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.LookupEditorBaseAttribute.InplaceAddPermission">
            <summary>
            Permission required to use inplace add / edit
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.LookupEditorBaseAttribute.DialogType">
            <summary>
            This property is meaningfull when InplaceAdd is true. By default, dialog type name
            is determined by LookupKey, e.g. if lookup key is "Northwind.CustomerCity", 
            a dialog class named "Northwind.CustomerCityDialog" is used. If dialog type is different
            than lookup key, set this to classname, e.g. "MyModule.MyDialog"
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.LookupEditorBaseAttribute.CascadeFrom">
            <summary>
            ID (can be relative) of the editor that this editor will cascade from, e.g. Country
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.LookupEditorBaseAttribute.CascadeField">
            <summary>
            Cascade filtering field (items will be filtered on this key, e.g. CountryID)
            Make sure you have [LookupInclude] attribute on this field of lookup row,
            otherwise you'll have empty results as this field won't be available client side.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.LookupEditorBaseAttribute.CascadeValue">
            <summary>
            Cascade filtering value, usually set by CascadeFrom editor, e.g. the integer value of CountryID
            If null or empty, and CascadeField is set, all items are filtered
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.LookupEditorBaseAttribute.FilterField">
            <summary>
            Optional filtering field (items will be filtered on this key, e.g. GroupID)
            Make sure you have [LookupInclude] attribute on this field of lookup row,
            otherwise you'll have empty results as this field won't be available client side.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.LookupEditorBaseAttribute.FilterValue">
            <summary>
            Optional filtering value, e.g. the integer value of GroupID. If null or empty string no filtering occurs.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.LookupEditorBaseAttribute.MinimumResultsForSearch">
            <summary>
            The minimum number of results that must be initially (after opening the dropdown for the first time) populated in order to keep the search field. 
            This is useful for cases where local data is used with just a few results, in which case the search box is not very useful and wastes screen space.
            The option can be set to a negative value to permanently hide the search field.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.LookupEditorBaseAttribute.Multiple">
            <summary>
            Allow multiple selection. Make sure your field is a List. 
            You may also set CommaSeparated to use a string field.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.LookupEditorBaseAttribute.Delimited">
            <summary>
            Use comma separated string instead of an array to serialize values.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.LookupEditorBaseAttribute.OpenDialogAsPanel">
            <summary>
            Open dialogs as panel (default value is null, which uses panel attribute on dialog class)
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.MaskedEditorAttribute">
            <summary>
            Indicates that the target property should use a "Masked" editor
            and also defines an automatic lookup script for row fields.
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomEditorAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.MaskedEditorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.MaskedEditorAttribute"/> class.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.MaskedEditorAttribute.Mask">
            <summary>
            Gets or sets the mask. a = letter, 9 = numeric, * = alphanumeric.
            </summary>
            <value>
            The mask.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.MaskedEditorAttribute.Placeholder">
            <summary>
            Gets or sets the placeholder.
            </summary>
            <value>
            The placeholder.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.PasswordEditorAttribute">
            <summary>
            Indicates that the target property should use a "Password" editor.
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomEditorAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.PasswordEditorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.PasswordEditorAttribute"/> class.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.RadioButtonEditorAttribute">
            <summary>
            Indicates that the target property should use a "RadioButton" editor.
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomEditorAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.RadioButtonEditorAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.RadioButtonEditorAttribute"/> class.
            </summary>
            <param name="enumOrLookupType">Type of the enum or lookup.</param>
            <exception cref="T:System.ArgumentNullException">enumOrLookupType</exception>
            <exception cref="T:System.ArgumentException">lookupType</exception>
        </member>
        <member name="M:Serenity.ComponentModel.RadioButtonEditorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.RadioButtonEditorAttribute"/> class.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.RadioButtonEditorAttribute.EnumKey">
            <summary>
            Gets or sets the enum key.
            </summary>
            <value>
            The enum key.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.RadioButtonEditorAttribute.LookupKey">
            <summary>
            Gets or sets the lookup key.
            </summary>
            <value>
            The lookup key.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.RecaptchaAttribute">
            <summary>
            Indicates that the target property should use a "Recaptcha" (Google).
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomEditorAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.RecaptchaAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.RecaptchaAttribute"/> class.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.RecaptchaAttribute.SiteKey">
            <summary>
            Gets or sets the site key.
            </summary>
            <value>
            The site key.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.RecaptchaSettings">
            <summary>
            Settings for Recaptcha integration
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.RecaptchaSettings.SiteKey">
            <summary>
            Gets or sets the site key.
            </summary>
            <value>
            The site key.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.RecaptchaSettings.SecretKey">
            <summary>
            Gets or sets the secret key.
            </summary>
            <value>
            The secret key.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.StringEditorAttribute">
            <summary>
            Indicates that the target property should use a "String" editor.
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomEditorAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.StringEditorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.StringEditorAttribute"/> class.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.TextAreaEditorAttribute">
            <summary>
            Indicates that the target property should use a "TextArea" editor.
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomEditorAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.TextAreaEditorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.TextAreaEditorAttribute"/> class.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.TextAreaEditorAttribute.Cols">
            <summary>
            Gets or sets the cols for textarea.
            </summary>
            <value>
            The cols.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.TextAreaEditorAttribute.Rows">
            <summary>
            Gets or sets the rows for textarea.
            </summary>
            <value>
            The rows.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.TimeEditorAttribute">
            <summary>
            Indicates that the target property should use a "Time" editor.
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomEditorAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.TimeEditorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.TimeEditorAttribute"/> class.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.TimeEditorAttribute.NoEmptyOption">
            <summary>
            Gets or sets a value indicating whether empty option should be shown.
            </summary>
            <value>
              <c>true</c> if no empty option; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.TimeEditorAttribute.StartHour">
            <summary>
            Gets or sets the start hour between 0 and 23.
            </summary>
            <value>
            The start hour.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.TimeEditorAttribute.EndHour">
            <summary>
            Gets or sets the end hour between 0 and 23.
            </summary>
            <value>
            The end hour.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.TimeEditorAttribute.IntervalMinutes">
            <summary>
            Gets or sets the interval minutes.
            </summary>
            <value>
            The interval minutes.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.URLEditorAttribute">
            <summary>
            Indicates that the target property should use a "Url" editor.
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomEditorAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.URLEditorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.URLEditorAttribute"/> class.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.GroupOrderAttribute">
            <summary>
            Sets in which order this property should be grouped by.
            This is only meaningful when a grid has grouping, and it
            sets the default grouped columns. The properties with this
            attribute are the default ones grouped by and their groupOrder
            determines in which order they are grouped by.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.ComponentModel.GroupOrderAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.GroupOrderAttribute"/> class.
            </summary>
            <param name="groupOrder">The group order.</param>
        </member>
        <member name="P:Serenity.ComponentModel.GroupOrderAttribute.GroupOrder">
            <summary>
            Gets the group order.
            </summary>
            <value>
            The group order.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.HeaderCssClassAttribute">
            <summary>
            Sets the CSS class for grid column headers. It sets headerCssClass property of SlickColumn.
            This has no effect for forms.
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.HeaderCssClassAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.HeaderCssClassAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Serenity.ComponentModel.HeaderCssClassAttribute.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.HideOnInsertAttribute">
            <summary>
            Controls whether this field is visible on new record mode
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.HideOnInsertAttribute.#ctor(System.Boolean)">
            <summary>
            Controls whether this field is visible on new record mode
            </summary>
            <param name="value">True to hide field on insert</param>
        </member>
        <member name="P:Serenity.ComponentModel.HideOnInsertAttribute.Value">
            <summary>
            Gets a value indicating whether this <see cref="T:Serenity.ComponentModel.HideOnInsertAttribute"/> is on.
            </summary>
            <value>
              <c>true</c> if on; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.HideOnUpdateAttribute">
            <summary>
            Controls whether this field is visible on edit record mode
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.HideOnUpdateAttribute.#ctor(System.Boolean)">
            <summary>
            Controls whether this field is visible on edit record mode
            </summary>
            <param name="value">True to hide field on update</param>
        </member>
        <member name="P:Serenity.ComponentModel.HideOnUpdateAttribute.Value">
            <summary>
            Gets a value indicating whether this <see cref="T:Serenity.ComponentModel.HideOnUpdateAttribute"/> is on.
            </summary>
            <value>
              <c>true</c> if on; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.HintAttribute">
            <summary>
            Sets a hint for a form field. 
            Hint is shown when field label is hovered. 
            This has no effect on columns.
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.HintAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.HintAttribute"/> class.
            </summary>
            <param name="hint">The hint.</param>
        </member>
        <member name="P:Serenity.ComponentModel.HintAttribute.Hint">
            <summary>
            Gets the hint.
            </summary>
            <value>
            The hint.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.IgnoreAttribute">
            <summary>
            Skips a property while generating grid column or form field list.
            Use this to ignore a property for UI, but still use it for other 
            purposes like JSON serialization.
            This might be useful when a type is used as a Service Request and Form
            Declaration at the same time.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.IgnoreNameAttribute">
            <summary>
            Skips checking a property name. This is usually used along with BasedOnRow attribute
            CheckNames = true to skip checking property name if it matches a field property name in the row.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.FormCssClassAttribute">
            <summary>
            Sets CSS class for field on forms only. 
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.FormCssClassAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.FormCssClassAttribute"/> class.
            </summary>
            <param name="cssClass">The CSS class.</param>
        </member>
        <member name="P:Serenity.ComponentModel.FormCssClassAttribute.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.FormCssClassAttribute.UntilNext">
            <summary>
            Applies this form css class to all following fields 
            until next another FormCssClass attribute
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.FormWidthAttribute">
            <summary>
            Sets CSS class for field on forms only. Useful for Bootstrap grid, e.g. col-md-4 etc.
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.FormWidthAttribute.#ctor">
            <summary>
            Creates a FormWidth attribute with no initial column classes.
            Make sure to set properties to make it useful.
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.FormWidthAttribute.#ctor(System.String)">
            <summary>
            Creates a FormWidth attribute with given custom css class,
            like col-md-6 col-sm-4 etc.
            </summary>
            <param name="cssClass"></param>
        </member>
        <member name="P:Serenity.ComponentModel.FormWidthAttribute.XSmall">
            <summary>
            Gets / sets cols (1..12) in extra small devices (width &lt; 768px, mobile phones)
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.FormWidthAttribute.Small">
            <summary>
            Gets / sets cols (1..12) in small devices (width >= 768px, tablets)
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.FormWidthAttribute.Medium">
            <summary>
            Gets / sets cols (1..12) in medium devices (width >= 992px, medium desktops)
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.FormWidthAttribute.Large">
            <summary>
            Gets / sets cols (1..12) in large devices (width >= 1200px, large desktops)
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.FormWidthAttribute.Value">
            <summary>
            Gets the css class that will be applied to field
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.FormWidthAttribute.UntilNext">
            <summary>
            Applies this form width (e.g. bootstrap grid size) to all 
            following fields until next another FormWidth attribute
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.FormWidthAttribute.JustThis">
            <summary>
            Applies this form width (e.g. bootstrap grid size) to just 
            current field and doesn't cancel prior form width attribute
            with a UntilNext attribute. Don't set UntilNext = true if
            you set JustThis = true, as they are exclusive
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.FullWidthAttribute">
            <summary>
            Set form field width class to null, e.g. full width
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.FullWidthAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.FullWidthAttribute"/> class.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.HalfWidthAttribute">
            <summary>
            Marks form field with "col-sm-6" css class, which makes it allocate half of form row
            on device widths >= 768px (e.g. iPad)
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.HalfWidthAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.HalfWidthAttribute"/> class.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.LabelWidthAttribute">
            <summary>
            Determines label with of target property, and optionally 
            the properties following it until another of this attribute
            is used.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.ComponentModel.LabelWidthAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.LabelWidthAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Serenity.ComponentModel.LabelWidthAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.LabelWidthAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Serenity.ComponentModel.LabelWidthAttribute.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.LabelWidthAttribute.UntilNext">
            <summary>
            Gets or sets a value indicating whether this attribute should apply 
            to following properties until next occurence of this attribute 
            without JustThis flag.
            </summary>
            <value>
              <c>true</c> if [until next]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.LabelWidthAttribute.JustThis">
            <summary>
            Gets or sets a value indicating whether this attribute
            shouldn't break effectiveness of another LabelWidth attribute 
            with UntilNext flag.
            For example, if you set all fields to 100px by adding a
            [LabelWidth("100px", UntilNext = true)] attribute to the first 
            property of a form, but just want to change one property in 
            the middle to 200px, and if you add [LabelWidth("200px")] 
            to that property, 100px would not apply to following ones.
            But if you did [LabelWidth("200px", JustThis = true)], 100px
            will still apply to following ones.
            </summary>
            <value>
              <c>true</c> if it should break effectiveness of a prior LabelWidth
              attribute with UntilNext flag, otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.MediumHalfLargeQuarterWidthAttribute">
            <summary>
            Marks form field with "col-md-6 col-lg-3" css class, which makes it allocate half of form row
            on device widths >= 992px (some desktop), and quarter on device widths >= 1200px
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.MediumHalfLargeQuarterWidthAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.MediumHalfLargeQuarterWidthAttribute"/> class.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.MediumHalfLargeThirdWidthAttribute">
            <summary>
            Marks form field with "col-md-6 col-lg-4" css class, which makes it allocate half of form row
            on device widths >= 992px (some desktop), and third on device widths >= 1200px
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.MediumHalfLargeThirdWidthAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.MediumHalfLargeThirdWidthAttribute"/> class.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.MediumHalfWidthAttribute">
            <summary>
            Marks form field with "col-md-6" css class, which makes it allocate half of form row
            on device widths >= 992px (some desktops)
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.MediumHalfWidthAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.MediumHalfWidthAttribute"/> class.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.MediumQuarterWidthAttribute">
            <summary>
            Marks form field with "col-md-3" css class, which makes it allocate 
            quarter on device widths >= 992px (some desktops)
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.MediumQuarterWidthAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.MediumQuarterWidthAttribute"/> class.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.MediumThirdLargeQuarterWidthAttribute">
            <summary>
            Marks form field with "col-md-4 col-lg-3" css class, which makes it allocate third of form row
            on device widths >= 992px (some desktop), and quarter on device widths >= 1200px
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.MediumThirdLargeQuarterWidthAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.MediumThirdLargeQuarterWidthAttribute"/> class.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.OneThirdWidthAttribute">
            <summary>
            Marks form field with "col-md-4" css class, which makes it allocate a third of form row
            on device widths >= 992px (e.g. medium desktop)
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.OneThirdWidthAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.OneThirdWidthAttribute"/> class.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.QuarterWidthAttribute">
            <summary>
            Marks form field with "col-lg-3 col-sm-6" css class, which makes it allocate half of form row
            on device widths >= 768 (e.g. ipad), and quarter on device widths >= 1200px (desktop)
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.QuarterWidthAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.QuarterWidthAttribute"/> class.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.ResetFormWidthAttribute">
            <summary>
            Resets form field width to null. It maybe used to cancel UntilNext flag of a prior width attribute.
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.ResetFormWidthAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.ResetFormWidthAttribute"/> class.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.ResetLabelWidthAttribute">
            <summary>
            Resets form css class to null, it maybe used to cancel a prior LabelWidth attribute with UntilNext = true
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.ResetLabelWidthAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.ResetLabelWidthAttribute"/> class.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.ThreeQuarterWidthAttribute">
            <summary>
            Marks form field with "col-lg-9" css class, which makes it allocate 
            three quarter on device widths >= 1200px
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.ThreeQuarterWidthAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.ThreeQuarterWidthAttribute"/> class.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.TwoThirdWidthAttribute">
            <summary>
            Marks form field with "col-md-8" css class, which makes it allocate two third of form row
            on device widths >= 992px (e.g. medium desktop)
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.TwoThirdWidthAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.TwoThirdWidthAttribute"/> class.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.MaxLengthAttribute">
            <summary>
            Sets the maximum length of an editor attached to the target property.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.ComponentModel.MaxLengthAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.MaxLengthAttribute"/> class.
            </summary>
            <param name="maxLength">The maximum length.</param>
        </member>
        <member name="P:Serenity.ComponentModel.MaxLengthAttribute.MaxLength">
            <summary>
            Gets the maximum length.
            </summary>
            <value>
            The maximum length.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.OneWayAttribute">
            <summary>
            Indicates that the target property should not 
            get serialized when a property grid is saved.
            This means, the editor of the property reads 
            the value from the entity, but it doesn't get
            written back to save entity.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.ComponentModel.OneWayAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.OneWayAttribute"/> class.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.PlaceholderAttribute">
            <summary>
            Sets a placeholder for a form field. Placeholder text is shown inside the editor
            when its value is empty. Only editors using basic inputs and Select2 editor
            supports this.
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.PlaceholderAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.PlaceholderAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Serenity.ComponentModel.PlaceholderAttribute.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.PropertyItem">
            <summary>
            Corresponds to a property item (e.g. a field in property grid
            with a label and editor, or a column specification in a grid)
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.Name">
            <summary>
            Gets or sets the property name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.Title">
            <summary>
            Gets or sets the title, e.g. label of a form field, 
            or caption of a grid column.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.Hint">
            <summary>
            Gets or sets the hint. This is only used for forms and 
            it is shown when the label is hovered.
            </summary>
            <value>
            The hint.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.Placeholder">
            <summary>
            Gets or sets the placeholder for the editor
            when it has an empty value. Only useful for forms.
            </summary>
            <value>
            The placeholder.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.EditorType">
            <summary>
            Gets or sets the type of the editor used in form.
            </summary>
            <value>
            The type of the editor.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.EditorParams">
            <summary>
            Gets or sets the editor parameters 
            that should be passed to the editor while it
            is being created.
            </summary>
            <value>
            The editor parameters.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.Category">
            <summary>
            Gets or sets the category of the property in form.
            Only meaningfull for forms.
            </summary>
            <value>
            The category.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.Collapsible">
            <summary>
            Gets or sets the collapsible flag for the category this property is in.
            Should only be set for the first field in the category.
            </summary>
            <value>
            The collapsible.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.Collapsed">
            <summary>
            Gets or sets the initial collapsed status of the category this property is in.
            </summary>
            <value>
            The collapsed.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.Tab">
            <summary>
            Gets or sets the tab for the property. Used only in forms.
            </summary>
            <value>
            The tab.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.CssClass">
            <summary>
            Gets or sets the CSS class that should be applied to the grid column, 
            e.g. data cells for this property. Only used in grids.
            </summary>
            <value>
            The CSS class.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.HeaderCssClass">
            <summary>
            Gets or sets the header CSS class for the grid column.
            Only used in grids.
            </summary>
            <value>
            The header CSS class.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.FormCssClass">
            <summary>
            Gets or sets the form CSS class for the property.
            This class is applied to containing "div.field" not the editor.
            Only used in forms.
            </summary>
            <value>
            The form CSS class.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.MaxLength">
            <summary>
            Gets or sets the maximum length of the editor in a form.
            </summary>
            <value>
            The maximum length.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.Required">
            <summary>
            Gets or sets the required flag of the property in forms.
            </summary>
            <value>
            The required.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.ReadOnly">
            <summary>
            Gets or sets the read only flag of the property in forms.
            </summary>
            <value>
            The read only.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.ReadPermission">
            <summary>
            Gets or sets the read permission. If user doesn't
            have this permission, they won't see it in grid / form.
            </summary>
            <value>
            The read permission.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.Insertable">
            <summary>
            Gets or sets the insertable flag of the property.
            If this is false, the property won't be serialized
            back in new record forms. Does not apply to grids.
            </summary>
            <value>
            The insertable.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.InsertPermission">
            <summary>
            Gets or sets the insert permission. If user doesn't
            have this permission, field won't be serialized back in new
            record forms and it will be readonly.
            </summary>
            <value>
            The insert permission.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.HideOnInsert">
            <summary>
            Gets or sets the hide on insert flag which controls visibility of the property
            in new record forms.
            </summary>
            <value>
            The hide on insert flag.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.Updatable">
            <summary>
            Gets or sets the updatable flag of the property.
            If it is false, property won't be serialized back
            in edit forms and it will be readonly.
            </summary>
            <value>
            The updatable.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.UpdatePermission">
            <summary>
            Gets or sets the update permission. If user doesn't have
            this permission, field won't be serialized back in edit
            record forms and it will be readonly.
            </summary>
            <value>
            The update permission.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.HideOnUpdate">
            <summary>
            Gets or sets the hide on update flag which controls visibility of the property
            in edit record forms.
            </summary>
            <value>
            The hide on insert flag.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.OneWay">
            <summary>
            Gets or sets the one way flag, which when true field 
            won't be serialized back to entity on save.
            </summary>
            <value>
            The one way.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.DefaultValue">
            <summary>
            Gets or sets the default value of the property in 
            new record forms.
            </summary>
            <value>
            The default value.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.Localizable">
            <summary>
            Gets or sets the localizable flag of the property.
            Only fields with this flag are shown in localization
            tab of entity dialog.
            </summary>
            <value>
            The localizable.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.Visible">
            <summary>
            Gets or sets the visible flag. Only used for columns.
            </summary>
            <value>
            The visible.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.AllowHide">
            <summary>
            Gets or sets the allow hide flag for columns.
            </summary>
            <value>
            The allow hide.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.FormatterType">
            <summary>
            Gets or sets the type of the formatter for columns.
            </summary>
            <value>
            The type of the formatter.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.FormatterParams">
            <summary>
            Gets or sets the formatter parameters for columns.
            </summary>
            <value>
            The formatter parameters.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.DisplayFormat">
            <summary>
            Gets or sets the display format to be passed to the formatter
            of a column. Note that display format has no effect on 
            editors.
            </summary>
            <value>
            The display format.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.Alignment">
            <summary>
            Gets or sets the alignment of the column.
            Only applies to column, not editors.
            </summary>
            <value>
            The alignment.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.Width">
            <summary>
            Gets or sets the width of the column.
            Does not apply to forms.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.WidthSet">
            <summary>
            Gets or sets the width explicitly set flag.
            If property has a [Width] attribute this property
            is true. If property column width is automatically
            calculated by Serenity based on field metadata, it 
            is false.
            </summary>
            <value>
            The width set.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.MinWidth">
            <summary>
            Gets or sets the minimum width of a column.
            </summary>
            <value>
            The minimum width.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.MaxWidth">
            <summary>
            Gets or sets the maximum width of a column.
            </summary>
            <value>
            The maximum width.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.LabelWidth">
            <summary>
            Gets or sets the width of the label in forms.
            </summary>
            <value>
            The width of the label.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.Resizable">
            <summary>
            Gets or sets the resizable flag of a column.
            </summary>
            <value>
            The resizable.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.Sortable">
            <summary>
            Gets or sets the sortable flag of a column.
            </summary>
            <value>
            The sortable.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.SortOrder">
            <summary>
            Gets or sets the sort order of a column, 
            e.g. in which position this column is sorted by default in the grid.
            Only applies to grids, not forms.
            </summary>
            <value>
            The sort order.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.GroupOrder">
            <summary>
            Gets or sets the grouping order of a column, 
            e.g. in which position this column is grouped by default in the grid.
            Only applies to grids, not forms.
            </summary>
            <value>
            The sort order.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.SummaryType">
            <summary>
            Gets or sets the type of the summary. Only applies to grids.
            </summary>
            <value>
            The type of the summary.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.EditLink">
            <summary>
            Gets or sets the edit link flag. Determines if column
            should have a edit link to open related dialog.
            </summary>
            <value>
            The edit link.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.EditLinkItemType">
            <summary>
            Gets or sets the type of the edit link item type
            if it is different than the item type of the grid.
            </summary>
            <value>
            The type of the edit link item.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.EditLinkIdField">
            <summary>
            Gets or sets the edit link identifier (e.g. ID) field.
            If edit link is in CompanyName field, EditLinkId field
            might be CompanyId.
            </summary>
            <value>
            The edit link identifier field.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.EditLinkCssClass">
            <summary>
            Gets or sets the edit link CSS class.
            </summary>
            <value>
            The edit link CSS class.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.FilteringType">
            <summary>
            Gets or sets the type of the filtering for the column.
            </summary>
            <value>
            The type of the filtering.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.FilteringParams">
            <summary>
            Gets or sets the filtering parameters.
            </summary>
            <value>
            The filtering parameters.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.FilteringIdField">
            <summary>
            Gets or sets the filtering identifier field.
            If the column is CompanyName, its FilteringIdField
            might be CompanyId.
            </summary>
            <value>
            The filtering identifier field.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.FilterOnly">
            <summary>
            Gets or sets the filter only flag, e.g. this property
            should not be used for forms/grids, it is here
            only to set filtering options.
            </summary>
            <value>
            The filter only.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.NotFilterable">
            <summary>
            Gets or sets the not filterable that disables
            filtering by the property in advanced filter dialog.
            </summary>
            <value>
            The not filterable.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.QuickFilter">
            <summary>
            Gets or sets the quick filter flag.
            Only used for columns.
            </summary>
            <value>
            The quick filter.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.QuickFilterParams">
            <summary>
            Gets or sets the quick filter parameters.
            </summary>
            <value>
            The quick filter parameters.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.QuickFilterSeparator">
            <summary>
            Gets or sets the quick filter separator flag.
            </summary>
            <value>
            The quick filter separator.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.QuickFilterCssClass">
            <summary>
            Gets or sets the quick filter CSS class.
            </summary>
            <value>
            The quick filter CSS class.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.PropertyItem.ExtensionData">
            <summary>
            Gets or sets the extension data, used for JSON.NET
            serialization / deserialization of dynamic properties.
            </summary>
            <value>
            The extension data.
            </value>
        </member>
        <member name="M:Serenity.ComponentModel.PropertyItem.ShouldSerializeEditorType">
            <summary>
            Should the EditorType property be serialized by JSON.NET, used to reduce JSON size.
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.PropertyItem.ShouldSerializeFilteringType">
            <summary>
            Should the FilteringType property be serialized by JSON.NET, used to reduce JSON size.
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.PropertyItem.ShouldSerializeEditorParams">
            <summary>
            Should the EditorParams property be serialized by JSON.NET, used to reduce JSON size.
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.PropertyItem.ShouldSerializeFormatterParams">
            <summary>
            Should the FormatterParams property be serialized by JSON.NET, used to reduce JSON size.
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.PropertyItem.ShouldSerializeFilteringParams">
            <summary>
            Should the FilteringParams property be serialized by JSON.NET, used to reduce JSON size.
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.PropertyItem.ShouldSerializeQuickFilterParams">
            <summary>
            Should the QuickFilterParams property be serialized by JSON.NET, used to reduce JSON size.
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.PropertyItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.PropertyItem"/> class.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.RequiredAttribute">
            <summary>
            Determines if field is required in form.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.ComponentModel.RequiredAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.RequiredAttribute"/> class.
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.RequiredAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.RequiredAttribute"/> class.
            </summary>
            <param name="isRequired">if set to <c>true</c> [is required].</param>
        </member>
        <member name="P:Serenity.ComponentModel.RequiredAttribute.IsRequired">
            <summary>
            Gets the target property required value.
            </summary>
            <value>
              <c>true</c> if target property is required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.ResizableAttribute">
            <summary>
            Determines resizability of a target column.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.ComponentModel.ResizableAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.ResizableAttribute"/> class.
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.ResizableAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.ResizableAttribute"/> class.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="P:Serenity.ComponentModel.ResizableAttribute.Value">
            <summary>
            Gets a value indicating whether the target is resizable.
            </summary>
            <value>
              <c>true</c> if resizable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.SortOrderAttribute">
            <summary>
            Sets the column as sorted by default, and its index among sorted columns.
            Negative values means descending sort. Applies only to columns.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.ComponentModel.SortOrderAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.SortOrderAttribute"/> class.
            </summary>
            <param name="sortOrder">The sort order.</param>
        </member>
        <member name="M:Serenity.ComponentModel.SortOrderAttribute.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.SortOrderAttribute"/> class.
            </summary>
            <param name="sortOrder">The sort order.</param>
            <param name="descending">if set to <c>true</c> descending sort.</param>
        </member>
        <member name="P:Serenity.ComponentModel.SortOrderAttribute.SortOrder">
            <summary>
            Gets the sort order.
            </summary>
            <value>
            The sort order.
            </value>
        </member>
        <member name="P:Serenity.ComponentModel.SortOrderAttribute.Descending">
            <summary>
            Gets a value indicating whether sort is descending.
            </summary>
            <value>
              <c>true</c> if descending; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.TabAttribute">
            <summary>
            Sets a tab for a form field.
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.TabAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.TabAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Serenity.ComponentModel.TabAttribute.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.FileUploadEditorAttribute">
            <summary>
            Sets editor type as "ImageUpload" (single), while allowing non-image files.
            </summary>
            <seealso cref="T:Serenity.ComponentModel.ImageUploadEditorAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.FileUploadEditorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.FileUploadEditorAttribute"/> class.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.ImageUploadEditorAttribute">
            <summary>
            Sets editor type as "ImageUpload", which only allows image files.
            Make sure you use this attribute in Row.cs, not Form.cs as 
            the image upload behavior only works if it is in row, otherwise
            your files will stay in temporary directory.
            </summary>
            <seealso cref="T:Serenity.ComponentModel.CustomEditorAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.ImageUploadEditorAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.ImageUploadEditorAttribute"/> class.
            </summary>
            <param name="editorType">Type of the editor.</param>
        </member>
        <member name="M:Serenity.ComponentModel.ImageUploadEditorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.ImageUploadEditorAttribute"/> class.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.AllowNonImage">
            <summary>
            Should non-image uploads be allowed.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.MaxSize">
            <summary>
            Maximum size in bytes of the uploaded file.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.MinSize">
            <summary>
            Minimum size in bytes of the uploaded file.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.MaxHeight">
            <summary>
            Maximum height in pixels of the uploaded image.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.MaxWidth">
            <summary>
            Maximum width in pixels of the uploaded image.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.MinHeight">
            <summary>
            Minimum height in pixels of the uploaded image.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.MinWidth">
            <summary>
            Minimum width in pixels of the uploaded image.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.ScaleWidth">
            <summary>
            What width image should be scaled to. Default value of 0 disables it.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.ScaleHeight">
            <summary>
            What height image should be scaled to. Default value of 0 disables it.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.ScaleSmaller">
            <summary>
            Should image be scaled up to requested size when its smaller
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.ScaleMode">
            <summary>
            What kind of image scaling should be used to generate image.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.ThumbSizes">
            <summary>
            List of thumbnail sizes requested. Something like
            "96x96;128x128;200x200"
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.ThumbMode">
            <summary>
            What kind of image scaling should be used to generate thumbnails.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.JsonEncodeValue">
            <summary>
            Only useful for MultipleImageUploadeEditor. Specifies
            whether to JSON encode value. If your field is a string
            field set it to true.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.OriginalNameProperty">
            <summary>
            If you want to store original name of the file uploaded,
            set this to the name of another string field. Only used
            for single image uploads.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.DisplayFileName">
            <summary>
            If you have no original name property but use original
            name in file name with {4} format parameter, set this
            to true to force ImageUploadEditor show file name.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.CopyToHistory">
            <summary>
            Should a copy of file placed in a special history folder on upload. 
            This helps preserving old files on update.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.FilenameFormat">
            <summary>
            Format of the file name like "ProductImage/{1:00000}/{0:00000000}_{2}".
            Parameter 0 is the row identity value, 1 is identity value / 1000, 
            and 2 is a random string like 2cxs4bc, 3 is current date/time,
            4 is original file name.
            You can also use the shortcut "ProductImage/~" which is equivalent 
            to the prior sample.
            If you don't specify this, it will default to something like
            Product/ProductImage/~ which is generated by combining row class name
            and field name.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.DisableDefaultBehavior">
            <summary>
            If you don't want ImageUploadBehavior to process this upload, 
            and want to handle it manually, set to true (not recommended)
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.SubFolder">
            <summary>
            Avoid. For compability with older versions.
            This part of filename is used as a prefix to FilenameFormat,
            but it is not stored in database.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.MultipleFileUploadEditorAttribute">
            <summary>
            Sets editor type to "MultipleImageUpload" while allowing non-image files.
            </summary>
            <seealso cref="T:Serenity.ComponentModel.ImageUploadEditorAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.MultipleFileUploadEditorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.MultipleFileUploadEditorAttribute"/> class.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.MultipleImageUploadEditorAttribute">
            <summary>
            Sets editor type to "MultipleImageUpload" which doesn't allow
            non-image file types by default.
            </summary>
            <seealso cref="T:Serenity.ComponentModel.ImageUploadEditorAttribute" />
        </member>
        <member name="M:Serenity.ComponentModel.MultipleImageUploadEditorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.MultipleImageUploadEditorAttribute"/> class.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.SettingKeyAttribute">
            <summary>
            Determines key for a setting type.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.ComponentModel.SettingKeyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.SettingKeyAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Serenity.ComponentModel.SettingKeyAttribute.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Serenity.ComponentModel.SettingScopeAttribute">
            <summary>
            Determines scope of a setting like "Application", "Database", "Tenant" etc.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.ComponentModel.SettingScopeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.ComponentModel.SettingScopeAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Serenity.ComponentModel.SettingScopeAttribute.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Serenity.SummaryType">
            <summary>
            Enumeration of aggregate function types for a column
            </summary>
        </member>
        <member name="F:Serenity.SummaryType.Disabled">
            <summary>
            Summary popup is disabled for this column
            </summary>
        </member>
        <member name="F:Serenity.SummaryType.None">
            <summary>
            No aggregate by default, but user might change
            </summary>
        </member>
        <member name="F:Serenity.SummaryType.Sum">
            <summary>
            Use Sum aggregate by default
            </summary>
        </member>
        <member name="F:Serenity.SummaryType.Avg">
            <summary>
            Use Avg aggregate by default
            </summary>
        </member>
        <member name="F:Serenity.SummaryType.Min">
            <summary>
            Use Min aggregate by default
            </summary>
        </member>
        <member name="F:Serenity.SummaryType.Max">
            <summary>
            Use Max aggregate by default
            </summary>
        </member>
        <member name="T:Serenity.Extensibility.BaseRegistrarAttribute">
            <summary>
            Base class for attributes attached to an assembly that should run static constructor
            of a type at app start.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.Extensibility.BaseRegistrarAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Extensibility.BaseRegistrarAttribute"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="P:Serenity.Extensibility.BaseRegistrarAttribute.Type">
            <summary>
            Gets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="T:Serenity.Extensibility.NestedLocalTextsAttribute">
            <summary>
            Indicates that this class contains local texts with optionally
            subclasses that also contains local texts with keys joined by "."
            between each class name. The topmost class has no local text
            prefix by default and its name doesn't take role in local text 
            key generation.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.Extensibility.NestedLocalTextsAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Extensibility.NestedLocalTextsAttribute"/> class.
            </summary>
        </member>
        <member name="P:Serenity.Extensibility.NestedLocalTextsAttribute.LanguageID">
            <summary>
            Gets or sets the optional language identifier.
            </summary>
            <value>
            The language identifier.
            </value>
        </member>
        <member name="P:Serenity.Extensibility.NestedLocalTextsAttribute.Prefix">
            <summary>
            Gets or sets the optional local text prefix.
            </summary>
            <value>
            The local text prefix.
            </value>
        </member>
        <member name="T:Serenity.Extensibility.NestedPermissionKeysAttribute">
            <summary>
            Indicates that this class contains permission keys with optional
            subclasses that also contains permission keys.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.Extensibility.NestedPermissionKeysAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Extensibility.NestedPermissionKeysAttribute"/> class.
            </summary>
        </member>
        <member name="P:Serenity.Extensibility.NestedPermissionKeysAttribute.LanguageID">
            <summary>
            Gets / sets optional language identifier that specifies
            language for texts specified in [DisplayName] attribute.
            </summary>
            <value>
            The language identifier.
            </value>
        </member>
        <member name="T:Serenity.Extensibility.ScriptRegistrarAttribute">
            <summary>
            Obsolete. Used on assembly to register classes with static constructors that 
            registers scripts to run at startup.
            </summary>
            <seealso cref="T:Serenity.Extensibility.BaseRegistrarAttribute" />
        </member>
        <member name="M:Serenity.Extensibility.ScriptRegistrarAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Extensibility.ScriptRegistrarAttribute"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="T:Serenity.Extensibility.ExtensibilityHelper">
            <summary>
            Contains helper functions for extensibility through reflection.
            </summary>
        </member>
        <member name="P:Serenity.Extensibility.ExtensibilityHelper.SelfAssemblies">
            <summary>
            Gets or sets the self assemblies. These are assemblies that has
            reference to Serenity libraries, and those that should be scanned
            during code generation etc.
            </summary>
            <value>
            The self assemblies.
            </value>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="M:Serenity.Extensibility.ExtensibilityHelper.GetTypesWithInterface(System.Type,System.Reflection.Assembly[])">
            <summary>
            Gets the types with interface.
            </summary>
            <param name="intf">The intf.</param>
            <param name="assemblies">The assemblies. If null self assemblies are used.</param>
            <returns>Types with given interface</returns>
        </member>
        <member name="M:Serenity.Extensibility.ExtensibilityHelper.RunClassConstructor(System.Type)">
            <summary>
            Runs the class constructor (static constructor) if any.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="T:Serenity.SelfAssemblyAttribute">
            <summary>
            Obsolete attribute used to discriminate Serenity referencing assemblies from system ones.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Serenity.Data.DeletePermissionAttribute">
            <summary>
            Sets delete permission for the row.
            </summary>
            <seealso cref="T:Serenity.Data.PermissionAttributeBase" />
        </member>
        <member name="M:Serenity.Data.DeletePermissionAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.DeletePermissionAttribute"/> class.
            </summary>
            <param name="permission">The permission.</param>
        </member>
        <member name="M:Serenity.Data.DeletePermissionAttribute.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.DeletePermissionAttribute"/> class.
            A colon is inserted between module and permission to generate permission key
            </summary>
            <param name="module">The module.</param>
            <param name="permission">The permission.</param>
        </member>
        <member name="M:Serenity.Data.DeletePermissionAttribute.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.DeletePermissionAttribute"/> class.
            A colon is inserted between module, submodule and permission to generate permission key.
            </summary>
            <param name="module">The module.</param>
            <param name="submodule">The submodule.</param>
            <param name="permission">The permission.</param>
        </member>
        <member name="T:Serenity.Data.InsertPermissionAttribute">
            <summary>
            Sets delete permission for the row.
            </summary>
            <seealso cref="T:Serenity.Data.PermissionAttributeBase" />
        </member>
        <member name="M:Serenity.Data.InsertPermissionAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.InsertPermissionAttribute"/> class.
            </summary>
            <param name="permission">The permission.</param>
        </member>
        <member name="M:Serenity.Data.InsertPermissionAttribute.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.InsertPermissionAttribute"/> class.
            A colon is inserted between module and permission to generate permission key.
            </summary>
            <param name="module">The module.</param>
            <param name="permission">The permission.</param>
        </member>
        <member name="M:Serenity.Data.InsertPermissionAttribute.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.InsertPermissionAttribute"/> class.
            A colon is inserted between module, submodule and permission to generate permission key.
            </summary>
            <param name="module">The module.</param>
            <param name="submodule">The submodule.</param>
            <param name="permission">The permission.</param>
        </member>
        <member name="T:Serenity.Data.ModifyPermissionAttribute">
            <summary>
            Sets modify permission for the row.
            Modify permission is used for Insert/Update/Delete if they are
            not explicitly specified.
            </summary>
            <seealso cref="T:Serenity.Data.PermissionAttributeBase" />
        </member>
        <member name="M:Serenity.Data.ModifyPermissionAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.ModifyPermissionAttribute"/> class.
            </summary>
            <param name="permission">The permission.</param>
        </member>
        <member name="M:Serenity.Data.ModifyPermissionAttribute.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.ModifyPermissionAttribute"/> class.
            A colon is inserted between module and permission to generate permission key.
            </summary>
            <param name="module">The module.</param>
            <param name="permission">The permission.</param>
        </member>
        <member name="M:Serenity.Data.ModifyPermissionAttribute.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.ModifyPermissionAttribute"/> class.
            A colon is inserted between module, submodule and permission to generate permission key.
            </summary>
            <param name="module">The module.</param>
            <param name="submodule">The submodule.</param>
            <param name="permission">The permission.</param>
        </member>
        <member name="T:Serenity.Data.PermissionAttributeBase">
            <summary>
            An abstract base attribute that all permission related attributes derive from.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Serenity.Data.PermissionAttributeBase.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.PermissionAttributeBase"/> class.
            </summary>
            <param name="permission">The permission.</param>
        </member>
        <member name="M:Serenity.Data.PermissionAttributeBase.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.PermissionAttributeBase"/> class.
            A colon is inserted between module and permission to generate permission key.
            </summary>
            <param name="module">The module.</param>
            <param name="permission">The permission.</param>
        </member>
        <member name="M:Serenity.Data.PermissionAttributeBase.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.PermissionAttributeBase"/> class.
            A colon is inserted between module, submodule and permission to generate permission key.
            </summary>
            <param name="module">The module.</param>
            <param name="submodule">The submodule.</param>
            <param name="permission">The permission.</param>
        </member>
        <member name="P:Serenity.Data.PermissionAttributeBase.Permission">
            <summary>
            Gets the permission.
            </summary>
            <value>
            The permission.
            </value>
        </member>
        <member name="T:Serenity.Data.ReadPermissionAttribute">
            <summary>
            Sets read permission for the row.
            </summary>
            <seealso cref="T:Serenity.Data.PermissionAttributeBase" />
        </member>
        <member name="M:Serenity.Data.ReadPermissionAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.ReadPermissionAttribute"/> class.
            </summary>
            <param name="permission">The permission.</param>
        </member>
        <member name="M:Serenity.Data.ReadPermissionAttribute.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.ReadPermissionAttribute"/> class.
            A colon is inserted between module and permission to generate permission key.
            </summary>
            <param name="module">The module.</param>
            <param name="permission">The permission.</param>
        </member>
        <member name="M:Serenity.Data.ReadPermissionAttribute.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.ReadPermissionAttribute"/> class.
            A colon is inserted between module, submodule and permission to generate permission key.
            </summary>
            <param name="module">The module.</param>
            <param name="submodule">The submodule.</param>
            <param name="permission">The permission.</param>
        </member>
        <member name="T:Serenity.Data.UpdatePermissionAttribute">
            <summary>
            Sets update permission for the row.
            </summary>
            <seealso cref="T:Serenity.Data.PermissionAttributeBase" />
        </member>
        <member name="M:Serenity.Data.UpdatePermissionAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.UpdatePermissionAttribute"/> class.
            </summary>
            <param name="permission">The permission.</param>
        </member>
        <member name="M:Serenity.Data.UpdatePermissionAttribute.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.UpdatePermissionAttribute"/> class.
            A colon is inserted between module and permission to generate permission key.
            </summary>
            <param name="module">The module.</param>
            <param name="permission">The permission.</param>
        </member>
        <member name="M:Serenity.Data.UpdatePermissionAttribute.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Data.UpdatePermissionAttribute"/> class.
            A colon is inserted between module, submodule and permission to generate permission key.
            </summary>
            <param name="module">The module.</param>
            <param name="submodule">The submodule.</param>
            <param name="permission">The permission.</param>
        </member>
        <member name="T:Serenity.Data.Base32">
            <summary>
              This class is based on the Base32 class from DC# 0.31
              All credits to Jonathan Bindel.</summary>
        </member>
        <member name="M:Serenity.Data.Base32.#ctor">
            <summary>
              Solo constructor is private to prevent external instantiation of this class</summary>
        </member>
        <member name="M:Serenity.Data.Base32.Encode(System.Byte[])">
            <summary>
              Encode a buffer using the default options</summary>
            <param name="bytes">
              The buffer (required).</param>
            <returns>
              An encoded string that holds the contents of the inputs</returns>
        </member>
        <member name="M:Serenity.Data.Base32.Decode(System.String)">
            <summary>
              Decode a Base32 string into a byte array</summary>
            <param name="base32">
              The Base32 string (required)</param>
            <returns>
              The decoded byte array</returns>
        </member>
        <member name="T:Serenity.Data.BinarySerialization">
            <summary>
            Contains helper functions for serialization and deserialization of data items (e.g.cached items)
            </summary>
        </member>
        <member name="M:Serenity.Data.BinarySerialization.Serialize(System.Action{System.IO.BinaryWriter})">
            <summary>
            A helper method to serialize objects with BinaryWriter. Creates a memory stream 
            and a BinaryWriter on it, and invokes the callback specified.
            </summary>
            <param name="serialize">Serialization delegate</param>
        </member>
        <member name="M:Serenity.Data.BinarySerialization.Deserialize``1(System.Byte[],System.Func{System.IO.BinaryReader,``0})">
            <summary>
            A helper method to deserialize objects with BinaryWriter. Creates a memory stream 
            and a BinaryReader on it, and invokes the callback specified.
            </summary>
            <param name="input">Input array</param>
            <param name="deserialize">Deserialization delegate</param>
        </member>
        <member name="T:Serenity.Data.JsonSafeInt64Converter">
            <summary>
              Serialize/deserialize a row</summary>
        </member>
        <member name="M:Serenity.Data.JsonSafeInt64Converter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
              Writes the JSON representation of the object.</summary>
            <param name="writer">
              The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">
              The value.</param>
            <param name="serializer">
              The calling serializer.</param>
        </member>
        <member name="M:Serenity.Data.JsonSafeInt64Converter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
              Reads the JSON representation of the object.</summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">
              Type of the object.</param>
            <param name="existingValue">
              The existing value of object being read.</param>
            <param name="serializer">
              The calling serializer.</param>
            <returns>
              The object value.</returns>
        </member>
        <member name="M:Serenity.Data.JsonSafeInt64Converter.CanConvert(System.Type)">
            <summary>
              Determines whether this instance can convert the specified object type.</summary>
            <param name="objectType">
              Type of the object.</param>
            <returns>
              True if this instance can convert the specified object type; otherwise, false.</returns>
        </member>
        <member name="P:Serenity.Data.JsonSafeInt64Converter.CanRead">
            <summary>
              Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can read JSON.</summary>
            <value>
              True if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, false.</value>
        </member>
        <member name="P:Serenity.Data.JsonSafeInt64Converter.CanWrite">
            <summary>
              Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON.</summary>
            <value>
              True if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, false.</value>
        </member>
        <member name="T:Serenity.Configuration.AppSettingsJsonConfigRepository">
            <summary>
            Implementation of IConfigRepository which reads its settings
            from appSettings section in web.config (ASP.NET MVC), or "AppSettings"
            subkey in appsettings.json (.NET Core).
            </summary>
            <seealso cref="T:Serenity.Abstractions.IConfigurationRepository" />
        </member>
        <member name="M:Serenity.Configuration.AppSettingsJsonConfigRepository.Save(System.Type,System.Object)">
            <summary>
            Saves configuration for the specified setting type.
            Not implemented for this provider.
            </summary>
            <param name="settingType">Setting type</param>
            <param name="value">Setting value</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Serenity.Configuration.AppSettingsJsonConfigRepository.Load(System.Type)">
            <summary>
            Loads configuration for the specified setting type.
            Returns an object instance, even if setting is not found.
            </summary>
            <param name="settingType">Setting type</param>
            <returns>Loaded setting</returns>
        </member>
        <member name="T:Serenity.Configuration.JsonConfigHelper">
            <summary>
            Helper class for loading JSON config from a file.
            </summary>
        </member>
        <member name="M:Serenity.Configuration.JsonConfigHelper.LoadConfig``1(System.String)">
            <summary>
            Loads the JSON configuration from specified file.
            </summary>
            <typeparam name="TConfig">The type of the configuration.</typeparam>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Configuration.JsonLocalTextsHelper">
            <summary>
            Unused class, left for backward compatibility
            </summary>
        </member>
        <member name="T:Serenity.Config">
            <summary>
            Central location to access configuration settings.
            </summary>
        </member>
        <member name="M:Serenity.Config.Get(System.Type)">
            <summary>
            Returns configuration settings for specified setting type. 
            If setting is not found in its storage, returns a new object instance.
            </summary>
            <param name="settingType">Setting type.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            IConfigurationRepository for setting scope is not set.</exception>
        </member>
        <member name="M:Serenity.Config.TryGet(System.Type)">
            <summary>
            Returns configuration settings for specified setting type. 
            If setting is not found in its storage, returns a new object instance.
            If IConfigurationRepository for setting scope is not set returns null.
            </summary>
            <param name="settingType">Setting type.</param>
        </member>
        <member name="M:Serenity.Config.Get``1">
            <summary>
            Returns configuration settings for specified setting type. 
            If setting is not found in its storage, returns a new object instance.
            </summary>
            <typeparam name="TSettings">Setting type</typeparam>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            IConfigurationRepository for setting scope is not set.</exception>
        </member>
        <member name="M:Serenity.Config.TryGet``1">
            <summary>
            Returns configuration settings for specified setting type. 
            If setting is not found in its storage, returns a new object instance.
            If IConfigurationRepository for setting scope is not set returns null.
            </summary>
            <typeparam name="TSettings">Setting type.</typeparam>
        </member>
        <member name="T:Serenity.Dependency">
            <summary>
            Service locator for Serenity. It requires setting an IoC container 
            that implements IDependencyResolver interface through SetResolver 
            method to operate normally.
            </summary>
        </member>
        <member name="M:Serenity.Dependency.Resolve``1">
            <summary>
            Maps TService service to its registered provider.
            </summary>
            <typeparam name="TService">Service type</typeparam>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            No provider is registered for TService</exception>
            <exception cref="T:System.InvalidProgramException">
            No dependency resolver is configured using SetResolver</exception>
        </member>
        <member name="M:Serenity.Dependency.TryResolve``1">
            <summary>
            Maps TService service to its registered provider. 
            Returns null if registration for TService doesn't exist or 
            no dependency resolver is configured using SetResolver.
            </summary>
            <typeparam name="TService">Service type</typeparam>
        </member>
        <member name="M:Serenity.Dependency.SetResolver(Serenity.IDependencyResolver)">
            <summary>
            Sets current dependency resolver and returns previous one if exists.
            </summary>
            <param name="value">Dependency resolver</param>
        </member>
        <member name="P:Serenity.Dependency.HasResolver">
            <summary>
            Returns true if a dependency resolver is set through SetResolver.
            Use this property to check if there is a current resolver as Resolver 
            property raises an exception if not.
            </summary>
        </member>
        <member name="P:Serenity.Dependency.Resolver">
            <summary>
            Returns currently registered IDependencyResolver implementation.
            </summary>
            <exception cref="T:System.InvalidProgramException">
            No dependency resolver is configured using SetResolver</exception>
        </member>
        <member name="T:Serenity.IDependencyResolver">
            <summary>
            Dependency resolver abstraction
            </summary>
        </member>
        <member name="M:Serenity.IDependencyResolver.Resolve``1">
            <summary>
            Resolves the service type from registered dependencies.
            </summary>
            <typeparam name="TService">The type of the service to resolve.</typeparam>
            <returns>Resolved service of type TService</returns>
        </member>
        <member name="M:Serenity.IDependencyResolver.TryResolve``1">
            <summary>
            Tries to resolve the service type from registered dependencies.
            </summary>
            <typeparam name="TService">The type of the service to resolve.</typeparam>
            <returns>Resolved service of type TService, or null if none.</returns>
        </member>
        <member name="T:Serenity.Reflection.AssemblySorter">
            <summary>
            Sorts assemblies based on their dependencies
            </summary>
        </member>
        <member name="M:Serenity.Reflection.AssemblySorter.Sort(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Sorts the specified assemblies based on their dependencies.
            </summary>
            <param name="assemblies">The assemblies.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Reflection.AssemblySorter.TSort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Boolean)">
            <summary>
            A generic dependency sort function
            </summary>
            <typeparam name="T">Type of items</typeparam>
            <param name="source">The source.</param>
            <param name="dependencies">The dependencies.</param>
            <param name="throwOnCycle">if set to <c>true</c> throw on circular link.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Reflection.AnnotationTypeRegistry">
            <summary>
            Default annotation type registry
            </summary>
            <seealso cref="T:Serenity.Reflection.IAnnotationTypeRegistry" />
        </member>
        <member name="M:Serenity.Reflection.AnnotationTypeRegistry.GetAnnotationTypes">
            <summary>
            Gets the annotation types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Serenity.Reflection.AnnotationTypeRegistry.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:Serenity.Reflection.AnnotationTypeRegistry.GetAnnotationTypesFor(System.Type)">
            <summary>
            Gets the annotation types for given type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Reflection.AnnotationTypeRegistry.GetAnnotatedType(System.Type)">
            <summary>
            Gets the annotated type information for given type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            Annotated type information
            </returns>
        </member>
        <member name="T:Serenity.Reflection.CodeWriter">
            <summary>
            Used to write formatted code to a string builder.
            </summary>
        </member>
        <member name="M:Serenity.Reflection.CodeWriter.#ctor(System.Text.StringBuilder,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Reflection.CodeWriter"/> class.
            </summary>
            <param name="sb">The sb.</param>
            <param name="indentSize">Size of the indent.</param>
        </member>
        <member name="M:Serenity.Reflection.CodeWriter.Block(System.Action)">
            <summary>
            Increases indent, runs the insideBlock and decreases indent back.
            </summary>
            <param name="insideBlock">The inside block.</param>
        </member>
        <member name="M:Serenity.Reflection.CodeWriter.InBrace(System.Action)">
            <summary>
            Adds a brace, increases indent, runs the inside block, decreases indent back, closes the brace.
            </summary>
            <param name="insideBlock">The inside block.</param>
        </member>
        <member name="M:Serenity.Reflection.CodeWriter.StartBrace">
            <summary>
            Adds a brace, increases indent.
            </summary>
        </member>
        <member name="M:Serenity.Reflection.CodeWriter.EndBrace">
            <summary>
            Decreases indent and closes the brace
            </summary>
        </member>
        <member name="M:Serenity.Reflection.CodeWriter.Indent">
            <summary>
            Appends current indent
            </summary>
        </member>
        <member name="M:Serenity.Reflection.CodeWriter.Indented(System.String)">
            <summary>
            Appends current indent and the specified string
            </summary>
            <param name="s">The string.</param>
        </member>
        <member name="M:Serenity.Reflection.CodeWriter.IndentedLine(System.String)">
            <summary>
            Appends current indent, the specified string, and a new line.
            </summary>
            <param name="s">The s.</param>
        </member>
        <member name="M:Serenity.Reflection.CodeWriter.IndentedMultiLine(System.String)">
            <summary>
            Appends current indent for all lines of the specified string by splitting it 
            by end of line characters, and a new line.
            </summary>
        </member>
        <member name="P:Serenity.Reflection.CodeWriter.BraceOnSameLine">
            <summary>
            Whether to put opening brace on the same line.
            </summary>
            <value>
              <c>true</c> if brace on same line; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Serenity.Reflection.FastReflection">
            <summary>
            Fast reflection utils (not very fast in .NET4+)
            </summary>
        </member>
        <member name="M:Serenity.Reflection.FastReflection.DelegateForConstructor(System.Type)">
            <summary>
            Creates a delegate for constructor.
            </summary>
            <param name="type">The type.</param>
            <returns>Delegate for constructor</returns>
        </member>
        <member name="M:Serenity.Reflection.FastReflection.DelegateForConstructor``1(System.Type)">
            <summary>
            Creates a delegate for constructor.
            </summary>
            <typeparam name="TReturn">The type of the return.</typeparam>
            <param name="type">The type.</param>
            <returns></returns>
            <exception cref="T:System.MissingMethodException">No constructor</exception>
        </member>
        <member name="T:Serenity.Reflection.IAnnotatedType">
            <summary>
            Annotated type information
            </summary>
        </member>
        <member name="M:Serenity.Reflection.IAnnotatedType.GetAnnotatedProperty(System.Reflection.PropertyInfo)">
            <summary>
            Gets the annotated property.
            </summary>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Reflection.IAnnotationTypeRegistry">
            <summary>
            An interface to query list of annotation types for a given type
            </summary>
        </member>
        <member name="M:Serenity.Reflection.IAnnotationTypeRegistry.GetAnnotationTypesFor(System.Type)">
            <summary>
            Gets the annotation types for given type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Reflection.IAnnotationTypeRegistry.GetAnnotatedType(System.Type)">
            <summary>
            Gets the annotated type information for given type.
            </summary>
            <param name="type">The type.</param>
            <returns>Annotated type information</returns>
        </member>
        <member name="M:Serenity.Reflection.IAnnotationTypeRegistry.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="T:Serenity.Reflection.ILGeneration">
            <summary>
            IL Generation helpers
            </summary>
        </member>
        <member name="M:Serenity.Reflection.ILGeneration.GenerateGetter(System.Reflection.FieldInfo)">
            <summary>
            Generates the field getter.
            </summary>
            <param name="fieldInfo">The field information.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Reflection.ILGeneration.GenerateSetter(System.Reflection.FieldInfo)">
            <summary>
            Generates the field setter.
            </summary>
            <param name="fieldInfo">The field information.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Reflection.IPropertyInfo">
            <summary>
            An interface to virtualize property attribute access
            </summary>
        </member>
        <member name="P:Serenity.Reflection.IPropertyInfo.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="M:Serenity.Reflection.IPropertyInfo.GetAttribute``1">
            <summary>
            Gets the attribute.
            </summary>
            <typeparam name="TAttr">The type of the attribute.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Serenity.Reflection.IPropertyInfo.GetAttributes``1">
            <summary>
            Gets the attributes.
            </summary>
            <typeparam name="TAttr">The type of the attribute.</typeparam>
            <returns></returns>
        </member>
        <member name="P:Serenity.Reflection.IPropertyInfo.PropertyType">
            <summary>
            Gets the type of the property.
            </summary>
            <value>
            The type of the property.
            </value>
        </member>
        <member name="T:Serenity.Reflection.WrappedProperty">
            <summary>
            A class that basically implements IPropertyInfo for PropertyInfo objects
            </summary>
        </member>
        <member name="M:Serenity.Reflection.WrappedProperty.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Reflection.WrappedProperty"/> class.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="P:Serenity.Reflection.WrappedProperty.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Serenity.Reflection.WrappedProperty.PropertyType">
            <summary>
            Gets the type of the property.
            </summary>
            <value>
            The type of the property.
            </value>
        </member>
        <member name="M:Serenity.Reflection.WrappedProperty.GetAttribute``1">
            <summary>
            Gets the attribute.
            </summary>
            <typeparam name="TAttr">The type of the attribute.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Serenity.Reflection.WrappedProperty.GetAttributes``1">
            <summary>
            Gets the attributes.
            </summary>
            <typeparam name="TAttr">The type of the attribute.</typeparam>
            <returns></returns>
        </member>
        <member name="T:Serenity.Check">
            <summary>
            Contains argument validation methods
            </summary>
        </member>
        <member name="M:Serenity.Check.NotNull(System.Object,System.String)">
            <summary>
            Checks argument is not null
            </summary>
        </member>
        <member name="M:Serenity.Check.NotNullOrEmpty(System.String,System.String)">
            <summary>
            Checks argument is not null or empty
            </summary>
        </member>
        <member name="M:Serenity.Check.NotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Checks argument is not null or string containing whitespace only
            </summary>
        </member>
        <member name="T:Serenity.CollectionExtensions">
            <summary>
            Basic collection extensions
            </summary>
        </member>
        <member name="M:Serenity.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
            Adds multiple items to a list.
            </summary>
            <typeparam name="T">Type of items</typeparam>
            <param name="list">The list.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:Serenity.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds multiple items to a list.
            </summary>
            <typeparam name="T">Type of items</typeparam>
            <param name="list">The list.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:Serenity.CollectionExtensions.Get``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets the specified key or returns default value of TValue if not found.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dict">The dictionary.</param>
            <param name="key">The key.</param>
            <returns>Value for specified key, or default value if not found.</returns>
        </member>
        <member name="M:Serenity.CollectionExtensions.Get``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Gets the specified key or returns defaultValue if not found.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dict">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns>
            Value for specified key, or default value if not found.
            </returns>
        </member>
        <member name="T:Serenity.Extensions.DependencyInjection.CoreServiceCollectionExtensions">
            <summary>
            Contains extensions to register core services
            </summary>
        </member>
        <member name="M:Serenity.Extensions.DependencyInjection.CoreServiceCollectionExtensions.AddCaching(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds memory caching as ILocalCache implementation and a distributed cache
            emulator as IDistributed cache implementation.
            </summary>
            <param name="services">The services.</param>
        </member>
        <member name="M:Serenity.Extensions.DependencyInjection.CoreServiceCollectionExtensions.AddFileLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the simple file logging.
            </summary>
            <param name="services">The services.</param>
        </member>
        <member name="M:Serenity.Extensions.DependencyInjection.CoreServiceCollectionExtensions.AddTextRegistry(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the local text registry.
            </summary>
            <param name="services">The services.</param>
        </member>
        <member name="M:Serenity.Extensions.DependencyInjection.CoreServiceCollectionExtensions.AddAnnotationTypes(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the annotation type registry.
            </summary>
            <param name="services">The services.</param>
        </member>
        <member name="T:Serenity.DateElementOrder">
            <summary>
              Date element orders</summary>
        </member>
        <member name="F:Serenity.DateElementOrder.DayMonthYear">
            <summary>d/M/y</summary>
        </member>
        <member name="F:Serenity.DateElementOrder.MonthDayYear">
            <summary>M/d/y</summary>
        </member>
        <member name="F:Serenity.DateElementOrder.YearMonthDay">
            <summary>y/M/y</summary>
        </member>
        <member name="T:Serenity.DateHelper">
            <summary>
            Static class with common date utilities and constants
            </summary>
        </member>
        <member name="F:Serenity.DateHelper.ISODateTimeFormatUTC">
            <summary>
              ISO Date and Time Format (up to milliseconds).</summary>
        </member>
        <member name="F:Serenity.DateHelper.ISODateTimeFormatLocal">
            <summary>
              ISO Date and Time Format (up to milliseconds).</summary>
        </member>
        <member name="M:Serenity.DateHelper.TryParseISO8601DateTime(System.String,System.DateTime@)">
            <summary>
              Tries to parse an ISO 8601 date-time string.</summary>
            <param name="value">
              String to be parsed</param>
            <param name="date">
              Parameter to return parsed date-time value in.</param>
            <returns>
              True if string is a valid ISO8601 date-time string.</returns>
        </member>
        <member name="P:Serenity.DateHelper.CurrentDateElementOrder">
            <summary>
              Returns one of "dmy", "ymd", "mdy" date element order depending on current culture.</summary>
            <returns>
              Active date element order.</returns>
        </member>
        <member name="M:Serenity.DateHelper.DateElementOrderFor(System.String)">
            <summary>
            Gets the date element order for specified short date time format.
            </summary>
            <param name="shortDatePattern">The short date pattern.</param>
            <returns>Date element order</returns>
        </member>
        <member name="M:Serenity.DateHelper.DateOrderString(Serenity.DateElementOrder)">
            <summary>
              Gets date order string (one of "dmy", "ymd", "mdy") for a specified order.</summary>
            <param name="order">
              Order</param>
            <returns>
              Date order string</returns>
        </member>
        <member name="M:Serenity.DateHelper.DefaultDateFormat(Serenity.DateElementOrder)">
            <summary>
              Gets defalt date format for specified order.</summary>
            <param name="order">
              Order</param>
            <returns>
              One of "dd/MM/yyyy", "MM/dd/yyyy", "yyyy/MM/dd".</returns>
        </member>
        <member name="M:Serenity.DateHelper.DefaultDateTimeFormat(Serenity.DateElementOrder)">
            <summary>
              Gets defalt date time format for specified order.</summary>
            <param name="order">
              Order</param>
            <returns>
              One of "dd/MM/yyyy HH:mm:ss", "MM/dd/yyyy HH:mm:ss", "yyyy/MM/dd HH:mm:ss".</returns>       
        </member>
        <member name="P:Serenity.DateHelper.CurrentDateFormat">
            <summary>
              Gets default date format for current culture.</summary>
        </member>
        <member name="P:Serenity.DateHelper.CurrentDateTimeFormat">
            <summary>
              Gets default date time format for current culture.</summary>
        </member>
        <member name="T:Serenity.EnumMapper">
            <summary>
            Contains Enum mapping and other helper functions
            </summary>
        </member>
        <member name="M:Serenity.EnumMapper.TryParse``1(System.String,``0@)">
            <summary>
            Tries to parse the enum string.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="key">The enumeration key or integer value.</param>
            <param name="value">The value.</param>
            <returns>If parsed successfully true</returns>
        </member>
        <member name="M:Serenity.EnumMapper.Parse``1(System.String)">
            <summary>
            Parses the specified enum key.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="key">The enum key or numeric value.</param>
            <returns>Parsed enum value</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Enum value is not valid.</exception>
        </member>
        <member name="M:Serenity.EnumMapper.ToString(System.Type,System.Object)">
            <summary>
            Converts an enum value to string.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <param name="value">The value.</param>
            <returns>
            A <see cref="T:System.String" /> that represents enum value.
            This is the identifier of the enum value or a numeric value.
            </returns>
        </member>
        <member name="M:Serenity.EnumMapper.GetName(System.Enum)">
            <summary>
            Gets the name of the enum value.
            </summary>
            <param name="value">The value.</param>
            <returns>Enum name.</returns>
        </member>
        <member name="M:Serenity.EnumMapper.GetText(System.Enum)">
            <summary>
            Gets the display text of the enum value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.EnumMapper.GetEnumTypeKey(System.Type)">
            <summary>
            Gets the enum type key.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <returns>Enum type key</returns>
        </member>
        <member name="M:Serenity.EnumMapper.FormatEnum(System.Type,System.Object)">
            <summary>
            Formats the enum.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.ExceptionExtensions">
            <summary>
            Exception data extensions
            </summary>
        </member>
        <member name="M:Serenity.ExceptionExtensions.SetData(System.Exception,System.String,System.Object)">
            <summary>
              Sets custom exception data with given property name and value. Sets the data in base exception.</summary>
            <param name="exception">
              Exception to set custom data in.</param>
            <param name="property">
              Custom exception data name.</param>
            <param name="value">
              Custom exception data value.</param>
        </member>
        <member name="T:Serenity.Invariants">
            <summary>
            Invariant culture related constants and formats.
            </summary>
        </member>
        <member name="F:Serenity.Invariants.NumberFormat">
            <summary>
              Number format information for invariant culture</summary>
        </member>
        <member name="F:Serenity.Invariants.DateTimeFormat">
            <summary>
              Date time format information for invariant culture</summary>
        </member>
        <member name="M:Serenity.Invariants.#cctor">
            <summary>
              Statik DataHelper contructor'ı. Varsayılan bağlantı string'i ve bağlantı kültürü parametlerini
              initialize eder.
            </summary>
        </member>
        <member name="M:Serenity.Invariants.IsIntegerType(System.Object)">
            <summary>
            Determines whether type of the value is an integer type (Int16, Int32, Int64).
            Avoid using this function as it is obsolete.
            </summary>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if integer type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Serenity.Invariants.ToInvariant(System.Int32)">
            <summary>
            Converts value to string using invariant culture.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Invariants.ToInvariant(System.Int64)">
            <summary>
            Converts value to string using invariant culture.
            </summary>
            <param name="value">The value.</param>
            <returns>Converted string.</returns>
        </member>
        <member name="M:Serenity.Invariants.ToInvariant(System.Double)">
            <summary>
            Converts value to string using invariant culture.
            </summary>
            <param name="value">The value.</param>
            <returns>Converted string.</returns>
        </member>
        <member name="M:Serenity.Invariants.ToInvariant(System.Decimal)">
            <summary>
            Converts value to string using invariant culture.
            </summary>
            <param name="value">The value.</param>
            <returns>Converted string.</returns>
        </member>
        <member name="M:Serenity.Invariants.TryParseID(System.String)">
            <summary>
              <p>Tries to converts an ID's string representation to its numerical ID value (Int64).</p>
              <p>Unlike <see cref="M:System.Int64.Parse(System.String)"/>, <c>null</c>, empty string and all other
              invalid strings results in <see cref="T:System.Int64"/> value (not an exception).</p></summary>
            <param name="str">
              String representation of an ID.</param>
            <returns>
              Numerical ID value or Null.Int64 if null, empty, or invalid string.</returns>
            <seealso cref="M:Serenity.Invariants.TryParseID(System.String)"/>
            <seealso cref="M:System.Int64.Parse(System.String)"/>
        </member>
        <member name="M:Serenity.Invariants.TryParseID32(System.String)">
            <summary>
              <p>Tries to converts an ID's string representation to its numerical ID value (Int64).</p>
              <p>Unlike <see cref="M:System.Int64.Parse(System.String)"/>, <c>null</c>, empty string and all other
              invalid strings results in <see cref="T:System.Int64"/> value (not an exception).</p></summary>
            <param name="str">
              String representation of an ID.</param>
            <returns>
              Numerical ID value or Null.Int64 if null, empty, or invalid string.</returns>
            <seealso cref="M:Serenity.Invariants.TryParseID(System.String)"/>
            <seealso cref="M:System.Int64.Parse(System.String)"/>
        </member>
        <member name="M:Serenity.Invariants.IDString(System.Nullable{System.Int64})">
            <summary>
              Converts an ID value, to its string representation.</summary>
            <param name="id">
              ID value.</param>
            <returns>
              If <paramref name="id"/> has <see cref="T:System.Int64"/> value, <c>String.Empty</c>, 
              otherwise its string representation</returns>
        </member>
        <member name="T:Serenity.StringHelper">
            <summary>
              This static class contains some helper functions that operate on <see cref="T:System.String"/> objects.</summary>
        </member>
        <member name="M:Serenity.StringHelper.IsEmptyOrNull(System.String)">
            <summary>
              <p>Returns true if <see cref="T:System.String"/> is <c>null</c> or empty (zero length)</p></summary>
            <remarks>
              <p>This function might be useful if an empty string is assumed to be <c>null</c>.</p>
              <p>This is an extension method, so it can be called directly as <c>str.IsNullOrEmpty()</c>.</p></remarks>
            <param name="str">
              String.</param>
            <returns>
              If <paramref name="str"/> is <c>null</c> or empty, <c>true</c></returns>
        </member>
        <member name="M:Serenity.StringHelper.IsNullOrEmpty(System.String)">
            <summary>
              <p>Returns true if <see cref="T:System.String"/> is <c>null</c> or empty (zero length)</p></summary>
            <remarks>
              <p>This function might be useful if an empty string is assumed to be <c>null</c>.</p>
              <p>This is an extension method, so it can be called directly as <c>str.IsNullOrEmpty()</c>.</p></remarks>
            <param name="str">
              String.</param>
            <returns>
              If <paramref name="str"/> is <c>null</c> or empty, <c>true</c></returns>
        </member>
        <member name="M:Serenity.StringHelper.IsTrimmedEmpty(System.String)">
            <summary>
              Checks if a string <see cref="T:System.String"/> is <c>null</c>, empty or just contains whitespace
              characters.</summary>
            <remarks>
              <p><b>Warning:</b> "\n" (line end), "\t" (tab) and some other are also considered as whitespace). 
              To see a list see <see cref="M:System.String.Trim" /> function.</p>
              <p>This is an extension method, so it can be called directly as <c>str.IsTrimmedEmpty()</c>.</p></remarks>
            <param name="str">
              String.</param>
            <returns>
              If string is null, empty or contains only white space, <c>true</c></returns>
        </member>
        <member name="M:Serenity.StringHelper.TrimToNull(System.String)">
            <summary>
              <p>Removes whitespace characters in the left or right of the <see cref="T:System.String"/> string,
              and if resulting string is empty or null, returns null.</p></summary>
            <remarks>
              <p>Generally, when a user entered string is going to be saved to database, if user entered an
              empty string, <c>null</c> or a string of whitespaces, it is stored as <c>null</c>, otherwise
              it is expected to remove whitespace at start and end only.</p>
              <p><b>Warning:</b> "\n" (line end), "\t" (tab) and some other are also considered as whitespace). 
              To see a list see <see cref="M:System.String.Trim" /> function.</p>
              <p>This is an extension method, so it can be called directly as <c>str.TrimToNull()</c>.</p></remarks>
            <param name="str">
              String to be trimmed.</param>
            <returns>
              Trimmed string, result is null if empty.</returns>
        </member>
        <member name="M:Serenity.StringHelper.TrimToEmpty(System.String)">
            <summary>
              <p>Removes whitespace characters in the left or right of the <see cref="T:System.String"/> string,
              and if resulting string is empty or null, returns empty.</p></summary>
            <remarks>
              <p>Generally, when a user entered string is going to be saved to database, if user entered an
              empty string, <c>null</c> or a string of whitespaces, it is stored as empty string, otherwise
              it is expected to remove whitespace at start and end only.</p>
              <p><b>Warning:</b> "\n" (line end), "\t" (tab) and some other are also considered as whitespace). 
              To see a list see <see cref="M:System.String.Trim" /> function.</p>
              <p>This is an extension method, so it can be called directly as <c>str.TrimToEmpty()</c>.</p></remarks>
            <param name="str">
              String to be trimmed.</param>
            <returns>
              Trimmed string (result won't be null).</returns>
        </member>
        <member name="M:Serenity.StringHelper.IsTrimmedSame(System.String,System.String)">
            <summary>
              Compares two strings ignoring whitespace at the left or right.</summary>
            <remarks>
              <p><c>null</c> is considered to be empty.</p>
              <p><b>Warning:</b> "\n" (line end), "\t" (tab) and some other are also considered as whitespace). 
              To see a list see <see cref="M:System.String.Trim" /> function.</p>
              <p>This function can be used to compare a string entered by user to the value in the database
              for equality.</p></remarks>
            <param name="string1">
              String 1.</param>
            <param name="string2">
              String 2.</param>
            <returns>
              If two strings are same trimmed, true</returns>
        </member>
        <member name="M:Serenity.StringHelper.ThreeDots(System.String,System.Int32)">
            <summary>
              If the string's length is over a specified limit, trims its right and adds three points ("...").</summary>
            <remarks>
              This is an extension method, so it can be called directly as <c>str.ThreeDots()</c>.</remarks> 
            <param name="str">
              String.</param>
            <param name="maxLength">
              Maksimum length for the resulting string. If given as 0, or <paramref name="str"/> is shorter
              than this value, string returns as is. Otherwise <paramref name="str"/> 
              it is trimmed to be under this limit in length including "the three dots".</param>
            <returns>
              <paramref name="str"/> itself, or trimmed and three dotted string</returns>
        </member>
        <member name="M:Serenity.StringHelper.ToSingleLine(System.String)">
            <summary>
            Converts the string to single line by replacing line endings with space.
            </summary>
            <param name="str">The string.</param>
            <returns>Single lined string.</returns>
        </member>
        <member name="M:Serenity.StringHelper.ToSingleQuoted(System.String)">
            <summary>
            Converts the string to its single quoted representation.
            </summary>
            <param name="str">The string.</param>
            <returns>Single quoted string.</returns>
        </member>
        <member name="M:Serenity.StringHelper.QuoteString(System.String,System.Text.StringBuilder,System.Boolean)">
            <summary>
              Quotes a string</summary>
            <param name="s">
              String</param>
            <param name="sb">
              StringBuilder</param>
            <param name="doubleQuote">
              True to use double quotes</param>
        </member>
        <member name="M:Serenity.StringHelper.IsEmptyOrNull(System.Collections.ICollection)">
            <summary>
            Determines whether the collection is empty or null.
            </summary>
            <param name="collection">The collection.</param>
            <returns>
              <c>true</c> if the collection is empty or null; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Serenity.StringHelper.SafeSubstring(System.String,System.Int32,System.Int32)">
            <summary>
            A substring function that doesn't raise out of bound errors or null reference exception.
            </summary>
            <param name="value">The value.</param>
            <param name="startIndex">The start index.</param>
            <param name="maxLength">The maximum length.</param>
            <returns>Substring or empty string.</returns>
        </member>
        <member name="M:Serenity.StringHelper.SanitizeFilename(System.String)">
            <summary>
            Sanitizes the filename by replacing /, :, &amp;, ı characters.
            </summary>
            <param name="s">The string.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">s is null</exception>
        </member>
        <member name="M:Serenity.StringHelper.RemoveDiacritics(System.String)">
            <summary>
            Removes the diacritic characters from string by replacing them with ASCII versions.
            </summary>
            <param name="s">The string.</param>
            <returns>String with diacritics replaced.</returns>
        </member>
        <member name="M:Serenity.StringHelper.ToStringDefault``1(System.Nullable{``0},System.String,System.IFormatProvider,System.String)">
            <summary>
            Formats a nullable struct
            </summary>
            <param name="source"></param>
            <param name="format">The format string 
            If <c>null</c> use the default format defined for the type of the IFormattable implementation.</param>
            <param name="provider">The format provider 
            If <c>null</c> the default provider is used</param>
            <param name="empty">The string to show when the source is <c>null</c>. 
            If <c>null</c> an empty string is returned</param>
            <returns>The formatted string or the default value if the source is <c>null</c></returns>
        </member>
        <member name="M:Serenity.StringHelper.ToStringDefault``1(``0,System.String,System.IFormatProvider,System.String)">
            <summary>
            Formats a nullable object
            </summary>
            <param name="source"></param>
            <param name="format">The format string 
            If <c>null</c> use the default format defined for the type of the IFormattable implementation.</param>
            <param name="provider">The format provider 
            If <c>null</c> the default provider is used</param>
            <param name="empty">The string to show when the source is <c>null</c>. 
            If <c>null</c> an empty string is returned</param>
            <returns>The formatted string or the default value if the source is <c>null</c></returns>
        </member>
        <member name="M:Serenity.StringHelper.Join(System.String,System.String,System.String)">
            <summary>
            Joins two strings conditionally, by putting separator between if both are non empty
            </summary>
        </member>
        <member name="T:Serenity.UriHelper">
            <summary>
            Contains URI related helper functions.
            </summary>
        </member>
        <member name="M:Serenity.UriHelper.Combine(System.String,System.String)">
            <summary>
              Combine a url with a filename by inserting "/" char between them.This works like Path.Combine
             </summary>
            <param name="url">
              URL will be combined (null or empty can be used).</param>
            <param name="fileName">
              Filename or Path (required).</param>
            <returns>
              New string which consists of combining URL and Filename by inserting "/" char 
              between them
            </returns>
            <remarks>
              This function is used for only simple combining actions. like ".." relative actions 
              doesn't be checked as well as URL with querystring doesn't be supported. 
             </remarks>
        </member>
        <member name="T:Serenity.INotLoggedException">
            <summary>
            An exception that should not be logged.
            </summary>
        </member>
        <member name="P:Serenity.INotLoggedException.NotLoggedException">
            <summary>
            Gets a value indicating whether to not log exception.
            </summary>
            <value>
              <c>true</c> if not logged exception; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Serenity.ExceptionLog">
            <summary>
              Centralized logger for exceptions.</summary>
        </member>
        <member name="M:Serenity.ExceptionLog.Log(System.Exception)">
            <summary>
              Logs an exception. Nothing logged if exception logger delegate is not set.</summary>
            <param name="e"></param>
        </member>
        <member name="T:Serenity.IO.DeleteType">
            <summary>
              File deletion type.</summary>
        </member>
        <member name="F:Serenity.IO.DeleteType.Delete">
            <summary>
              Force delete</summary>
        </member>
        <member name="F:Serenity.IO.DeleteType.TryDelete">
            <summary>
              Try to delete</summary>
        </member>
        <member name="F:Serenity.IO.DeleteType.TryDeleteOrMark">
            <summary>
              Try to delete and mark if can't delete</summary>
        </member>
        <member name="T:Serenity.IO.GlobFilter">
            <summary>
            A fast glob implementation, compatible with .gitignore patterns of GIT
            </summary>
        </member>
        <member name="M:Serenity.IO.GlobFilter.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new GlobFilter, containing both include and exclude patterns.
            When "include" is null / empty, all files are included by default, unless
            they match a pattern in "exclude" list.
            When "exclude" is null, it is ignored.
            </summary>
            <param name="include">List of include patterns</param>
            <param name="exclude">List of exclude patterns</param>
        </member>
        <member name="M:Serenity.IO.GlobFilter.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new GlobFilter, with just "include" globs.
            </summary>
            <param name="globs">List of patterns</param>
        </member>
        <member name="M:Serenity.IO.GlobFilter.IsMatch(System.String)">
            <summary>
            Determines whether the specified path is matching this filter.
            </summary>
            <param name="path">The path.</param>
            <returns>
              <c>true</c> if the specified path is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Serenity.IO.GlobFilter.WildcardToRegex(System.String)">
            <summary>
            Wildcards to regex conversion. Inspired from NuGet source code.
            </summary>
            <param name="wildcard">The wildcard.</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.IO.GlobFilter.NormalizeGlob(System.String)">
            <summary>
            Normalizes the glob by replacing back slashes etc.
            </summary>
            <param name="glob">The glob.</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.IO.TemporaryFileHelper">
            <summary>
              Contains helper functions for temporary files and folders</summary>
        </member>
        <member name="F:Serenity.IO.TemporaryFileHelper.DefaultTemporaryCheckFile">
            <summary>
              A signature file that marks a folder as a temporary file to ensure that it actually contains temporary
              files and can be safely cleaned</summary>
        </member>
        <member name="F:Serenity.IO.TemporaryFileHelper.DefaultAutoExpireTime">
            <summary>
              By default, files older than 1 hour is cleared</summary>
        </member>
        <member name="F:Serenity.IO.TemporaryFileHelper.DefaultMaxFilesInDirectory">
            <summary>
              By default, if more than 1000 files exists in directory, they are deleted</summary>
        </member>
        <member name="M:Serenity.IO.TemporaryFileHelper.PurgeDirectoryDefault(System.String)">
            <summary>
              Clears a folder based on default conditions</summary>
            <param name="directoryToClean">
              Folder to be cleared</param>
            <remarks>
              If any errors occur during cleanup, this doesn't raise an exception
              and ignored. Other errors might raise an exception. As errors are
              ignored, method can't gurantee that less than specified number of files
              will be in the folder after it ends.</remarks>
        </member>
        <member name="M:Serenity.IO.TemporaryFileHelper.PurgeDirectory(System.String,System.TimeSpan,System.Int32,System.String)">
            <summary>
              Clears a folder based on specified conditions</summary>
            <param name="directoryToClean">
              Folder to be cleared</param>
            <param name="autoExpireTime">
              Files with creation time older than this is deleted. If passed as 0, time
              based cleanup is skipped.</param>
            <param name="maxFilesInDirectory">
              If more than this number of files exists, files will be deleted starting from 
              oldest to newest. By passing 0, all files can be deleted. If passed as -1,
              file count based cleanup is skipped.</param>
            <param name="checkFileName">
              Safety file to be checked. If it is specified and it doesn't exists, operation
              is aborted.</param>
            <remarks>
              If any errors occur during cleanup, this doesn't raise an exception
              and ignored. Other errors might raise an exception. As errors are
              ignored, method can't gurantee that less than specified number of files
              will be in the folder after it ends.</remarks>
        </member>
        <member name="M:Serenity.IO.TemporaryFileHelper.TryDelete(System.String)">
            <summary>
              Tries to delete a file with given path.</summary>
            <param name="filePath">
              File to be deleted (can be null).</param>
        </member>
        <member name="M:Serenity.IO.TemporaryFileHelper.Delete(System.String)">
            <summary>
              Deletes a file.</summary>
            <param name="filePath">
              File to be deleted (can be null).</param>
        </member>
        <member name="M:Serenity.IO.TemporaryFileHelper.Delete(System.String,Serenity.IO.DeleteType)">
            <summary>
              Deletes, tries to delete or marks a file for deletion depending on type.</summary>
            <param name="filePath">
              File to be deleted (can be null).</param>
            <param name="type">
              Delete type.</param>
        </member>
        <member name="M:Serenity.IO.TemporaryFileHelper.TryDeleteOrMark(System.String)">
            <summary>
              Tries to delete a file or marks it for deletion by DeleteMarkedFiles method by
              creating a ".delete" file.</summary>
            <param name="filePath">
              File to be deleted</param>
        </member>
        <member name="M:Serenity.IO.TemporaryFileHelper.TryDeleteMarkedFiles(System.String)">
            <summary>
              Tries to delete all files that is marked for deletion by TryDeleteOrMark in a folder.</summary>
            <param name="path">
              Path of marked files to be deleted</param>
        </member>
        <member name="M:Serenity.IO.TemporaryFileHelper.ClearTempFiles(System.Boolean)">
            <summary>
            Clears the temporary files.
            </summary>
            <param name="ignoreExpiry">if set to <c>true</c> ignore expiry dates.</param>
        </member>
        <member name="M:Serenity.IO.TemporaryFileHelper.RegisterTempFile(System.String,System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Registers the temporary file.
            </summary>
            <param name="filename">The filename.</param>
            <param name="expiry">The expiry.</param>
            <param name="removeFolder">if set to <c>true</c> [remove folder].</param>
        </member>
        <member name="M:Serenity.IO.TemporaryFileHelper.RandomFileCode">
            <summary>
              Gets a 13 character random code that can be used safely in a filename</summary>
            <returns>
              A random code.</returns>
        </member>
        <member name="T:Serenity.JSON">
            <summary>
            Contains shortcuts to Newtonsoft.Json serialization / deserialization methods, and default
            Serenity settings.
            </summary>
        </member>
        <member name="M:Serenity.JSON.Parse``1(System.String)">
            <summary>
            Deserializes a JSON string to an object
            </summary>
            <typeparam name="T">Type to deserialize</typeparam>
            <param name="input">JSON string</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:Serenity.JSON.Parse(System.String,System.Type)">
            <summary>
            Deserializes a JSON string to an object
            </summary>
            <param name="targetType">Type to deserialize</param>
            <param name="input">JSON string</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:Serenity.JSON.ParseTolerant``1(System.String)">
            <summary>
            Deserializes a JSON string to an object, using more tolerant settings.
            </summary>
            <typeparam name="T">Type to deserialize</typeparam>
            <param name="input">JSON strng</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:Serenity.JSON.ParseTolerant(System.String,System.Type)">
            <summary>
            Deserializes a JSON string to an object, using more tolerant settings
            </summary>
            <param name="targetType">Type to deserialize</param>
            <param name="input">JSON string</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:Serenity.JSON.Stringify(System.Object)">
            <summary>
            Converts object to its JSON representation
            </summary>
            <param name="value">Value to convert to JSON</param>
            <returns>Serialized JSON string</returns>
        </member>
        <member name="M:Serenity.JSON.StringifyIndented(System.Object,System.Int32)">
            <summary>
            Converts object to its JSON representation
            </summary>
            <param name="value">Value to convert to JSON</param>
            <param name="indentation">Indentation (default 4)</param>
            <returns>Serialized JSON string</returns>
        </member>
        <member name="M:Serenity.JSON.ToJson(System.Object)">
            <summary>
              Converts an object to its JSON representation (extension method for Stringify)</summary>
            <param name="value">
              Object</param>
            <returns>
              JSON representation string.</returns>
            <remarks>
              null, Int32, Boolean, DateTime, Decimal, Double, Guid types handled automatically.
              If object has a ToJson method it is used, otherwise value.ToString() is used as last fallback.</remarks>
        </member>
        <member name="T:Serenity.JsonSettings">
            <summary>
            Contains default Serenity JSON serialization settings.
            </summary>
        </member>
        <member name="F:Serenity.JsonSettings.Tolerant">
            <summary>
            The tolerant settings, ignores missing members, reference loops on deserialization
            </summary>
        </member>
        <member name="F:Serenity.JsonSettings.Strict">
            <summary>
            The stricter settings, raises error on missing members / reference loops.
            </summary>
        </member>
        <member name="T:Serenity.Localization.EnumLocalTextRegistration">
            <summary>
            Contains initialization method for adding local text translations defined by
            Description attributes in enumeration classes.
            </summary>
        </member>
        <member name="M:Serenity.Localization.EnumLocalTextRegistration.AddEnumTexts(Serenity.Abstractions.ILocalTextRegistry,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.String)">
            <summary>
            Adds local text translations defined implicitly by Description attributes in 
            enumeration classes. Only enum values that has Description attribute are added as
            local text. By default, enums are registered in format:
            "Enums.{EnumerationTypeFullName}.{EnumValueName}". EnumerationTypeFullName, is
            fullname of the enumeration type. This can be overridden by attaching a EnumKey
            attribute.
            </summary>
            <param name="assemblies">Assemblies to search for enumeration classes in</param>
            <param name="languageID">Language ID texts will be added (default is invariant language)</param>
            <param name="registry">Registry</param>
        </member>
        <member name="T:Serenity.Localization.FallbackLocalTextRegistry">
            <summary>
            Adds key fallback to any ILocalTextRegistry implementation
            </summary>
        </member>
        <member name="M:Serenity.Localization.FallbackLocalTextRegistry.#ctor(Serenity.Abstractions.ILocalTextRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Localization.FallbackLocalTextRegistry"/> class.
            </summary>
            <param name="localTextRegistry">The local text registry.</param>
        </member>
        <member name="M:Serenity.Localization.FallbackLocalTextRegistry.TryGet(System.String,System.String)">
            <summary>
            Returns localized representation which corresponds to the local text key or the fallback if none 
            found in the registry.
            </summary>
            <param name="key">Local text key (e.g. Enums.Month.June)</param>
            <param name="languageID">Language identifier</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Localization.FallbackLocalTextRegistry.Add(System.String,System.String,System.String)">
            <summary>
            Adds a local text entry to the registry
            </summary>
            <param name="languageID">Language ID (e.g. en-US, tr-TR)</param>
            <param name="key">Local text key</param>
            <param name="text">Translated text</param>
        </member>
        <member name="M:Serenity.Localization.FallbackLocalTextRegistry.TryGetKeyFallback(System.String)">
            <summary>
            Get a fallback of the local text key
            </summary>
            <param name="key">Local text key</param>
            <returns>Local text key fallback</returns>
        </member>
        <member name="M:Serenity.Localization.FallbackLocalTextRegistry.BreakUpString(System.String)">
            <summary>
            Break up string without spaces (e.g. LastDirectoryUpdate) 
            into a normal string (e.g. 'Last Directory Update')
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Localization.ILocalTextContext">
            <summary>
            Local text context abstraction for sites that support a pending approval mode.
            </summary>
        </member>
        <member name="P:Serenity.Localization.ILocalTextContext.IsApprovalMode">
            <summary>
            Returns true if site is in pending approval mode for current user (e.g. a moderator)
            </summary>
        </member>
        <member name="T:Serenity.Localization.InitializedLocalText">
            <summary>
            A subclass of LocalText class that contains a initial translation value.
            Some classes like NestedLocalTextRegistration uses this type to avoid re-registering
            a initialized local text object, when their Initialization method called more than once.
            </summary>
        </member>
        <member name="M:Serenity.Localization.InitializedLocalText.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Localization.InitializedLocalText"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="initialText">The initial text.</param>
        </member>
        <member name="P:Serenity.Localization.InitializedLocalText.InitialText">
            <summary>
            Gets the initial text.
            </summary>
            <value>
            The initial text.
            </value>
        </member>
        <member name="T:Serenity.Localization.JsonLocalTextRegistration">
            <summary>
            Contains helper methods for registration of local texts in hierarchical/dictionary formatted JSON files.
            </summary>
        </member>
        <member name="M:Serenity.Localization.JsonLocalTextRegistration.AddFromNestedDictionary(System.Collections.Generic.IDictionary{System.String,Newtonsoft.Json.Linq.JToken},System.String,System.String,Serenity.Abstractions.ILocalTextRegistry)">
            <summary>
            Adds translation from a hierarchical local text dictionary parsed from JSON file.
            </summary>
            <param name="nested">Object parsed from local text JSON string</param>
            <param name="prefix">Prefix to prepend before local text keys</param>
            <param name="languageID">Language ID</param>
            <param name="registry">Registry</param>
        </member>
        <member name="M:Serenity.Localization.JsonLocalTextRegistration.ProcessNestedDictionary(System.Collections.Generic.IDictionary{System.String,Newtonsoft.Json.Linq.JToken},System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Converts translation from a hierarchical local text dictionary to a simple dictionary.
            </summary>
            <param name="nested">Object parsed from local text JSON string</param>
            <param name="prefix">Prefix to prepend before local text keys</param>
            <param name="target">Target dictionary that will contain keys and translations</param>
        </member>
        <member name="M:Serenity.Localization.JsonLocalTextRegistration.AddJsonTexts(Serenity.Abstractions.ILocalTextRegistry,System.String)">
            <summary>
            Adds translations from JSON files at specified path. File names in this directory should be in format 
            {anyprefix}.{languageID}.json where {languageID} is a language code like 'en', 'en-GB' etc.
            </summary>
            <param name="path">Path containing JSON files</param>
            <param name="registry">Registry</param>
        </member>
        <member name="T:Serenity.Localization.LocalTextRegistry">
            <summary>
            Default ILocalTextRegistry implementation.
            </summary>
            <remarks>
            This implementation also supports a "pending approval" mode. If your site needs some moderator
            approval before translations are published, you may put your site to this mode when
            some moderator is using the site by registering an ILocalTextContext provider. Thus,
            moderators can see unapproved texts while they are logged in to the site.
            </remarks>
        </member>
        <member name="M:Serenity.Localization.LocalTextRegistry.Add(System.String,System.String,System.String)">
            <summary>
            Adds a local text entry to the registry
            </summary>
            <param name="languageID">Language ID (e.g. en-US, tr-TR)</param>
            <param name="key">Local text key</param>
            <param name="text">Translated text</param>
        </member>
        <member name="M:Serenity.Localization.LocalTextRegistry.AddPending(System.String,System.String,System.String)">
            <summary>
            Adds a pending approval local text entry to the registry. These texts can only be seen
            while moderators are browsing the site. You can determine which users are moderators by
            implementing ILocalTextContext interface, and registering it through the service locator.
            </summary>
            <param name="languageID">Language ID (e.g. en-US, tr-TR)</param>
            <param name="key">Local text key</param>
            <param name="text">Translated text</param>
        </member>
        <member name="M:Serenity.Localization.LocalTextRegistry.TryGet(System.String,System.String)">
            <summary>
            Returns localized representation which corresponds to the local text key or the key itself if none 
            found in local text registry.
            </summary>
        </member>
        <member name="M:Serenity.Localization.LocalTextRegistry.TryGet(System.String,System.String,System.Boolean)">
            <summary>
            Converts the local text key to its representation in requested language. Looks up text
            in requested language, its Fallbacks and invariant language in order. If not found in any,
            null is returned. See SetLanguageFallback for information about language fallbacks.
            </summary>
            <param name="languageID">Language ID.</param>
            <param name="textKey">Local text key (can be null).</param>
            <param name="isApprovalMode">If pending approval texts to be used, true.</param>
        </member>
        <member name="M:Serenity.Localization.LocalTextRegistry.SetLanguageFallback(System.String,System.String)">
            <summary>
            Sets the language fallback of the specified language.
            When a text is not found in one language, LocalTextRegistry checks its language fallback for
            a translation. Some implicit language fallback definitions exist even if none set. For example, "en" is 
            language fallback ID of "en-US" and "en-UK", "tr" is language fallback ID of "tr-TR". Also, 
            invariant language ID ("") is an implicit fallback of all languages.
            </summary>
            <param name="languageID">Language identifier. (e.g. en-US)</param>
            <param name="languageFallbackID">language fallback identifier. (e.g. en)</param>
        </member>
        <member name="M:Serenity.Localization.LocalTextRegistry.GetAllAvailableTextsInLanguage(System.String,System.Boolean)">
            <summary>
              Gets all available text keys (that has a translation in language or any of its
              language fallbacks) and their local texts.</summary>
            <param name="languageID">
              Language ID (required).</param>
            <param name="pending">
              True if pending texts should be returned (e.g. in preview/edit mode).</param>
            <returns>
              A dictionary of all texts in the language.</returns>
        </member>
        <member name="M:Serenity.Localization.LocalTextRegistry.GetAllTextKeys(System.Boolean)">
            <summary>
            Gets all text keys that is currently registered in any language
            </summary>
        </member>
        <member name="T:Serenity.Localization.NestedLocalTextRegistration">
            <summary>
            Contains helper methods for registration of local texts in nested static classes.
            Nested static contains LocalText objects with actual translations as keys. This class locates
            them (with NestedLocalTextsAttribute at outermost class), determines keys by path from outermost
            to nested class name, replaces existing LocalText instance with a InitializedLocalText instance
            containing this generated key and initial translation, and registers this translation in 
            ILocalTextRegistry provider.
            </summary>
        </member>
        <member name="M:Serenity.Localization.NestedLocalTextRegistration.AddNestedTexts(Serenity.Abstractions.ILocalTextRegistry,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Adds translations from static nested local text classes marked with NestedLocalTextAttribute.
            </summary>
        </member>
        <member name="T:Serenity.Localization.NestedPermissionKeyRegistration">
            <summary>
            Contains helper methods for registration of permission keys in nested static classes.
            These classes contains string contants containing permission keys. 
            Display name for permission keys can be set by [DisplayName] attribute.
            Display name for groups can be set by [Description] attribute on classes themselves.
            For group display name to work, all constants in a class must start with same group prefix.
            </summary>
        </member>
        <member name="M:Serenity.Localization.NestedPermissionKeyRegistration.AddNestedPermissions(Serenity.Abstractions.ILocalTextRegistry,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Gets permission keys and adds texts if any from static nested permission key classes marked with NestedPermissionKeys attribute.
            </summary>
        </member>
        <member name="T:Serenity.LocalText">
            <summary>
            Defines a localizable text resource. Contains a local text key and has implicit conversions to and 
            from String.
            </summary>
        </member>
        <member name="F:Serenity.LocalText.InvariantLanguageID">
            <summary>
            Invariant language ID is an empty string
            </summary>
        </member>
        <member name="F:Serenity.LocalText.Empty">
            <summary>
            An empty local text instance like String.Empty
            </summary>
        </member>
        <member name="M:Serenity.LocalText.#ctor(System.String)">
            <summary>
            Creates a new LocalText instance that contains the specified local text key
            </summary>
            <param name="key">Local text key</param>
        </member>
        <member name="P:Serenity.LocalText.Key">
            <summary>
            Gets the local text key
            </summary>
        </member>
        <member name="M:Serenity.LocalText.ToString">
            <summary>
            Returns localized representation which corresponds to the local text key or the key itself if none 
            found in local text registry.
            </summary>
        </member>
        <member name="M:Serenity.LocalText.op_Implicit(Serenity.LocalText)~System.String">
            <summary>
            Implicit conversion to String that returns localized representation which corresponds to the local 
            text key or the key itself if none found in local text registry.
            </summary>
        </member>
        <member name="M:Serenity.LocalText.op_Implicit(System.String)~Serenity.LocalText">
            <summary>
            Implicit conversion from String that creates a new instance of LocalText with the specified key.
            </summary>
            <param name="key">Local text key</param>
        </member>
        <member name="M:Serenity.LocalText.Get(System.String)">
            <summary>
            Returns localized representation which corresponds to the local text key or the key itself if none 
            found in local text registry.
            </summary>
        </member>
        <member name="M:Serenity.LocalText.TryGet(System.String)">
            <summary>
            Returns localized representation which corresponds to the local text key or NULL if none found 
            in local text registry.
            </summary>
        </member>
        <member name="T:Serenity.Logging.FileLogger">
            <summary>
            A simple file logger implementation
            </summary>
            <seealso cref="T:Serenity.Abstractions.ILogger" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Serenity.Logging.FileLogger.#ctor(Serenity.Logging.FileLogger.LogSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Serenity.Logging.FileLogger"/> class.
            </summary>
            <param name="log">The log.</param>
        </member>
        <member name="M:Serenity.Logging.FileLogger.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Serenity.Logging.FileLogger"/> class.
            </summary>
        </member>
        <member name="P:Serenity.Logging.FileLogger.FlushTimeout">
            <summary>
            Gets or sets the flush timeout.
            </summary>
            <value>
            The flush timeout.
            </value>
        </member>
        <member name="P:Serenity.Logging.FileLogger.File">
            <summary>
            Gets or sets the file.
            </summary>
            <value>
            The file.
            </value>
        </member>
        <member name="M:Serenity.Logging.FileLogger.RandomFileCode">
            <summary>
            Generates a random file code.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Serenity.Logging.FileLogger.LogSettings">
            <summary>
            File logger settings
            </summary>
        </member>
        <member name="P:Serenity.Logging.FileLogger.LogSettings.File">
            <summary>
            Gets or sets the file name.
            </summary>
            <value>
            The file.
            </value>
        </member>
        <member name="P:Serenity.Logging.FileLogger.LogSettings.FlushTimeout">
            <summary>
            Gets or sets the flush timeout.
            </summary>
            <value>
            The flush timeout.
            </value>
        </member>
        <member name="M:Serenity.Logging.FileLogger.Flush">
            <summary>
            Flushes this instance.
            </summary>
        </member>
        <member name="M:Serenity.Logging.FileLogger.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Serenity.Logging.FileLogger.Write(Serenity.Logging.LoggingLevel,System.String,System.Exception,System.Type)">
            <summary>
            Writes the specified level log message.
            </summary>
            <param name="level">The level.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Serenity.Logging.LoggingLevel">
            <summary>
            Logging level constants
            </summary>
        </member>
        <member name="F:Serenity.Logging.LoggingLevel.Verbose">
            <summary>
            Verbose
            </summary>
        </member>
        <member name="F:Serenity.Logging.LoggingLevel.Debug">
            <summary>
            Debug
            </summary>
        </member>
        <member name="F:Serenity.Logging.LoggingLevel.Info">
            <summary>
            Information
            </summary>
        </member>
        <member name="F:Serenity.Logging.LoggingLevel.Warn">
            <summary>
            Warning
            </summary>
        </member>
        <member name="F:Serenity.Logging.LoggingLevel.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:Serenity.Logging.LoggingLevel.Fatal">
            <summary>
            Fatal
            </summary>
        </member>
        <member name="F:Serenity.Logging.LoggingLevel.Off">
            <summary>
            Off
            </summary>
        </member>
        <member name="T:Serenity.Log">
            <summary>
            Static class with log helper functions
            </summary>
        </member>
        <member name="P:Serenity.Log.MinimumLevel">
            <summary>
            Gets or sets the minimum level for logging.
            </summary>
            <value>
            The minimum level.
            </value>
        </member>
        <member name="M:Serenity.Log.IsLevelEnabled(Serenity.Logging.LoggingLevel)">
            <summary>
            Determines whether logging is enabled for specified level
            </summary>
            <param name="level">The level.</param>
            <returns>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Serenity.Log.IsEnabled">
            <summary>
            Gets a value indicating whether this logging is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Log.IsFatalEnabled">
            <summary>
            Gets a value indicating whether fatal level is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Serenity.Log.Fatal(System.String)">
            <summary>
            Logs a fatal level message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Serenity.Log.Fatal(System.String,System.Type)">
            <summary>
            Logs a fatal level message.
            </summary>
            <param name="message">The message.</param>
            <param name="source">The source type.</param>
        </member>
        <member name="M:Serenity.Log.Fatal(System.String,System.Exception,System.Type)">
            <summary>
            Logs a fatal level message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="source">The source type.</param>
        </member>
        <member name="P:Serenity.Log.IsErrorEnabled">
            <summary>
            Gets a value indicating whether error level logging is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Serenity.Log.Error(System.String)">
            <summary>
            Logs an error level message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Serenity.Log.Error(System.String,System.Type)">
            <summary>
            Logs an error level message.
            </summary>
            <param name="message">The message.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:Serenity.Log.Error(System.String,System.Exception,System.Type)">
            <summary>
            Logs an error level message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="source">The source.</param>
        </member>
        <member name="P:Serenity.Log.IsWarnEnabled">
            <summary>
            Gets a value indicating whether warning level logging is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Serenity.Log.Warn(System.String)">
            <summary>
            Logs a warning level message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Serenity.Log.Warn(System.String,System.Type)">
            <summary>
            Logs a warning level message.
            </summary>
            <param name="message">The message.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:Serenity.Log.Warn(System.String,System.Exception,System.Type)">
            <summary>
            Logs a warning level message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="source">The source.</param>
        </member>
        <member name="P:Serenity.Log.IsInfoEnabled">
            <summary>
            Gets a value indicating whether info level logging is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Serenity.Log.Info(System.String)">
            <summary>
            Logs an information level message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Serenity.Log.Info(System.String,System.Type)">
            <summary>
            Logs an information level message.
            </summary>
            <param name="message">The message.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:Serenity.Log.Info(System.String,System.Exception,System.Type)">
            <summary>
            Logs an information level message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="source">The source.</param>
        </member>
        <member name="P:Serenity.Log.IsDebugEnabled">
            <summary>
            Gets a value indicating whether debug level logging is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Serenity.Log.DebugLevel">
            <summary>
            Gets a value indicating whether debug level logging is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Serenity.Log.Debug(System.String)">
            <summary>
            Logs a debug level message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Serenity.Log.Debug(System.String,System.Type)">
            <summary>
            Logs a debug level message.
            </summary>
            <param name="message">The message.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:Serenity.Log.Debug(System.String,System.Exception,System.Type)">
            <summary>
            Logs a debug level message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="source">The source.</param>
        </member>
        <member name="P:Serenity.Log.IsVerboseEnabled">
            <summary>
            Gets a value indicating whether verbose level logging is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Serenity.Log.Verbose(System.String)">
            <summary>
            Logs a verbose level message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Serenity.Log.Verbose(System.String,System.Type)">
            <summary>
            Logs a verbose level message.
            </summary>
            <param name="message">The message.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:Serenity.Log.Verbose(System.String,System.Exception,System.Type)">
            <summary>
            Logs a verbose level message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:Serenity.Log.RandomFileCode">
            <summary>
            Generates a random file code.
            </summary>
            <returns>Random file code</returns>
        </member>
        <member name="T:Serenity.Plugins.CssFile">
            <summary>
            CSS file dependency for plugins
            </summary>
        </member>
        <member name="P:Serenity.Plugins.CssFile.Path">
            <summary>
            Gets or sets the path. Should start with "./" corresponding to plugin folder.
            </summary>
            <value>
            The path.
            </value>
        </member>
        <member name="T:Serenity.Plugins.ICssFiles">
            <summary>
            CSS file dependencies for plugins.
            </summary>
        </member>
        <member name="M:Serenity.Plugins.ICssFiles.GetCssFiles">
            <summary>
            Gets the list of CSS files.
            </summary>
            <returns>List of CSS files.</returns>
        </member>
        <member name="T:Serenity.Plugins.INavigationItems">
            <summary>
            Abstraction for plugins with navigation entries
            </summary>
        </member>
        <member name="M:Serenity.Plugins.INavigationItems.GetNavigationEntries">
            <summary>
            Gets the navigation entries.
            </summary>
            <returns>List of navigation entries.</returns>
        </member>
        <member name="T:Serenity.Plugins.IPlugin">
            <summary>
            Abstraction for plugins
            </summary>
        </member>
        <member name="T:Serenity.Plugins.IScriptFiles">
            <summary>
            Abstraction for plugins with script file dependencies
            </summary>
        </member>
        <member name="M:Serenity.Plugins.IScriptFiles.GetScriptFiles">
            <summary>
            Gets the script files.
            </summary>
            <returns>List of script files.</returns>
        </member>
        <member name="T:Serenity.Plugins.NavigationEntry">
            <summary>
            Plugin navigation entry abstraction.
            </summary>
        </member>
        <member name="P:Serenity.Plugins.NavigationEntry.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:Serenity.Plugins.NavigationEntry.Controller">
            <summary>
            Gets or sets the controller type.
            </summary>
            <value>
            The controller type.
            </value>
        </member>
        <member name="P:Serenity.Plugins.NavigationEntry.Action">
            <summary>
            Gets or sets the action name.
            </summary>
            <value>
            The action name.
            </value>
        </member>
        <member name="P:Serenity.Plugins.NavigationEntry.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>
            The URL.
            </value>
        </member>
        <member name="P:Serenity.Plugins.NavigationEntry.FullPath">
            <summary>
            Gets or sets the full path.
            </summary>
            <value>
            The full path.
            </value>
        </member>
        <member name="P:Serenity.Plugins.NavigationEntry.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>
            The category.
            </value>
        </member>
        <member name="P:Serenity.Plugins.NavigationEntry.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:Serenity.Plugins.NavigationEntry.IconClass">
            <summary>
            Gets or sets the icon class.
            </summary>
            <value>
            The icon class.
            </value>
        </member>
        <member name="P:Serenity.Plugins.NavigationEntry.ItemClass">
            <summary>
            Gets or sets the item class.
            </summary>
            <value>
            The item class.
            </value>
        </member>
        <member name="P:Serenity.Plugins.NavigationEntry.Permission">
            <summary>
            Gets or sets the permission.
            </summary>
            <value>
            The permission.
            </value>
        </member>
        <member name="P:Serenity.Plugins.NavigationEntry.Target">
            <summary>
            Gets or sets the target window.
            </summary>
            <value>
            The target window, e.g. _blank.
            </value>
        </member>
        <member name="T:Serenity.Plugins.PrecompiledViewsAttribute">
            <summary>
            Indicates that this plugin assembly contains precompiled views (by RazorGenerator)
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Serenity.Plugins.ScriptFile">
            <summary>
            Plugin script file registration
            </summary>
        </member>
        <member name="P:Serenity.Plugins.ScriptFile.Path">
            <summary>
            Gets or sets the path to file. Should start with "./" corresponding to plugin folder.
            </summary>
            <value>
            The path.
            </value>
        </member>
        <member name="T:Serenity.ReflectionExtensions">
            <summary>
            Reflection extensions
            </summary>
        </member>
        <member name="M:Serenity.ReflectionExtensions.GetAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the attribute.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="member">The member.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
    </members>
</doc>
